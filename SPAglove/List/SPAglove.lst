
AVRASM ver. 2.1.30  C:\Users\MrJohd\Desktop\Task\Á¹¾÷ÀÛÇ°\AVR_code\SPAglove\List\SPAglove.asm Tue Jun 05 21:08:42 2018

                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega128
                 ;Program type             : Application
                 ;Clock frequency          : 16.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1024 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: Yes
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : Off
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 00e7 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 011a 	JMP  _timer1_compa_isr
00001a 940c 0000 	JMP  0x00
00001c 940c 011e 	JMP  _timer1_ovf_isr
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0132 	JMP  _adc_isr
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 011f 	JMP  _timer3_compa_isr
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 012d 	JMP  _timer3_ovf_isr
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
00004f ffff
000050 ffff      	.DB  0xFF,0xFF,0xFF,0xFF
                 _0x4:
000051 ffff
000052 ffff      	.DB  0xFF,0xFF,0xFF,0xFF
                 _0x5:
000053 b717
000054 38d1      	.DB  0x17,0xB7,0xD1,0x38
                 _0x6:
C:\Users\MrJohd\Desktop\Task\Á¹¾÷ÀÛÇ°\AVR_code\SPAglove\List\SPAglove.asm(1116): warning: .cseg .db misalignment - padding zero byte
000055 000a      	.DB  0xA
                 _0x99:
000056 0000
000057 0000
000058 0000
000059 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005a 0000
00005b 3f80
00005c 0000
00005d 3f80      	.DB  0x0,0x0,0x80,0x3F,0x0,0x0,0x80,0x3F
                 _0xBB:
00005e 0000
00005f 0000
000060 0000
000061 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000062 0000
000063 0000
000064 0000
000065 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _0x0:
000066 6554
000067 7473
000068 6e69
000069 0067      	.DB  0x54,0x65,0x73,0x74,0x69,0x6E,0x67,0x0
00006a 6425
00006b 5400
00006c 6e75
00006d 696e      	.DB  0x25,0x64,0x0,0x54,0x75,0x6E,0x6E,0x69
00006e 676e
00006f 4400
000070 7475
000071 0079      	.DB  0x6E,0x67,0x0,0x44,0x75,0x74,0x79,0x0
000072 6425
000073 2520
000074 4500
000075 4600      	.DB  0x25,0x64,0x20,0x25,0x0,0x45,0x0,0x46
000076 2d00
000077 5400
000078 4900
000079 4d00      	.DB  0x0,0x2D,0x0,0x54,0x0,0x49,0x0,0x4D
00007a 5200
00007b 5600
00007c 6c61
00007d 6576      	.DB  0x0,0x52,0x0,0x56,0x61,0x6C,0x76,0x65
00007e 0021
00007f 7544
000080 7974
000081 3a20      	.DB  0x21,0x0,0x44,0x75,0x74,0x79,0x20,0x3A
000082 0020
000083 3225
000084 2064
000085 0025      	.DB  0x20,0x0,0x25,0x32,0x64,0x20,0x25,0x0
000086 4c46
000087 5845
000088 5000
000089 4552      	.DB  0x46,0x4C,0x45,0x58,0x0,0x50,0x52,0x45
00008a 0053
00008b 2e31
00008c 7250
00008d 7365      	.DB  0x53,0x0,0x31,0x2E,0x50,0x72,0x65,0x73
00008e 7573
00008f 6572
000090 5420
000091 5345      	.DB  0x73,0x75,0x72,0x65,0x20,0x54,0x45,0x53
000092 0054
000093 2e32
000094 7250
000095 7365      	.DB  0x54,0x0,0x32,0x2E,0x50,0x72,0x65,0x73
000096 7573
000097 6572
000098 5420
000099 6e75      	.DB  0x73,0x75,0x72,0x65,0x20,0x54,0x75,0x6E
00009a 696e
00009b 676e
00009c 3300
00009d 462e      	.DB  0x6E,0x69,0x6E,0x67,0x0,0x33,0x2E,0x46
00009e 656c
00009f 2078
0000a0 4554
0000a1 5453      	.DB  0x6C,0x65,0x78,0x20,0x54,0x45,0x53,0x54
0000a2 3400
0000a3 462e
0000a4 656c
0000a5 2078      	.DB  0x0,0x34,0x2E,0x46,0x6C,0x65,0x78,0x20
0000a6 7554
0000a7 6e6e
0000a8 6e69
0000a9 0067      	.DB  0x54,0x75,0x6E,0x6E,0x69,0x6E,0x67,0x0
0000aa 2e35
0000ab 5750
0000ac 204d
0000ad 4554      	.DB  0x35,0x2E,0x50,0x57,0x4D,0x20,0x54,0x45
0000ae 5453
0000af 3600
0000b0 502e
0000b1 4d55      	.DB  0x53,0x54,0x0,0x36,0x2E,0x50,0x55,0x4D
0000b2 2050
0000b3 4554
0000b4 5453
0000b5 3700      	.DB  0x50,0x20,0x54,0x45,0x53,0x54,0x0,0x37
0000b6 4f2e
0000b7 6472
0000b8 7265
0000b9 5420      	.DB  0x2E,0x4F,0x72,0x64,0x65,0x72,0x20,0x54
0000ba 5345
0000bb 0054
0000bc 2e38
0000bd 6156      	.DB  0x45,0x53,0x54,0x0,0x38,0x2E,0x56,0x61
0000be 766c
0000bf 2065
0000c0 724f
0000c1 6564      	.DB  0x6C,0x76,0x65,0x20,0x4F,0x72,0x64,0x65
0000c2 0072
0000c3 2e39
0000c4 6854
0000c5 6572      	.DB  0x72,0x0,0x39,0x2E,0x54,0x68,0x72,0x65
0000c6 6873
0000c7 6c6f
0000c8 3f64
0000c9 3100      	.DB  0x73,0x68,0x6F,0x6C,0x64,0x3F,0x0,0x31
0000ca 2e30
0000cb 5550
0000cc 504d
0000cd 5620      	.DB  0x30,0x2E,0x50,0x55,0x4D,0x50,0x20,0x56
0000ce 4c41
0000cf 4556
0000d0 2a00
0000d1 422a      	.DB  0x41,0x4C,0x56,0x45,0x0,0x2A,0x2A,0x42
0000d2 4552
0000d3 4b41
0000d4 2a21
0000d5 002a      	.DB  0x52,0x45,0x41,0x4B,0x21,0x2A,0x2A,0x0
                 _0x2020003:
0000d6 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
0000d7 0004      	.DW  0x04
0000d8 06d9      	.DW  _flex_min
0000d9 009e      	.DW  _0x3*2
                 
0000da 0004      	.DW  0x04
0000db 06e1      	.DW  _pressure_min
0000dc 00a2      	.DW  _0x4*2
                 
0000dd 0004      	.DW  0x04
0000de 06ee      	.DW  _kp
0000df 00a6      	.DW  _0x5*2
                 
0000e0 0001      	.DW  0x01
0000e1 071f      	.DW  _delta_ang
0000e2 00aa      	.DW  _0x6*2
                 
0000e3 0002      	.DW  0x02
0000e4 0720      	.DW  __base_y_G101
0000e5 01ac      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
0000e6 0000      	.DW  0
                 
                 __RESET:
0000e7 94f8      	CLI
0000e8 27ee      	CLR  R30
0000e9 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000ea e0f1      	LDI  R31,1
0000eb bff5      	OUT  MCUCR,R31
0000ec bfe5      	OUT  MCUCR,R30
0000ed 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
0000ef e1f8      	LDI  R31,0x18
0000f0 bdf1      	OUT  WDTCR,R31
0000f1 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
0000f2 e08d      	LDI  R24,(14-2)+1
0000f3 e0a2      	LDI  R26,2
0000f4 27bb      	CLR  R27
                 __CLEAR_REG:
0000f5 93ed      	ST   X+,R30
0000f6 958a      	DEC  R24
0000f7 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000f8 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000f9 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000fa e0a0      	LDI  R26,LOW(__SRAM_START)
0000fb e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
0000fc 93ed      	ST   X+,R30
0000fd 9701      	SBIW R24,1
0000fe f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000ff eaee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000100 e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000101 9185      	LPM  R24,Z+
000102 9195      	LPM  R25,Z+
000103 9700      	SBIW R24,0
000104 f061      	BREQ __GLOBAL_INI_END
000105 91a5      	LPM  R26,Z+
000106 91b5      	LPM  R27,Z+
000107 9005      	LPM  R0,Z+
000108 9015      	LPM  R1,Z+
000109 01bf      	MOVW R22,R30
00010a 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00010b 9005      	LPM  R0,Z+
00010c 920d      	ST   X+,R0
00010d 9701      	SBIW R24,1
00010e f7e1      	BRNE __GLOBAL_INI_LOOP
00010f 01fb      	MOVW R30,R22
000110 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
000111 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000112 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000113 bfed      	OUT  SPL,R30
000114 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000115 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000116 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000117 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000118 940c 05e9 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;/*****************************************************
                 ;This program was produced by the JJH, KYY and Johnadan
                 ;CodeWizardAVR V2.05.0 Professional
                 ;Automatic Program Generator
                 ;ï¿½ Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project : 2018 ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ç° 12ï¿½ï¿½ - S.P.A glove
                 ;Version : 2.1.0
                 ;Date    : 2018-05-03
                 ;Author  : JJH
                 ;Company : Chungnam National University
                 ;Comments: Holy Fucking Shit...
                 ;
                 ;
                 ;Chip type               : Atmega128
                 ;AVR Core Clock frequency: 16.000000 MHz
                 ;*****************************************************/
                 ;
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;
                 ;// Alphanumeric LCD Module functions
                 ;#include <lcd.h>
                 ;#asm
                  .equ __lcd_port = 0x12 //PORTD 8
                 ; 0000 001C #endasm
                 ;// About ADC
                 ;#define ADC_VREF_TYPE 0x60
                 ;#define NUM_SAMP  50  //MUST be Under 255
                 ;//About Switch
                 ;#define Left_switch_on    (!PINE.3)
                 ;#define Middle_switch_on  (!PINE.2)
                 ;#define Right_switch_on   (!PINE.1)
                 ;#define Left_switch_off   (PINE.3)
                 ;#define Middle_switch_off (PINE.2)
                 ;#define Right_switch_off  (PINE.1)
                 ;//About order
                 ;#define Up_thumb          (!PINE.5)
                 ;#define Down_thumb        (!PINA.1)
                 ;#define Up_index          (!PINA.2)
                 ;#define Down_index        (!PINA.3)
                 ;#define Up_middle         (!PINA.4)
                 ;#define Down_middle       (!PINA.5)
                 ;#define Up_rest           (!PINA.6)
                 ;#define Down_rest         (!PINA.7)
                 ;
                 ;#define NO_SIGNAL_tu      (PINE.5)
                 ;#define NO_SIGNAL_td      (PINA.1)
                 ;#define NO_SIGNAL_iu      (PINA.2)
                 ;#define NO_SIGNAL_id      (PINA.3)
                 ;#define NO_SIGNAL_mu      (PINA.4)
                 ;#define NO_SIGNAL_md      (PINA.5)
                 ;#define NO_SIGNAL_ru      (PINA.6)
                 ;#define NO_SIGNAL_rd      (PINA.7)
                 ;
                 ;//About u saturation
                 ;#define UPPER   3790
                 ;#define LOWER   1250
                 ;//About RUN
                 ;#define NORMAL_SPEED  500 //Only relates to reaction speed...
                 ;#define INITIATE  TIMSK = 0x14, ETIMSK = 0x14   //TIM1_COMPA interrupt on, TIM1_OVF interrupt on (Inlet Valve control)
                 ;                                                //TIM3_COMPA interrupt on, TIM3_OVF interrupt on (Outlet Valve control)
                 ;
                 ;#define TERMINATE TIMSK = 0x00, ETIMSK = 0x00   //TIM1_COMPA interrupt off, TIM1_OVF interrupt off (Inlet Valve control)
                 ;                                                //TIM3_COMPA interrupt off, TIM3_OVF interrupt off (Outlet Valve control)
                 ;//*****************************************************************************************************************
                 ;// ****** Declare your global variables here  ******
                 ;unsigned char sam_num = 0; // counting variable for ADC interrupt
                 ;int i,j,k;
                 ;//*****************************************************************************************************************
                 ;// LCD
                 ;unsigned char lcd_data[40];
                 ;//*****************************************************************************************************************
                 ;// ADC
                 ;//unsigned char adc_data[4][100] = {0};
                 ;unsigned char mux = 0;
                 ;//unsigned char NUM_SAMP = 50;
                 ;unsigned char d_flag = 0;
                 ;
                 ;// * Pressure
                 ;unsigned char pressure_data[4][NUM_SAMP] = {0};
                 ;unsigned int  pressure_sum[4] = {0};
                 ;unsigned char pressure_mean[4] = {0};
                 ;
                 ;// * Flex
                 ;unsigned char flex_data[4][NUM_SAMP] = {0};
                 ;unsigned int  flex_sum[4] = {0};
                 ;unsigned char flex_mean[4] = {0};
                 ;
                 ;//tuning
                 ;unsigned char flex_max[4] = {0};
                 ;unsigned char flex_min[4] = {255, 255, 255, 255};
                 
                 	.DSEG
                 ;unsigned char pressure_max[4] = {0};
                 ;unsigned char pressure_min[4] = {255, 255, 255, 255};
                 ;
                 ;// Moving
                 ;unsigned char E_flag[4]={0}; //EXTENSION : 1
                 ;unsigned char F_flag[4]={0}; //FLEXTION : 1
                 ;unsigned char Global_Sequence=0;
                 ;
                 ;// PID
                 ;double kp=0.0001;
                 ;double ki=0.0000;
                 ;double kd=0.0000;
                 ;double error_old[4]={0};
                 ;double error_sum[4]={0};
                 ;unsigned char ang_desired=0;
                 ;unsigned char ang_old[4]={0};//Initial angle : 0 degrees
                 ;unsigned char delta_ang=10;//10 degrees per each sequence(EXPERIMENT NEED!)
                 ;unsigned const char Ts=60; //Control sequence term in [ms]
                 ;//*****************************************************************************************************************
                 ;// Timer 1 Controls INLET!!
                 ;// Timer1 output compare A interrupt service routine
                 ;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
                 ; 0000 0075 {
                 
                 	.CSEG
                 _timer1_compa_isr:
00011a 940e 0994 	CALL SUBOPT_0x0
                 ; 0000 0076   PORTC |= 0x01<<Global_Sequence;//INLET Valve on
00011c e0a1      	LDI  R26,LOW(1)
00011d c004      	RJMP _0xE7
                 ; 0000 0077 }
                 ;// Timer1 overflow A interrupt service routine
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 007A {
                 _timer1_ovf_isr:
00011e c00e      	RJMP _0xE6
                 ; 0000 007B   PORTC=0x00;//INLET Valve off
                 ; 0000 007C }
                 ;// Timer 3 Controls OUTLET!!
                 ;// Timer3 comparematch A interrupt service routine
                 ;interrupt [TIM3_COMPA] void timer3_compa_isr(void)
                 ; 0000 0080 {
                 _timer3_compa_isr:
00011f 940e 0994 	CALL SUBOPT_0x0
                 ; 0000 0081   PORTC |= 0x10<<Global_Sequence;//OUTLET Valve on
000121 e1a0      	LDI  R26,LOW(16)
                 _0xE7:
000122 940e 0b7a 	CALL __LSLB12
000124 29e1      	OR   R30,R1
000125 bbe5      	OUT  0x15,R30
                 ; 0000 0082 }
000126 91e9      	LD   R30,Y+
000127 bfef      	OUT  SREG,R30
000128 91e9      	LD   R30,Y+
000129 91a9      	LD   R26,Y+
00012a 9019      	LD   R1,Y+
00012b 9009      	LD   R0,Y+
00012c 9518      	RETI
                 ;// Timer1 output compare A interrupt service routine
                 ;interrupt [TIM3_OVF] void timer3_ovf_isr(void)
                 ; 0000 0085 {
                 _timer3_ovf_isr:
                 _0xE6:
00012d 93ea      	ST   -Y,R30
                 ; 0000 0086   PORTC=0x00;//OUTLET Valve off
00012e e0e0      	LDI  R30,LOW(0)
00012f bbe5      	OUT  0x15,R30
                 ; 0000 0087 }
000130 91e9      	LD   R30,Y+
000131 9518      	RETI
                 ;// ********************************* ADC interrupt service routine ************************************************
                 ;interrupt [ADC_INT] void adc_isr(void)
                 ; 0000 008A {
                 _adc_isr:
000132 920a      	ST   -Y,R0
000133 921a      	ST   -Y,R1
000134 93aa      	ST   -Y,R26
000135 93ba      	ST   -Y,R27
000136 93ea      	ST   -Y,R30
000137 93fa      	ST   -Y,R31
000138 b7ef      	IN   R30,SREG
000139 93ea      	ST   -Y,R30
                 ; 0000 008B     // Read the AD conversion result
                 ; 0000 008C     //for (h = 0; h<=6; h++);
                 ; 0000 008D     if(mux>4)           flex_data[mux-4][sam_num] = ADCH;   // 4, 5, 6, 7
00013a 91a0 052b 	LDS  R26,_mux
00013c 30a5      	CPI  R26,LOW(0x5)
00013d f058      	BRLO _0x7
00013e 91e0 052b 	LDS  R30,_mux
000140 e0f0      	LDI  R31,0
000141 9734      	SBIW R30,4
000142 e3a2      	LDI  R26,LOW(50)
000143 e0b0      	LDI  R27,HIGH(50)
000144 940e 0ba1 	CALL __MULW12U
000146 5fef      	SUBI R30,LOW(-_flex_data)
000147 4ff9      	SBCI R31,HIGH(-_flex_data)
000148 c007      	RJMP _0xE3
                 ; 0000 008E     else                pressure_data[mux][sam_num] = ADCH;     // 0, 1, 2, 3
                 _0x7:
000149 91e0 052b 	LDS  R30,_mux
00014b e3a2      	LDI  R26,LOW(50)
00014c 9fea      	MUL  R30,R26
00014d 01f0      	MOVW R30,R0
00014e 5de3      	SUBI R30,LOW(-_pressure_data)
00014f 4ffa      	SBCI R31,HIGH(-_pressure_data)
                 _0xE3:
000150 01df      	MOVW R26,R30
000151 91e0 0500 	LDS  R30,_sam_num
000153 e0f0      	LDI  R31,0
000154 0fae      	ADD  R26,R30
000155 1fbf      	ADC  R27,R31
000156 b1e5      	IN   R30,0x5
000157 93ec      	ST   X,R30
                 ; 0000 008F     //ADC sampling
                 ; 0000 0090     if(sam_num == NUM_SAMP)
000158 91a0 0500 	LDS  R26,_sam_num
00015a 33a2      	CPI  R26,LOW(0x32)
00015b f459      	BRNE _0x9
                 ; 0000 0091     {
                 ; 0000 0092         mux++;
00015c 91e0 052b 	LDS  R30,_mux
00015e 5fef      	SUBI R30,-LOW(1)
00015f 93e0 052b 	STS  _mux,R30
                 ; 0000 0093         sam_num=0;
000161 e0e0      	LDI  R30,LOW(0)
000162 93e0 0500 	STS  _sam_num,R30
                 ; 0000 0094         d_flag=1;
000164 e0e1      	LDI  R30,LOW(1)
000165 93e0 052c 	STS  _d_flag,R30
                 ; 0000 0095     }
                 ; 0000 0096 
                 ; 0000 0097     mux &= 0x07;  //mux : 0~7
                 _0x9:
000167 91e0 052b 	LDS  R30,_mux
000169 70e7      	ANDI R30,LOW(0x7)
00016a 93e0 052b 	STS  _mux,R30
                 ; 0000 0098     ADMUX = mux | 0x60;
00016c 66e0      	ORI  R30,LOW(0x60)
00016d b9e7      	OUT  0x7,R30
                 ; 0000 0099     ADCSRA |= 0x40;
00016e 9a36      	SBI  0x6,6
                 ; 0000 009A     sam_num++;
00016f 91e0 0500 	LDS  R30,_sam_num
000171 5fef      	SUBI R30,-LOW(1)
000172 93e0 0500 	STS  _sam_num,R30
                 ; 0000 009B }
000174 91e9      	LD   R30,Y+
000175 bfef      	OUT  SREG,R30
000176 91f9      	LD   R31,Y+
000177 91e9      	LD   R30,Y+
000178 91b9      	LD   R27,Y+
000179 91a9      	LD   R26,Y+
00017a 9019      	LD   R1,Y+
00017b 9009      	LD   R0,Y+
00017c 9518      	RETI
                 ;
                 ;// ******************************** About Pressure Sensor *******************************************************
                 ;void mean_pressure(unsigned char sequence, unsigned char tunned)
                 ; 0000 009F {
                 _mean_pressure:
                 ; 0000 00A0     unsigned char num = 0; // counting variable for function
                 ; 0000 00A1     while(!d_flag);
00017d 931a      	ST   -Y,R17
                 ;	sequence -> Y+2
                 ;	tunned -> Y+1
                 ;	num -> R17
00017e e010      	LDI  R17,0
                 _0xA:
00017f 91e0 052c 	LDS  R30,_d_flag
000181 30e0      	CPI  R30,0
000182 f3e1      	BREQ _0xA
                 ; 0000 00A2     for(num = 0; num < NUM_SAMP; num++)
000183 e010      	LDI  R17,LOW(0)
                 _0xE:
000184 3312      	CPI  R17,50
000185 f450      	BRSH _0xF
                 ; 0000 00A3         pressure_sum[sequence] += pressure_data[sequence][num];
000186 940e 099e 	CALL SUBOPT_0x1
000188 940e 09a5 	CALL SUBOPT_0x2
00018a 5de3      	SUBI R30,LOW(-_pressure_data)
00018b 4ffa      	SBCI R31,HIGH(-_pressure_data)
00018c 940e 09af 	CALL SUBOPT_0x3
00018e 5f1f      	SUBI R17,-1
00018f cff4      	RJMP _0xE
                 _0xF:
                 ; 0000 00A4 pressure_mean[sequence] = pressure_sum[sequence]/50  ;
000190 940e 09bb 	CALL SUBOPT_0x4
000192 50e3      	SUBI R30,LOW(-_pressure_mean)
000193 4ffa      	SBCI R31,HIGH(-_pressure_mean)
000194 01bf      	MOVW R22,R30
000195 940e 099e 	CALL SUBOPT_0x1
000197 940e 09be 	CALL SUBOPT_0x5
                 ; 0000 00A5     pressure_sum[sequence] = 0;
000199 940e 099e 	CALL SUBOPT_0x1
00019b 940e 09ca 	CALL SUBOPT_0x6
                 ; 0000 00A6     d_flag=0;
                 ; 0000 00A7 
                 ; 0000 00A8     if(tunned)
00019d f0f1      	BREQ _0x10
                 ; 0000 00A9     {
                 ; 0000 00AA       if(pressure_mean[sequence]>pressure_max[sequence])  pressure_mean[sequence]=pressure_max[sequence];
00019e 940e 09bb 	CALL SUBOPT_0x4
0001a0 940e 09d5 	CALL SUBOPT_0x7
0001a2 52e3      	SUBI R30,LOW(-_pressure_max)
0001a3 4ff9      	SBCI R31,HIGH(-_pressure_max)
0001a4 81e0      	LD   R30,Z
0001a5 17ea      	CP   R30,R26
0001a6 f430      	BRSH _0x11
0001a7 940e 09db 	CALL SUBOPT_0x8
0001a9 52e3      	SUBI R30,LOW(-_pressure_max)
0001aa 4ff9      	SBCI R31,HIGH(-_pressure_max)
0001ab 81e0      	LD   R30,Z
0001ac 93ec      	ST   X,R30
                 ; 0000 00AB       if(pressure_mean[sequence]<pressure_min[sequence])  pressure_mean[sequence]=pressure_min[sequence];
                 _0x11:
0001ad 940e 09bb 	CALL SUBOPT_0x4
0001af 940e 09d5 	CALL SUBOPT_0x7
0001b1 51ef      	SUBI R30,LOW(-_pressure_min)
0001b2 4ff9      	SBCI R31,HIGH(-_pressure_min)
0001b3 81e0      	LD   R30,Z
0001b4 17ae      	CP   R26,R30
0001b5 f430      	BRSH _0x12
0001b6 940e 09db 	CALL SUBOPT_0x8
0001b8 51ef      	SUBI R30,LOW(-_pressure_min)
0001b9 4ff9      	SBCI R31,HIGH(-_pressure_min)
0001ba 81e0      	LD   R30,Z
0001bb 93ec      	ST   X,R30
                 ; 0000 00AC     }
                 _0x12:
                 ; 0000 00AD }
                 _0x10:
0001bc c0af      	RJMP _0x2080008
                 ;//Pressure test
                 ;void pressure_test(void)
                 ; 0000 00B0 {
                 _pressure_test:
                 ; 0000 00B1     unsigned char num = 0;
                 ; 0000 00B2     delay_ms(50);
0001bd 940e 09e0 	CALL SUBOPT_0x9
                 ;	num -> R17
                 ; 0000 00B3 
                 ; 0000 00B4     while(Middle_switch_off)
                 _0x13:
0001bf 9b0a      	SBIS 0x1,2
0001c0 c01d      	RJMP _0x15
                 ; 0000 00B5     {
                 ; 0000 00B6         lcd_clear();
0001c1 940e 09e8 	CALL SUBOPT_0xA
                 ; 0000 00B7         lcd_gotoxy(0, 0);
                 ; 0000 00B8         lcd_putsf("Testing");
0001c3 940e 09ef 	CALL SUBOPT_0xB
                 ; 0000 00B9 
                 ; 0000 00BA         if(Left_switch_on)  num++;
0001c5 9b0b      	SBIS 0x1,3
0001c6 5f1f      	SUBI R17,-1
                 ; 0000 00BB         if(Right_switch_on) num--;
0001c7 9b09      	SBIS 0x1,1
0001c8 5011      	SUBI R17,1
                 ; 0000 00BC         if(num>3) num=3;
0001c9 3014      	CPI  R17,4
0001ca f008      	BRLO _0x18
0001cb e013      	LDI  R17,LOW(3)
                 ; 0000 00BD         mean_pressure((unsigned char)num,0);
                 _0x18:
0001cc 931a      	ST   -Y,R17
0001cd e0e0      	LDI  R30,LOW(0)
0001ce 93ea      	ST   -Y,R30
0001cf dfad      	RCALL _mean_pressure
                 ; 0000 00BE 
                 ; 0000 00BF         lcd_gotoxy(0, 1);
0001d0 940e 09f5 	CALL SUBOPT_0xC
                 ; 0000 00C0         sprintf(lcd_data, "%d", num);
0001d2 940e 0a05 	CALL SUBOPT_0xD
                 ; 0000 00C1         lcd_puts(lcd_data);
                 ; 0000 00C2         lcd_gotoxy(4, 1);
0001d4 940e 0a14 	CALL SUBOPT_0xE
                 ; 0000 00C3         sprintf(lcd_data, "%d", pressure_mean[num]);
0001d6 50e3      	SUBI R30,LOW(-_pressure_mean)
0001d7 4ffa      	SBCI R31,HIGH(-_pressure_mean)
0001d8 81e0      	LD   R30,Z
0001d9 940e 0a05 	CALL SUBOPT_0xD
                 ; 0000 00C4         lcd_puts(lcd_data);
                 ; 0000 00C5 
                 ; 0000 00C6         delay_ms(200);
0001db 940e 0a25 	CALL SUBOPT_0xF
                 ; 0000 00C7     }
0001dd cfe1      	RJMP _0x13
                 _0x15:
                 ; 0000 00C8 }
0001de c25c      	RJMP _0x2080006
                 ;
                 ;// Pressure tuning
                 ;void pressure_tuning(void)
                 ; 0000 00CC {
                 _pressure_tuning:
                 ; 0000 00CD     unsigned char num = 0;
                 ; 0000 00CE     delay_ms(50);
0001df 940e 09e0 	CALL SUBOPT_0x9
                 ;	num -> R17
                 ; 0000 00CF 
                 ; 0000 00D0     while(Middle_switch_off)
                 _0x19:
0001e1 9b0a      	SBIS 0x1,2
0001e2 c049      	RJMP _0x1B
                 ; 0000 00D1     {
                 ; 0000 00D2         lcd_clear();
0001e3 940e 09e8 	CALL SUBOPT_0xA
                 ; 0000 00D3         lcd_gotoxy(0, 0);
                 ; 0000 00D4         lcd_putsf("Tunning");
0001e5 940e 0a2b 	CALL SUBOPT_0x10
                 ; 0000 00D5 
                 ; 0000 00D6         if(Left_switch_on)  num++;
0001e7 9b0b      	SBIS 0x1,3
0001e8 5f1f      	SUBI R17,-1
                 ; 0000 00D7         if(Right_switch_on) num--;
0001e9 9b09      	SBIS 0x1,1
0001ea 5011      	SUBI R17,1
                 ; 0000 00D8         if(num>3) num=3;
0001eb 3014      	CPI  R17,4
0001ec f008      	BRLO _0x1E
0001ed e013      	LDI  R17,LOW(3)
                 ; 0000 00D9 
                 ; 0000 00DA         mean_pressure((unsigned char)num,0);
                 _0x1E:
0001ee 931a      	ST   -Y,R17
0001ef e0e0      	LDI  R30,LOW(0)
0001f0 93ea      	ST   -Y,R30
0001f1 df8b      	RCALL _mean_pressure
                 ; 0000 00DB 
                 ; 0000 00DC         if(pressure_mean[num]>pressure_max[num])  pressure_max[num]=pressure_mean[num];
0001f2 940e 0a31 	CALL SUBOPT_0x11
0001f4 940e 09d5 	CALL SUBOPT_0x7
0001f6 52e3      	SUBI R30,LOW(-_pressure_max)
0001f7 4ff9      	SBCI R31,HIGH(-_pressure_max)
0001f8 81e0      	LD   R30,Z
0001f9 17ea      	CP   R30,R26
0001fa f450      	BRSH _0x1F
0001fb 940e 0a34 	CALL SUBOPT_0x12
0001fd 52a3      	SUBI R26,LOW(-_pressure_max)
0001fe 4fb9      	SBCI R27,HIGH(-_pressure_max)
0001ff 940e 0a31 	CALL SUBOPT_0x11
000201 50e3      	SUBI R30,LOW(-_pressure_mean)
000202 4ffa      	SBCI R31,HIGH(-_pressure_mean)
000203 81e0      	LD   R30,Z
000204 93ec      	ST   X,R30
                 ; 0000 00DD         if(pressure_mean[num]<pressure_min[num])  pressure_min[num]=pressure_mean[num];
                 _0x1F:
000205 940e 0a31 	CALL SUBOPT_0x11
000207 940e 09d5 	CALL SUBOPT_0x7
000209 51ef      	SUBI R30,LOW(-_pressure_min)
00020a 4ff9      	SBCI R31,HIGH(-_pressure_min)
00020b 81e0      	LD   R30,Z
00020c 17ae      	CP   R26,R30
00020d f450      	BRSH _0x20
00020e 940e 0a34 	CALL SUBOPT_0x12
000210 51af      	SUBI R26,LOW(-_pressure_min)
000211 4fb9      	SBCI R27,HIGH(-_pressure_min)
000212 940e 0a31 	CALL SUBOPT_0x11
000214 50e3      	SUBI R30,LOW(-_pressure_mean)
000215 4ffa      	SBCI R31,HIGH(-_pressure_mean)
000216 81e0      	LD   R30,Z
000217 93ec      	ST   X,R30
                 ; 0000 00DE 
                 ; 0000 00DF         lcd_gotoxy(7, 0);
                 _0x20:
000218 940e 0a37 	CALL SUBOPT_0x13
                 ; 0000 00E0         sprintf(lcd_data, "%d", num);
                 ; 0000 00E1         lcd_puts(lcd_data);
                 ; 0000 00E2         lcd_gotoxy(0, 1);
00021a 940e 09f5 	CALL SUBOPT_0xC
                 ; 0000 00E3         sprintf(lcd_data, "%d", pressure_min[num]);
00021c e0f0      	LDI  R31,0
00021d 51ef      	SUBI R30,LOW(-_pressure_min)
00021e 4ff9      	SBCI R31,HIGH(-_pressure_min)
00021f 81e0      	LD   R30,Z
000220 940e 0a05 	CALL SUBOPT_0xD
                 ; 0000 00E4         lcd_puts(lcd_data);
                 ; 0000 00E5         lcd_gotoxy(4, 1);
000222 940e 0a14 	CALL SUBOPT_0xE
                 ; 0000 00E6         sprintf(lcd_data, "%d", pressure_max[num]);
000224 52e3      	SUBI R30,LOW(-_pressure_max)
000225 4ff9      	SBCI R31,HIGH(-_pressure_max)
000226 81e0      	LD   R30,Z
000227 940e 0a05 	CALL SUBOPT_0xD
                 ; 0000 00E7         lcd_puts(lcd_data);
                 ; 0000 00E8         delay_ms(100);
000229 940e 0a47 	CALL SUBOPT_0x14
                 ; 0000 00E9     }
00022b cfb5      	RJMP _0x19
                 _0x1B:
                 ; 0000 00EA }
00022c c20e      	RJMP _0x2080006
                 ;
                 ;// ******************************** About Flex Sensor *******************************************************
                 ;void mean_flex(unsigned char sequence, unsigned char tunned)
                 ; 0000 00EE {
                 _mean_flex:
                 ; 0000 00EF     unsigned char num = 0; // counting variable for function
                 ; 0000 00F0     while(!d_flag);
00022d 931a      	ST   -Y,R17
                 ;	sequence -> Y+2
                 ;	tunned -> Y+1
                 ;	num -> R17
00022e e010      	LDI  R17,0
                 _0x21:
00022f 91e0 052c 	LDS  R30,_d_flag
000231 30e0      	CPI  R30,0
000232 f3e1      	BREQ _0x21
                 ; 0000 00F1     for(num = 0; num < NUM_SAMP; num++)
000233 e010      	LDI  R17,LOW(0)
                 _0x25:
000234 3312      	CPI  R17,50
000235 f450      	BRSH _0x26
                 ; 0000 00F2         flex_sum[sequence] += flex_data[sequence][num];
000236 940e 0a4d 	CALL SUBOPT_0x15
000238 940e 09a5 	CALL SUBOPT_0x2
00023a 5fef      	SUBI R30,LOW(-_flex_data)
00023b 4ff9      	SBCI R31,HIGH(-_flex_data)
00023c 940e 09af 	CALL SUBOPT_0x3
00023e 5f1f      	SUBI R17,-1
00023f cff4      	RJMP _0x25
                 _0x26:
                 ; 0000 00F3 flex_mean[sequence] = flex_sum[sequence]/50  ;
000240 940e 09bb 	CALL SUBOPT_0x4
000242 52ef      	SUBI R30,LOW(-_flex_mean)
000243 4ff9      	SBCI R31,HIGH(-_flex_mean)
000244 01bf      	MOVW R22,R30
000245 940e 0a4d 	CALL SUBOPT_0x15
000247 940e 09be 	CALL SUBOPT_0x5
                 ; 0000 00F4     flex_sum[sequence] = 0;
000249 940e 0a4d 	CALL SUBOPT_0x15
00024b 940e 09ca 	CALL SUBOPT_0x6
                 ; 0000 00F5     d_flag=0;
                 ; 0000 00F6     if(tunned)
00024d f0f1      	BREQ _0x27
                 ; 0000 00F7     {
                 ; 0000 00F8       if(flex_mean[sequence]>flex_max[sequence])  flex_mean[sequence]=flex_max[sequence];
00024e 940e 09bb 	CALL SUBOPT_0x4
000250 940e 0a54 	CALL SUBOPT_0x16
000252 52eb      	SUBI R30,LOW(-_flex_max)
000253 4ff9      	SBCI R31,HIGH(-_flex_max)
000254 81e0      	LD   R30,Z
000255 17ea      	CP   R30,R26
000256 f430      	BRSH _0x28
000257 940e 0a5a 	CALL SUBOPT_0x17
000259 52eb      	SUBI R30,LOW(-_flex_max)
00025a 4ff9      	SBCI R31,HIGH(-_flex_max)
00025b 81e0      	LD   R30,Z
00025c 93ec      	ST   X,R30
                 ; 0000 00F9       if(flex_mean[sequence]<flex_min[sequence])  flex_mean[sequence]=flex_min[sequence];
                 _0x28:
00025d 940e 09bb 	CALL SUBOPT_0x4
00025f 940e 0a54 	CALL SUBOPT_0x16
000261 52e7      	SUBI R30,LOW(-_flex_min)
000262 4ff9      	SBCI R31,HIGH(-_flex_min)
000263 81e0      	LD   R30,Z
000264 17ae      	CP   R26,R30
000265 f430      	BRSH _0x29
000266 940e 0a5a 	CALL SUBOPT_0x17
000268 52e7      	SUBI R30,LOW(-_flex_min)
000269 4ff9      	SBCI R31,HIGH(-_flex_min)
00026a 81e0      	LD   R30,Z
00026b 93ec      	ST   X,R30
                 ; 0000 00FA     }
                 _0x29:
                 ; 0000 00FB }
                 _0x27:
                 _0x2080008:
00026c 8118      	LDD  R17,Y+0
00026d 9623      	ADIW R28,3
00026e 9508      	RET
                 ;//Pressure test
                 ;void flex_test(void)
                 ; 0000 00FE {
                 _flex_test:
                 ; 0000 00FF     unsigned char num = 0;
                 ; 0000 0100     delay_ms(50);
00026f 940e 09e0 	CALL SUBOPT_0x9
                 ;	num -> R17
                 ; 0000 0101 
                 ; 0000 0102     while(Middle_switch_off)
                 _0x2A:
000271 9b0a      	SBIS 0x1,2
000272 c01d      	RJMP _0x2C
                 ; 0000 0103     {
                 ; 0000 0104         lcd_clear();
000273 940e 09e8 	CALL SUBOPT_0xA
                 ; 0000 0105         lcd_gotoxy(0, 0);
                 ; 0000 0106         lcd_putsf("Testing");
000275 940e 09ef 	CALL SUBOPT_0xB
                 ; 0000 0107 
                 ; 0000 0108         if(Left_switch_on)  num++;
000277 9b0b      	SBIS 0x1,3
000278 5f1f      	SUBI R17,-1
                 ; 0000 0109         if(Right_switch_on) num--;
000279 9b09      	SBIS 0x1,1
00027a 5011      	SUBI R17,1
                 ; 0000 010A         if(num>3) num=3;
00027b 3014      	CPI  R17,4
00027c f008      	BRLO _0x2F
00027d e013      	LDI  R17,LOW(3)
                 ; 0000 010B         mean_flex((unsigned char)num,0);
                 _0x2F:
00027e 931a      	ST   -Y,R17
00027f e0e0      	LDI  R30,LOW(0)
000280 93ea      	ST   -Y,R30
000281 dfab      	RCALL _mean_flex
                 ; 0000 010C 
                 ; 0000 010D         lcd_gotoxy(0, 1);
000282 940e 09f5 	CALL SUBOPT_0xC
                 ; 0000 010E         sprintf(lcd_data, "%d", num);
000284 940e 0a05 	CALL SUBOPT_0xD
                 ; 0000 010F         lcd_puts(lcd_data);
                 ; 0000 0110         lcd_gotoxy(4, 1);
000286 940e 0a14 	CALL SUBOPT_0xE
                 ; 0000 0111         sprintf(lcd_data, "%d", flex_mean[num]);
000288 52ef      	SUBI R30,LOW(-_flex_mean)
000289 4ff9      	SBCI R31,HIGH(-_flex_mean)
00028a 81e0      	LD   R30,Z
00028b 940e 0a05 	CALL SUBOPT_0xD
                 ; 0000 0112         lcd_puts(lcd_data);
                 ; 0000 0113 
                 ; 0000 0114         delay_ms(200);
00028d 940e 0a25 	CALL SUBOPT_0xF
                 ; 0000 0115     }
00028f cfe1      	RJMP _0x2A
                 _0x2C:
                 ; 0000 0116 }
000290 c1aa      	RJMP _0x2080006
                 ;
                 ;// flex tuning
                 ;void flex_tuning(void)
                 ; 0000 011A {
                 _flex_tuning:
                 ; 0000 011B     unsigned char num = 0;
                 ; 0000 011C     delay_ms(50);
000291 940e 09e0 	CALL SUBOPT_0x9
                 ;	num -> R17
                 ; 0000 011D 
                 ; 0000 011E     while(Middle_switch_off)
                 _0x30:
000293 9b0a      	SBIS 0x1,2
000294 c049      	RJMP _0x32
                 ; 0000 011F     {
                 ; 0000 0120         lcd_clear();
000295 940e 09e8 	CALL SUBOPT_0xA
                 ; 0000 0121         lcd_gotoxy(0, 0);
                 ; 0000 0122         lcd_putsf("Tunning");
000297 940e 0a2b 	CALL SUBOPT_0x10
                 ; 0000 0123 
                 ; 0000 0124         if(Left_switch_on)  num++;
000299 9b0b      	SBIS 0x1,3
00029a 5f1f      	SUBI R17,-1
                 ; 0000 0125         if(Right_switch_on) num--;
00029b 9b09      	SBIS 0x1,1
00029c 5011      	SUBI R17,1
                 ; 0000 0126         if(num>3) num=3;
00029d 3014      	CPI  R17,4
00029e f008      	BRLO _0x35
00029f e013      	LDI  R17,LOW(3)
                 ; 0000 0127         mean_flex((unsigned char)num,0);
                 _0x35:
0002a0 931a      	ST   -Y,R17
0002a1 e0e0      	LDI  R30,LOW(0)
0002a2 93ea      	ST   -Y,R30
0002a3 df89      	RCALL _mean_flex
                 ; 0000 0128 
                 ; 0000 0129         if(flex_mean[num]>flex_max[num])  flex_max[num]=flex_mean[num];
0002a4 940e 0a31 	CALL SUBOPT_0x11
0002a6 940e 0a54 	CALL SUBOPT_0x16
0002a8 52eb      	SUBI R30,LOW(-_flex_max)
0002a9 4ff9      	SBCI R31,HIGH(-_flex_max)
0002aa 81e0      	LD   R30,Z
0002ab 17ea      	CP   R30,R26
0002ac f450      	BRSH _0x36
0002ad 940e 0a34 	CALL SUBOPT_0x12
0002af 52ab      	SUBI R26,LOW(-_flex_max)
0002b0 4fb9      	SBCI R27,HIGH(-_flex_max)
0002b1 940e 0a31 	CALL SUBOPT_0x11
0002b3 52ef      	SUBI R30,LOW(-_flex_mean)
0002b4 4ff9      	SBCI R31,HIGH(-_flex_mean)
0002b5 81e0      	LD   R30,Z
0002b6 93ec      	ST   X,R30
                 ; 0000 012A         if(flex_mean[num]<flex_min[num])  flex_min[num]=flex_mean[num];
                 _0x36:
0002b7 940e 0a31 	CALL SUBOPT_0x11
0002b9 940e 0a54 	CALL SUBOPT_0x16
0002bb 52e7      	SUBI R30,LOW(-_flex_min)
0002bc 4ff9      	SBCI R31,HIGH(-_flex_min)
0002bd 81e0      	LD   R30,Z
0002be 17ae      	CP   R26,R30
0002bf f450      	BRSH _0x37
0002c0 940e 0a34 	CALL SUBOPT_0x12
0002c2 52a7      	SUBI R26,LOW(-_flex_min)
0002c3 4fb9      	SBCI R27,HIGH(-_flex_min)
0002c4 940e 0a31 	CALL SUBOPT_0x11
0002c6 52ef      	SUBI R30,LOW(-_flex_mean)
0002c7 4ff9      	SBCI R31,HIGH(-_flex_mean)
0002c8 81e0      	LD   R30,Z
0002c9 93ec      	ST   X,R30
                 ; 0000 012B 
                 ; 0000 012C         lcd_gotoxy(7, 0);
                 _0x37:
0002ca 940e 0a37 	CALL SUBOPT_0x13
                 ; 0000 012D         sprintf(lcd_data, "%d", num);
                 ; 0000 012E         lcd_puts(lcd_data);
                 ; 0000 012F         lcd_gotoxy(0, 1);
0002cc 940e 09f5 	CALL SUBOPT_0xC
                 ; 0000 0130         sprintf(lcd_data, "%d", flex_min[num]);
0002ce e0f0      	LDI  R31,0
0002cf 52e7      	SUBI R30,LOW(-_flex_min)
0002d0 4ff9      	SBCI R31,HIGH(-_flex_min)
0002d1 81e0      	LD   R30,Z
0002d2 940e 0a05 	CALL SUBOPT_0xD
                 ; 0000 0131         lcd_puts(lcd_data);
                 ; 0000 0132         lcd_gotoxy(4, 1);
0002d4 940e 0a14 	CALL SUBOPT_0xE
                 ; 0000 0133         sprintf(lcd_data, "%d", flex_max[num]);
0002d6 52eb      	SUBI R30,LOW(-_flex_max)
0002d7 4ff9      	SBCI R31,HIGH(-_flex_max)
0002d8 81e0      	LD   R30,Z
0002d9 940e 0a05 	CALL SUBOPT_0xD
                 ; 0000 0134         lcd_puts(lcd_data);
                 ; 0000 0135 
                 ; 0000 0136         delay_ms(100);
0002db 940e 0a47 	CALL SUBOPT_0x14
                 ; 0000 0137     }
0002dd cfb5      	RJMP _0x30
                 _0x32:
                 ; 0000 0138 }
0002de c15c      	RJMP _0x2080006
                 ;
                 ;// ******************************** About PWM control *******************************************************
                 ;void check_pwm(void)
                 ; 0000 013C {
                 _check_pwm:
                 ; 0000 013D     long temp = 50;//PWM interrupt control, 50% duty
                 ; 0000 013E     delay_ms(50);
0002df 9724      	SBIW R28,4
0002e0 e3e2      	LDI  R30,LOW(50)
0002e1 83e8      	ST   Y,R30
0002e2 e0e0      	LDI  R30,LOW(0)
0002e3 83e9      	STD  Y+1,R30
0002e4 83ea      	STD  Y+2,R30
0002e5 83eb      	STD  Y+3,R30
                 ;	temp -> Y+0
0002e6 940e 0a5f 	CALL SUBOPT_0x18
                 ; 0000 013F 
                 ; 0000 0140     INITIATE; //Timer interrupts on
0002e8 940e 0a65 	CALL SUBOPT_0x19
                 ; 0000 0141     ICR1H=0x13;
0002ea 940e 0a6a 	CALL SUBOPT_0x1A
                 ; 0000 0142     ICR1L=0x87;
                 ; 0000 0143     while(Middle_switch_off)
                 _0x38:
0002ec 9b0a      	SBIS 0x1,2
0002ed c051      	RJMP _0x3A
                 ; 0000 0144     {
                 ; 0000 0145         if(Left_switch_on)  temp++;
0002ee 990b      	SBIC 0x1,3
0002ef c008      	RJMP _0x3B
0002f0 940e 0a6f 	CALL SUBOPT_0x1B
                +
0002f2 5fef     +SUBI R30 , LOW ( - 1 )
0002f3 4fff     +SBCI R31 , HIGH ( - 1 )
0002f4 4f6f     +SBCI R22 , BYTE3 ( - 1 )
0002f5 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
0002f6 940e 0a72 	CALL SUBOPT_0x1C
                 ; 0000 0146         if(Right_switch_on)  temp--;
                 _0x3B:
0002f8 9909      	SBIC 0x1,1
0002f9 c007      	RJMP _0x3C
0002fa 940e 0a6f 	CALL SUBOPT_0x1B
0002fc 9731      	SBIW R30,1
0002fd 4060      	SBCI R22,0
0002fe 4070      	SBCI R23,0
0002ff 940e 0a72 	CALL SUBOPT_0x1C
                 ; 0000 0147         if(temp<1) temp=1;
                 _0x3C:
000301 940e 0c14 	CALL __GETD2S0
                +
000303 30a1     +CPI R26 , LOW ( 0x1 )
000304 e0e0     +LDI R30 , HIGH ( 0x1 )
000305 07be     +CPC R27 , R30
000306 e0e0     +LDI R30 , BYTE3 ( 0x1 )
000307 078e     +CPC R24 , R30
000308 e0e0     +LDI R30 , BYTE4 ( 0x1 )
000309 079e     +CPC R25 , R30
                 	__CPD2N 0x1
00030a f434      	BRGE _0x3D
                +
00030b e0e1     +LDI R30 , LOW ( 0x1 )
00030c e0f0     +LDI R31 , HIGH ( 0x1 )
00030d e060     +LDI R22 , BYTE3 ( 0x1 )
00030e e070     +LDI R23 , BYTE4 ( 0x1 )
                 	__GETD1N 0x1
00030f 940e 0a72 	CALL SUBOPT_0x1C
                 ; 0000 0148         if(temp>99)  temp=99;
                 _0x3D:
000311 940e 0c14 	CALL __GETD2S0
                +
000313 36a4     +CPI R26 , LOW ( 0x64 )
000314 e0e0     +LDI R30 , HIGH ( 0x64 )
000315 07be     +CPC R27 , R30
000316 e0e0     +LDI R30 , BYTE3 ( 0x64 )
000317 078e     +CPC R24 , R30
000318 e0e0     +LDI R30 , BYTE4 ( 0x64 )
000319 079e     +CPC R25 , R30
                 	__CPD2N 0x64
00031a f034      	BRLT _0x3E
                +
00031b e6e3     +LDI R30 , LOW ( 0x63 )
00031c e0f0     +LDI R31 , HIGH ( 0x63 )
00031d e060     +LDI R22 , BYTE3 ( 0x63 )
00031e e070     +LDI R23 , BYTE4 ( 0x63 )
                 	__GETD1N 0x63
00031f 940e 0a72 	CALL SUBOPT_0x1C
                 ; 0000 0149         // TEST by LED berfore Valve delivered...
                 ; 0000 014A         OCR1AH = temp*50>>8;
                 _0x3E:
000321 940e 0a6f 	CALL SUBOPT_0x1B
                +
000323 e3a2     +LDI R26 , LOW ( 0x32 )
000324 e0b0     +LDI R27 , HIGH ( 0x32 )
000325 e080     +LDI R24 , BYTE3 ( 0x32 )
000326 e090     +LDI R25 , BYTE4 ( 0x32 )
                 	__GETD2N 0x32
000327 940e 0bce 	CALL __MULD12
000329 01df      	MOVW R26,R30
00032a 01cb      	MOVW R24,R22
00032b e0e8      	LDI  R30,LOW(8)
00032c 940e 0b8b 	CALL __ASRD12
00032e bdeb      	OUT  0x2B,R30
                 ; 0000 014B         OCR1AL = temp*50;
00032f 81e8      	LD   R30,Y
000330 e3a2      	LDI  R26,LOW(50)
000331 02ea      	MULS R30,R26
000332 01f0      	MOVW R30,R0
000333 bdea      	OUT  0x2A,R30
                 ; 0000 014C 
                 ; 0000 014D         lcd_clear();
000334 940e 09e8 	CALL SUBOPT_0xA
                 ; 0000 014E         lcd_gotoxy(0, 0);
                 ; 0000 014F         lcd_putsf("Duty");
000336 940e 0a75 	CALL SUBOPT_0x1D
                 ; 0000 0150         lcd_gotoxy(0, 1);
                 ; 0000 0151         sprintf(lcd_data, "%d %", temp);
                +
000338 81ec     +LDD R30 , Y + 4
000339 81fd     +LDD R31 , Y + 4 + 1
00033a 816e     +LDD R22 , Y + 4 + 2
00033b 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
00033c 940e 0a8a 	CALL SUBOPT_0x1E
                 ; 0000 0152         lcd_puts(lcd_data);
                 ; 0000 0153 
                 ; 0000 0154         delay_ms(100);
                 ; 0000 0155     }
00033e cfad      	RJMP _0x38
                 _0x3A:
                 ; 0000 0156     TERMINATE; //Timer interrupts off
00033f 940e 0a97 	CALL SUBOPT_0x1F
                 ; 0000 0157     PORTC=0x00;
000341 bbe5      	OUT  0x15,R30
                 ; 0000 0158     OCR1AH = 0;
000342 940e 0a9c 	CALL SUBOPT_0x20
                 ; 0000 0159     OCR1AL = 0;//0% duty
                 ; 0000 015A     ICR1H=0x13;
000344 940e 0a6a 	CALL SUBOPT_0x1A
                 ; 0000 015B     ICR1L=0x87;
                 ; 0000 015C }
000346 c08e      	RJMP _0x2080007
                 ;
                 ;// ******************************** About PWM control *******************************************************
                 ;void PUMP_test()
                 ; 0000 0160 {
                 _PUMP_test:
                 ; 0000 0161     int temp = 50;//50% duty
                 ; 0000 0162     delay_ms(50);
000347 931a      	ST   -Y,R17
000348 930a      	ST   -Y,R16
                 ;	temp -> R16,R17
                +
000349 e302     +LDI R16 , LOW ( 50 )
00034a e010     +LDI R17 , HIGH ( 50 )
                 	__GETWRN 16,17,50
00034b 940e 0a5f 	CALL SUBOPT_0x18
                 ; 0000 0163 
                 ; 0000 0164     while(Middle_switch_off)
                 _0x3F:
00034d 9b0a      	SBIS 0x1,2
00034e c025      	RJMP _0x41
                 ; 0000 0165     {
                 ; 0000 0166         if(Left_switch_on)  temp++;
00034f 990b      	SBIC 0x1,3
000350 c002      	RJMP _0x42
                +
000351 5f0f     +SUBI R16 , LOW ( - 1 )
000352 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 0167         if(Right_switch_on)  temp--;
                 _0x42:
000353 9909      	SBIC 0x1,1
000354 c002      	RJMP _0x43
                +
000355 5001     +SUBI R16 , LOW ( 1 )
000356 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
                 ; 0000 0168         if(temp<1) temp=1;
                 _0x43:
                +
000357 3001     +CPI R16 , LOW ( 1 )
000358 e0e0     +LDI R30 , HIGH ( 1 )
000359 071e     +CPC R17 , R30
                 	__CPWRN 16,17,1
00035a f414      	BRGE _0x44
                +
00035b e001     +LDI R16 , LOW ( 1 )
00035c e010     +LDI R17 , HIGH ( 1 )
                 	__GETWRN 16,17,1
                 ; 0000 0169         if(temp>99)  temp=99;
                 _0x44:
                +
00035d 3604     +CPI R16 , LOW ( 100 )
00035e e0e0     +LDI R30 , HIGH ( 100 )
00035f 071e     +CPC R17 , R30
                 	__CPWRN 16,17,100
000360 f014      	BRLT _0x45
                +
000361 e603     +LDI R16 , LOW ( 99 )
000362 e010     +LDI R17 , HIGH ( 99 )
                 	__GETWRN 16,17,99
                 ; 0000 016A         // TEST by LED berfore Valve delivered...
                 ; 0000 016B         OCR1BH = temp*50 >>8;
                 _0x45:
000363 01f8      	MOVW R30,R16
000364 e3a2      	LDI  R26,LOW(50)
000365 e0b0      	LDI  R27,HIGH(50)
000366 940e 0bc9 	CALL __MULW12
000368 940e 0aa0 	CALL SUBOPT_0x21
                 ; 0000 016C         OCR1BL = temp*50;
                 ; 0000 016D 
                 ; 0000 016E         lcd_clear();
00036a 940e 09e8 	CALL SUBOPT_0xA
                 ; 0000 016F         lcd_gotoxy(0, 0);
                 ; 0000 0170         lcd_putsf("Duty");
00036c 940e 0a75 	CALL SUBOPT_0x1D
                 ; 0000 0171         lcd_gotoxy(0, 1);
                 ; 0000 0172         sprintf(lcd_data, "%d %", temp);
00036e 01f8      	MOVW R30,R16
00036f 940e 0b9c 	CALL __CWD1
000371 940e 0a8a 	CALL SUBOPT_0x1E
                 ; 0000 0173         lcd_puts(lcd_data);
                 ; 0000 0174 
                 ; 0000 0175         delay_ms(100);
                 ; 0000 0176     }
000373 cfd9      	RJMP _0x3F
                 _0x41:
                 ; 0000 0177     OCR1BH=0x00;
000374 940e 0aa8 	CALL SUBOPT_0x22
                 ; 0000 0178     OCR1BL=0x00; //0% duty
                 ; 0000 0179     PORTB=0x00;
000376 bbe8      	OUT  0x18,R30
                 ; 0000 017A }
000377 c26e      	RJMP _0x2080005
                 ;
                 ;// ******************************** About Order *******************************************************
                 ;void order(unsigned char * sequence)
                 ; 0000 017E {
                 _order:
                 ; 0000 017F     unsigned char seq=*sequence;
                 ; 0000 0180     unsigned char Order=0x00;
                 ; 0000 0181 
                 ; 0000 0182     if(Up_thumb)    Order|=0x01;
000378 931a      	ST   -Y,R17
000379 930a      	ST   -Y,R16
                 ;	*sequence -> Y+2
                 ;	seq -> R17
                 ;	Order -> R16
00037a 81aa      	LDD  R26,Y+2
00037b 81bb      	LDD  R27,Y+2+1
00037c 91ec      	LD   R30,X
00037d 2f1e      	MOV  R17,R30
00037e e000      	LDI  R16,0
00037f 9b0d      	SBIS 0x1,5
000380 6001      	ORI  R16,LOW(1)
                 ; 0000 0183     if(Up_index)    Order|=0x02;
000381 9bca      	SBIS 0x19,2
000382 6002      	ORI  R16,LOW(2)
                 ; 0000 0184     if(Up_middle)   Order|=0x04;
000383 9bcc      	SBIS 0x19,4
000384 6004      	ORI  R16,LOW(4)
                 ; 0000 0185     if(Up_rest)     Order|=0x08;
000385 9bce      	SBIS 0x19,6
000386 6008      	ORI  R16,LOW(8)
                 ; 0000 0186     if(Down_thumb)  Order|=0x10;
000387 9bc9      	SBIS 0x19,1
000388 6100      	ORI  R16,LOW(16)
                 ; 0000 0187     if(Down_index)  Order|=0x20;
000389 9bcb      	SBIS 0x19,3
00038a 6200      	ORI  R16,LOW(32)
                 ; 0000 0188     if(Down_middle) Order|=0x40;
00038b 9bcd      	SBIS 0x19,5
00038c 6400      	ORI  R16,LOW(64)
                 ; 0000 0189     if(Down_rest)   Order|=0x80;
00038d 9bcf      	SBIS 0x19,7
00038e 6800      	ORI  R16,LOW(128)
                 ; 0000 018A     if(NO_SIGNAL_tu&&NO_SIGNAL_td) Order&=0xEE;
00038f 9b0d      	SBIS 0x1,5
000390 c002      	RJMP _0x4F
000391 99c9      	SBIC 0x19,1
000392 c001      	RJMP _0x50
                 _0x4F:
000393 c001      	RJMP _0x4E
                 _0x50:
000394 7e0e      	ANDI R16,LOW(238)
                 ; 0000 018B     if(NO_SIGNAL_iu&&NO_SIGNAL_id) Order&=0xDD;
                 _0x4E:
000395 9bca      	SBIS 0x19,2
000396 c002      	RJMP _0x52
000397 99cb      	SBIC 0x19,3
000398 c001      	RJMP _0x53
                 _0x52:
000399 c001      	RJMP _0x51
                 _0x53:
00039a 7d0d      	ANDI R16,LOW(221)
                 ; 0000 018C     if(NO_SIGNAL_mu&&NO_SIGNAL_md) Order&=0xBB;
                 _0x51:
00039b 9bcc      	SBIS 0x19,4
00039c c002      	RJMP _0x55
00039d 99cd      	SBIC 0x19,5
00039e c001      	RJMP _0x56
                 _0x55:
00039f c001      	RJMP _0x54
                 _0x56:
0003a0 7b0b      	ANDI R16,LOW(187)
                 ; 0000 018D     if(NO_SIGNAL_ru&&NO_SIGNAL_rd) Order&=0x77;
                 _0x54:
0003a1 9bce      	SBIS 0x19,6
0003a2 c002      	RJMP _0x58
0003a3 99cf      	SBIC 0x19,7
0003a4 c001      	RJMP _0x59
                 _0x58:
0003a5 c001      	RJMP _0x57
                 _0x59:
0003a6 7707      	ANDI R16,LOW(119)
                 ; 0000 018E     /*
                 ; 0000 018F     lcd_clear();
                 ; 0000 0190     lcd_gotoxy(0, 0);
                 ; 0000 0191     sprintf(lcd_data, "%2x", Order);
                 ; 0000 0192     lcd_puts(lcd_data);
                 ; 0000 0193     */
                 ; 0000 0194 
                 ; 0000 0195     if(Order&(0x01<<seq))
                 _0x57:
0003a7 940e 0aac 	CALL SUBOPT_0x23
0003a9 f051      	BREQ _0x5A
                 ; 0000 0196     {
                 ; 0000 0197         E_flag[seq]=1;
0003aa 940e 0a31 	CALL SUBOPT_0x11
0003ac 51eb      	SUBI R30,LOW(-_E_flag)
0003ad 4ff9      	SBCI R31,HIGH(-_E_flag)
0003ae e0a1      	LDI  R26,LOW(1)
0003af 83a0      	STD  Z+0,R26
                 ; 0000 0198         F_flag[seq]=0;
0003b0 940e 0a31 	CALL SUBOPT_0x11
0003b2 940e 0ab7 	CALL SUBOPT_0x24
                 ; 0000 0199     }
                 ; 0000 019A     if(Order&(0x10<<seq))
                 _0x5A:
0003b4 940e 0abc 	CALL SUBOPT_0x25
0003b6 f041      	BREQ _0x5B
                 ; 0000 019B     {
                 ; 0000 019C         E_flag[seq]=0;
0003b7 940e 0a31 	CALL SUBOPT_0x11
0003b9 940e 0ac7 	CALL SUBOPT_0x26
                 ; 0000 019D         F_flag[seq]=1;
0003bb 51e7      	SUBI R30,LOW(-_F_flag)
0003bc 4ff9      	SBCI R31,HIGH(-_F_flag)
0003bd e0a1      	LDI  R26,LOW(1)
0003be 83a0      	STD  Z+0,R26
                 ; 0000 019E     }
                 ; 0000 019F     if(!(Order&(0x01<<seq))&&!(Order&(0x10<<seq)))
                 _0x5B:
0003bf 940e 0aac 	CALL SUBOPT_0x23
0003c1 f419      	BRNE _0x5D
0003c2 940e 0abc 	CALL SUBOPT_0x25
0003c4 f009      	BREQ _0x5E
                 _0x5D:
0003c5 c006      	RJMP _0x5C
                 _0x5E:
                 ; 0000 01A0     {
                 ; 0000 01A1         E_flag[seq]=0;
0003c6 940e 0a31 	CALL SUBOPT_0x11
0003c8 940e 0ac7 	CALL SUBOPT_0x26
                 ; 0000 01A2         F_flag[seq]=0;
0003ca 940e 0ab7 	CALL SUBOPT_0x24
                 ; 0000 01A3     }
                 ; 0000 01A4 
                 ; 0000 01A5     // sequence 0 : Thumb   PC0, PC4 on, PORTC = 0x11
                 ; 0000 01A6     // sequence 1 : Index   PC1, PC5 on, PORTC = 0x22
                 ; 0000 01A7     // sequence 2 : Middle  PC2, PC6 on, PORTC = 0x44
                 ; 0000 01A8     // sequence 3 : Rest    PC3, PC7 on, PORTC = 0x88
                 ; 0000 01A9     //PORTC = 0x11<<sequence;
                 ; 0000 01AA     seq++;
                 _0x5C:
0003cc 5f1f      	SUBI R17,-1
                 ; 0000 01AB     if(seq>3) seq=0;
0003cd 3014      	CPI  R17,4
0003ce f008      	BRLO _0x5F
0003cf e010      	LDI  R17,LOW(0)
                 ; 0000 01AC     *sequence=seq;
                 _0x5F:
0003d0 81aa      	LDD  R26,Y+2
0003d1 81bb      	LDD  R27,Y+2+1
0003d2 931c      	ST   X,R17
                 ; 0000 01AD }
0003d3 8119      	LDD  R17,Y+1
0003d4 8108      	LDD  R16,Y+0
                 _0x2080007:
0003d5 9624      	ADIW R28,4
0003d6 9508      	RET
                 ;
                 ;void disp(unsigned char x, unsigned char seq)
                 ; 0000 01B0 {
                 _disp:
                 ; 0000 01B1     lcd_gotoxy(x, 1);
                 ;	x -> Y+1
                 ;	seq -> Y+0
0003d7 81e9      	LDD  R30,Y+1
0003d8 940e 0acc 	CALL SUBOPT_0x27
                 ; 0000 01B2     if(E_flag[seq])                     lcd_putsf("E");
0003da 940e 0ad1 	CALL SUBOPT_0x28
0003dc 51eb      	SUBI R30,LOW(-_E_flag)
0003dd 4ff9      	SBCI R31,HIGH(-_E_flag)
0003de 81e0      	LD   R30,Z
0003df 30e0      	CPI  R30,0
0003e0 f021      	BREQ _0x60
                +
0003e1 eee9     +LDI R30 , LOW ( 2 * _0x0 + ( 29 ) )
0003e2 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 29 ) )
                 	__POINTW1FN _0x0,29
0003e3 940e 0ad4 	CALL SUBOPT_0x29
                 ; 0000 01B3     if(F_flag[seq])                     lcd_putsf("F");
                 _0x60:
0003e5 940e 0ad1 	CALL SUBOPT_0x28
0003e7 51e7      	SUBI R30,LOW(-_F_flag)
0003e8 4ff9      	SBCI R31,HIGH(-_F_flag)
0003e9 81e0      	LD   R30,Z
0003ea 30e0      	CPI  R30,0
0003eb f021      	BREQ _0x61
                +
0003ec eeeb     +LDI R30 , LOW ( 2 * _0x0 + ( 31 ) )
0003ed e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 31 ) )
                 	__POINTW1FN _0x0,31
0003ee 940e 0ad4 	CALL SUBOPT_0x29
                 ; 0000 01B4     if((E_flag[seq]==0)&&(F_flag[seq]==0))  lcd_putsf("-");
                 _0x61:
0003f0 940e 0ad1 	CALL SUBOPT_0x28
0003f2 940e 0ad8 	CALL SUBOPT_0x2A
0003f4 f419      	BRNE _0x63
0003f5 940e 0ade 	CALL SUBOPT_0x2B
0003f7 f009      	BREQ _0x64
                 _0x63:
0003f8 c004      	RJMP _0x62
                 _0x64:
                +
0003f9 eeed     +LDI R30 , LOW ( 2 * _0x0 + ( 33 ) )
0003fa e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 33 ) )
                 	__POINTW1FN _0x0,33
0003fb 940e 0ad4 	CALL SUBOPT_0x29
                 ; 0000 01B5 }
                 _0x62:
0003fd 940c 08db 	JMP  _0x2080003
                 ;
                 ;void test_order()
                 ; 0000 01B8 {
                 _test_order:
                 ; 0000 01B9     unsigned char sequence=0;
                 ; 0000 01BA 
                 ; 0000 01BB     delay_ms(50);
0003ff 940e 09e0 	CALL SUBOPT_0x9
                 ;	sequence -> R17
                 ; 0000 01BC     while(Middle_switch_off)
                 _0x65:
000401 9b0a      	SBIS 0x1,2
000402 c038      	RJMP _0x67
                 ; 0000 01BD     {
                 ; 0000 01BE         order(&sequence);
000403 b7ed      	IN   R30,SPL
000404 b7fe      	IN   R31,SPH
000405 93fa      	ST   -Y,R31
000406 93ea      	ST   -Y,R30
000407 931f      	PUSH R17
000408 df6f      	RCALL _order
000409 911f      	POP  R17
                 ; 0000 01BF 
                 ; 0000 01C0         lcd_clear();
00040a 940e 09e8 	CALL SUBOPT_0xA
                 ; 0000 01C1 
                 ; 0000 01C2         lcd_gotoxy(0, 0);lcd_putsf("T");
                +
00040c eeef     +LDI R30 , LOW ( 2 * _0x0 + ( 35 ) )
00040d e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 35 ) )
                 	__POINTW1FN _0x0,35
00040e 940e 0ad4 	CALL SUBOPT_0x29
                 ; 0000 01C3         lcd_gotoxy(2, 0);lcd_putsf("I");
000410 e0e2      	LDI  R30,LOW(2)
000411 940e 0ae4 	CALL SUBOPT_0x2C
                +
000413 efe1     +LDI R30 , LOW ( 2 * _0x0 + ( 37 ) )
000414 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 37 ) )
                 	__POINTW1FN _0x0,37
000415 940e 0ad4 	CALL SUBOPT_0x29
                 ; 0000 01C4         lcd_gotoxy(4, 0);lcd_putsf("M");
000417 e0e4      	LDI  R30,LOW(4)
000418 940e 0ae4 	CALL SUBOPT_0x2C
                +
00041a efe3     +LDI R30 , LOW ( 2 * _0x0 + ( 39 ) )
00041b e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 39 ) )
                 	__POINTW1FN _0x0,39
00041c 940e 0ad4 	CALL SUBOPT_0x29
                 ; 0000 01C5         lcd_gotoxy(6, 0);lcd_putsf("R");
00041e e0e6      	LDI  R30,LOW(6)
00041f 940e 0ae4 	CALL SUBOPT_0x2C
                +
000421 efe5     +LDI R30 , LOW ( 2 * _0x0 + ( 41 ) )
000422 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 41 ) )
                 	__POINTW1FN _0x0,41
000423 940e 0ad4 	CALL SUBOPT_0x29
                 ; 0000 01C6 
                 ; 0000 01C7         disp(0,0);
000425 e0e0      	LDI  R30,LOW(0)
000426 93ea      	ST   -Y,R30
000427 93ea      	ST   -Y,R30
000428 dfae      	RCALL _disp
                 ; 0000 01C8         disp(2,1);
000429 e0e2      	LDI  R30,LOW(2)
00042a 93ea      	ST   -Y,R30
00042b e0e1      	LDI  R30,LOW(1)
00042c 93ea      	ST   -Y,R30
00042d dfa9      	RCALL _disp
                 ; 0000 01C9         disp(4,2);
00042e e0e4      	LDI  R30,LOW(4)
00042f 93ea      	ST   -Y,R30
000430 e0e2      	LDI  R30,LOW(2)
000431 93ea      	ST   -Y,R30
000432 dfa4      	RCALL _disp
                 ; 0000 01CA         disp(6,3);
000433 e0e6      	LDI  R30,LOW(6)
000434 93ea      	ST   -Y,R30
000435 e0e3      	LDI  R30,LOW(3)
000436 93ea      	ST   -Y,R30
000437 df9f      	RCALL _disp
                 ; 0000 01CB 
                 ; 0000 01CC 
                 ; 0000 01CD         /*
                 ; 0000 01CE         lcd_gotoxy(0, 1);
                 ; 0000 01CF         sprintf(lcd_data, "%d", sequence);
                 ; 0000 01D0         lcd_puts(lcd_data);
                 ; 0000 01D1         */
                 ; 0000 01D2         delay_ms(100);//Sequence term
000438 940e 0a47 	CALL SUBOPT_0x14
                 ; 0000 01D3     }
00043a cfc6      	RJMP _0x65
                 _0x67:
                 ; 0000 01D4 }
                 _0x2080006:
00043b 9119      	LD   R17,Y+
00043c 9508      	RET
                 ;
                 ;void valve_order()
                 ; 0000 01D7 {
                 _valve_order:
                 ; 0000 01D8     unsigned char seq=0;
                 ; 0000 01D9     unsigned char temp=0;
                 ; 0000 01DA 
                 ; 0000 01DB     delay_ms(50);
00043d 931a      	ST   -Y,R17
00043e 930a      	ST   -Y,R16
                 ;	seq -> R17
                 ;	temp -> R16
00043f e010      	LDI  R17,0
000440 e000      	LDI  R16,0
000441 940e 0a5f 	CALL SUBOPT_0x18
                 ; 0000 01DC     INITIATE;
000443 940e 0a65 	CALL SUBOPT_0x19
                 ; 0000 01DD     while(Middle_switch_off)
                 _0x68:
000445 9b0a      	SBIS 0x1,2
000446 c082      	RJMP _0x6A
                 ; 0000 01DE     {
                 ; 0000 01DF         order(&seq);
000447 b7ed      	IN   R30,SPL
000448 b7fe      	IN   R31,SPH
000449 93fa      	ST   -Y,R31
00044a 93ea      	ST   -Y,R30
00044b 931f      	PUSH R17
00044c df2b      	RCALL _order
00044d 911f      	POP  R17
                 ; 0000 01E0         //Global_Sequence=seq;
                 ; 0000 01E1 
                 ; 0000 01E2         lcd_clear();
00044e 940e 09e8 	CALL SUBOPT_0xA
                 ; 0000 01E3         lcd_gotoxy(0, 0);lcd_putsf("Valve!");
                +
000450 efe7     +LDI R30 , LOW ( 2 * _0x0 + ( 43 ) )
000451 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 43 ) )
                 	__POINTW1FN _0x0,43
000452 940e 0ad4 	CALL SUBOPT_0x29
                 ; 0000 01E4 
                 ; 0000 01E5         if(Left_switch_on)  Global_Sequence++;
000454 990b      	SBIC 0x1,3
000455 c005      	RJMP _0x6B
000456 91e0 06ed 	LDS  R30,_Global_Sequence
000458 5fef      	SUBI R30,-LOW(1)
000459 93e0 06ed 	STS  _Global_Sequence,R30
                 ; 0000 01E6         if(Right_switch_on)  Global_Sequence--;
                 _0x6B:
00045b 9909      	SBIC 0x1,1
00045c c005      	RJMP _0x6C
00045d 91e0 06ed 	LDS  R30,_Global_Sequence
00045f 50e1      	SUBI R30,LOW(1)
000460 93e0 06ed 	STS  _Global_Sequence,R30
                 ; 0000 01E7         if(Global_Sequence>3)   Global_Sequence=0;
                 _0x6C:
000462 91a0 06ed 	LDS  R26,_Global_Sequence
000464 30a4      	CPI  R26,LOW(0x4)
000465 f018      	BRLO _0x6D
000466 e0e0      	LDI  R30,LOW(0)
000467 93e0 06ed 	STS  _Global_Sequence,R30
                 ; 0000 01E8         if(Global_Sequence==0 && Right_switch_on)   Global_Sequence=3;
                 _0x6D:
000469 91a0 06ed 	LDS  R26,_Global_Sequence
00046b 30a0      	CPI  R26,LOW(0x0)
00046c f411      	BRNE _0x6F
00046d 9b09      	SBIS 0x1,1
00046e c001      	RJMP _0x70
                 _0x6F:
00046f c003      	RJMP _0x6E
                 _0x70:
000470 e0e3      	LDI  R30,LOW(3)
000471 93e0 06ed 	STS  _Global_Sequence,R30
                 ; 0000 01E9 
                 ; 0000 01EA         lcd_gotoxy(7, 0);
                 _0x6E:
000473 e0e7      	LDI  R30,LOW(7)
000474 940e 0ae4 	CALL SUBOPT_0x2C
                 ; 0000 01EB         sprintf(lcd_data, "%d", Global_Sequence);
000476 940e 0ae9 	CALL SUBOPT_0x2D
000478 940e 0a05 	CALL SUBOPT_0xD
                 ; 0000 01EC         lcd_puts(lcd_data);
                 ; 0000 01ED 
                 ; 0000 01EE         disp(0,Global_Sequence);
00047a 940e 0af4 	CALL SUBOPT_0x2E
                 ; 0000 01EF 
                 ; 0000 01F0         lcd_gotoxy(5, 1);
                 ; 0000 01F1         sprintf(lcd_data, "%d", E_flag[Global_Sequence]);
00047c 940e 0ae9 	CALL SUBOPT_0x2D
00047e 940e 0afd 	CALL SUBOPT_0x2F
                 ; 0000 01F2         lcd_puts(lcd_data);
                 ; 0000 01F3         lcd_gotoxy(7, 1);
000480 e0e7      	LDI  R30,LOW(7)
000481 940e 0acc 	CALL SUBOPT_0x27
                 ; 0000 01F4         sprintf(lcd_data, "%d", F_flag[Global_Sequence]);
000483 940e 0ae9 	CALL SUBOPT_0x2D
000485 940e 0b02 	CALL SUBOPT_0x30
                 ; 0000 01F5         lcd_puts(lcd_data);
                 ; 0000 01F6 
                 ; 0000 01F7 
                 ; 0000 01F8         if((E_flag[Global_Sequence]==0)&&(F_flag[Global_Sequence]==0))
000487 940e 0b07 	CALL SUBOPT_0x31
000489 940e 0ad8 	CALL SUBOPT_0x2A
00048b f419      	BRNE _0x72
00048c 940e 0ade 	CALL SUBOPT_0x2B
00048e f009      	BREQ _0x73
                 _0x72:
00048f c00a      	RJMP _0x71
                 _0x73:
                 ; 0000 01F9         {
                 ; 0000 01FA             OCR1AH=500>>8;
000490 e0e1      	LDI  R30,LOW(1)
000491 bdeb      	OUT  0x2B,R30
                 ; 0000 01FB             OCR1AL=500;
000492 efe4      	LDI  R30,LOW(244)
000493 bdea      	OUT  0x2A,R30
                 ; 0000 01FC             OCR3AH=500>>8;
000494 e0e1      	LDI  R30,LOW(1)
000495 93e0 0087 	STS  135,R30
                 ; 0000 01FD             OCR3AL=500;
000497 efe4      	LDI  R30,LOW(244)
000498 93e0 0086 	STS  134,R30
                 ; 0000 01FE         }
                 ; 0000 01FF         if((E_flag[Global_Sequence]==1)&&(F_flag[Global_Sequence]==0))
                 _0x71:
00049a 940e 0b07 	CALL SUBOPT_0x31
00049c 010f      	MOVW R0,R30
00049d 51eb      	SUBI R30,LOW(-_E_flag)
00049e 4ff9      	SBCI R31,HIGH(-_E_flag)
00049f 81a0      	LD   R26,Z
0004a0 30a1      	CPI  R26,LOW(0x1)
0004a1 f419      	BRNE _0x75
0004a2 940e 0ade 	CALL SUBOPT_0x2B
0004a4 f009      	BREQ _0x76
                 _0x75:
0004a5 c00a      	RJMP _0x74
                 _0x76:
                 ; 0000 0200         {
                 ; 0000 0201             OCR1AH=800>>8;
0004a6 e0e3      	LDI  R30,LOW(3)
0004a7 bdeb      	OUT  0x2B,R30
                 ; 0000 0202             OCR1AL=800;
0004a8 e2e0      	LDI  R30,LOW(32)
0004a9 bdea      	OUT  0x2A,R30
                 ; 0000 0203             OCR3AH=200>>8;
0004aa e0e0      	LDI  R30,LOW(0)
0004ab 93e0 0087 	STS  135,R30
                 ; 0000 0204             OCR3AL=200;
0004ad ece8      	LDI  R30,LOW(200)
0004ae 93e0 0086 	STS  134,R30
                 ; 0000 0205         }
                 ; 0000 0206         if((E_flag[Global_Sequence]==0)&&(F_flag[Global_Sequence]==1))
                 _0x74:
0004b0 940e 0b07 	CALL SUBOPT_0x31
0004b2 940e 0ad8 	CALL SUBOPT_0x2A
0004b4 f431      	BRNE _0x78
0004b5 01f0      	MOVW R30,R0
0004b6 51e7      	SUBI R30,LOW(-_F_flag)
0004b7 4ff9      	SBCI R31,HIGH(-_F_flag)
0004b8 81a0      	LD   R26,Z
0004b9 30a1      	CPI  R26,LOW(0x1)
0004ba f009      	BREQ _0x79
                 _0x78:
0004bb c00a      	RJMP _0x77
                 _0x79:
                 ; 0000 0207         {
                 ; 0000 0208             OCR1AH=200>>8;
0004bc e0e0      	LDI  R30,LOW(0)
0004bd bdeb      	OUT  0x2B,R30
                 ; 0000 0209             OCR1AL=200;
0004be ece8      	LDI  R30,LOW(200)
0004bf bdea      	OUT  0x2A,R30
                 ; 0000 020A             OCR3AH=800>>8;
0004c0 e0e3      	LDI  R30,LOW(3)
0004c1 93e0 0087 	STS  135,R30
                 ; 0000 020B             OCR3AL=800;
0004c3 e2e0      	LDI  R30,LOW(32)
0004c4 93e0 0086 	STS  134,R30
                 ; 0000 020C         }
                 ; 0000 020D         delay_ms(100);
                 _0x77:
0004c6 940e 0a47 	CALL SUBOPT_0x14
                 ; 0000 020E     }
0004c8 cf7c      	RJMP _0x68
                 _0x6A:
                 ; 0000 020F     TERMINATE;
0004c9 940e 0a97 	CALL SUBOPT_0x1F
                 ; 0000 0210     Global_Sequence=0;
0004cb 93e0 06ed 	STS  _Global_Sequence,R30
                 ; 0000 0211     OCR1A =0x00;
0004cd e0e0      	LDI  R30,LOW(0)
0004ce e0f0      	LDI  R31,HIGH(0)
0004cf bdfb      	OUT  0x2A+1,R31
0004d0 bdea      	OUT  0x2A,R30
                 ; 0000 0212     OCR1BH=0x00;
0004d1 940e 0aa8 	CALL SUBOPT_0x22
                 ; 0000 0213     OCR1BL=0x00;
                 ; 0000 0214     for(i=0;i<4;i++)
0004d3 93e0 0501 	STS  _i,R30
0004d5 93e0 0502 	STS  _i+1,R30
                 _0x7B:
0004d7 91a0 0501 	LDS  R26,_i
0004d9 91b0 0502 	LDS  R27,_i+1
0004db 9714      	SBIW R26,4
0004dc f43c      	BRGE _0x7C
                 ; 0000 0215     {
                 ; 0000 0216         E_flag[i]=0;
0004dd 940e 0b0b 	CALL SUBOPT_0x32
0004df 940e 0b10 	CALL SUBOPT_0x33
                 ; 0000 0217         F_flag[i]=0;
                 ; 0000 0218     }
0004e1 940e 0b16 	CALL SUBOPT_0x34
0004e3 cff3      	RJMP _0x7B
                 _0x7C:
                 ; 0000 0219     PORTB=0x00;
0004e4 e0e0      	LDI  R30,LOW(0)
0004e5 bbe8      	OUT  0x18,R30
                 ; 0000 021A     PORTC=0x00;
0004e6 bbe5      	OUT  0x15,R30
                 ; 0000 021B }
0004e7 c0fe      	RJMP _0x2080005
                 ;
                 ;void pump_valve()
                 ; 0000 021E {
                 _pump_valve:
                 ; 0000 021F     unsigned char seq=0;
                 ; 0000 0220     unsigned char temp=50;
                 ; 0000 0221 
                 ; 0000 0222     delay_ms(50);
0004e8 931a      	ST   -Y,R17
0004e9 930a      	ST   -Y,R16
                 ;	seq -> R17
                 ;	temp -> R16
0004ea e010      	LDI  R17,0
0004eb e302      	LDI  R16,50
0004ec 940e 0a5f 	CALL SUBOPT_0x18
                 ; 0000 0223     INITIATE;
0004ee 940e 0a65 	CALL SUBOPT_0x19
                 ; 0000 0224     while(Middle_switch_off)
                 _0x7D:
0004f0 9b0a      	SBIS 0x1,2
0004f1 c07d      	RJMP _0x7F
                 ; 0000 0225     {
                 ; 0000 0226         order(&seq);
0004f2 b7ed      	IN   R30,SPL
0004f3 b7fe      	IN   R31,SPH
0004f4 93fa      	ST   -Y,R31
0004f5 93ea      	ST   -Y,R30
0004f6 931f      	PUSH R17
0004f7 de80      	RCALL _order
0004f8 911f      	POP  R17
                 ; 0000 0227         Global_Sequence=seq;
0004f9 9310 06ed 	STS  _Global_Sequence,R17
                 ; 0000 0228 
                 ; 0000 0229         lcd_clear();
0004fb 940e 09e8 	CALL SUBOPT_0xA
                 ; 0000 022A         lcd_gotoxy(0, 0);lcd_putsf("Duty : ");
                +
0004fd efee     +LDI R30 , LOW ( 2 * _0x0 + ( 50 ) )
0004fe e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 50 ) )
                 	__POINTW1FN _0x0,50
0004ff 940e 0ad4 	CALL SUBOPT_0x29
                 ; 0000 022B         lcd_gotoxy(6, 0);sprintf(lcd_data, "%2d %", temp);
000501 e0e6      	LDI  R30,LOW(6)
000502 940e 0ae4 	CALL SUBOPT_0x2C
000504 940e 0b1e 	CALL SUBOPT_0x35
                +
000506 e0e6     +LDI R30 , LOW ( 2 * _0x0 + ( 58 ) )
000507 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 58 ) )
                 	__POINTW1FN _0x0,58
000508 93fa      	ST   -Y,R31
000509 93ea      	ST   -Y,R30
00050a 2fe0      	MOV  R30,R16
00050b 940e 0a05 	CALL SUBOPT_0xD
                 ; 0000 022C         lcd_puts(lcd_data);
                 ; 0000 022D 
                 ; 0000 022E         disp(0,Global_Sequence);
00050d 940e 0af4 	CALL SUBOPT_0x2E
                 ; 0000 022F 
                 ; 0000 0230         lcd_gotoxy(5, 1);
                 ; 0000 0231         sprintf(lcd_data, "%d", E_flag[Global_Sequence]);
00050f 940e 0ae9 	CALL SUBOPT_0x2D
000511 940e 0afd 	CALL SUBOPT_0x2F
                 ; 0000 0232         lcd_puts(lcd_data);
                 ; 0000 0233         lcd_gotoxy(7, 1);
000513 e0e7      	LDI  R30,LOW(7)
000514 940e 0acc 	CALL SUBOPT_0x27
                 ; 0000 0234         sprintf(lcd_data, "%d", F_flag[Global_Sequence]);
000516 940e 0ae9 	CALL SUBOPT_0x2D
000518 940e 0b02 	CALL SUBOPT_0x30
                 ; 0000 0235         lcd_puts(lcd_data);
                 ; 0000 0236 
                 ; 0000 0237 
                 ; 0000 0238         if((E_flag[Global_Sequence]==0)&&(F_flag[Global_Sequence]==0))
00051a 940e 0b07 	CALL SUBOPT_0x31
00051c 940e 0ad8 	CALL SUBOPT_0x2A
00051e f419      	BRNE _0x81
00051f 940e 0ade 	CALL SUBOPT_0x2B
000521 f009      	BREQ _0x82
                 _0x81:
000522 c00a      	RJMP _0x80
                 _0x82:
                 ; 0000 0239         {
                 ; 0000 023A             OCR1AH=50*50>>8;
000523 e0e9      	LDI  R30,LOW(9)
000524 bdeb      	OUT  0x2B,R30
                 ; 0000 023B             OCR1AL=50*50;
000525 ece4      	LDI  R30,LOW(196)
000526 bdea      	OUT  0x2A,R30
                 ; 0000 023C             OCR3AH=50*50>>8;
000527 e0e9      	LDI  R30,LOW(9)
000528 93e0 0087 	STS  135,R30
                 ; 0000 023D             OCR3AL=50*50;
00052a ece4      	LDI  R30,LOW(196)
00052b 93e0 0086 	STS  134,R30
                 ; 0000 023E         }
                 ; 0000 023F         if((E_flag[Global_Sequence]==1)&&(F_flag[Global_Sequence]==0))
                 _0x80:
00052d 940e 0b07 	CALL SUBOPT_0x31
00052f 010f      	MOVW R0,R30
000530 51eb      	SUBI R30,LOW(-_E_flag)
000531 4ff9      	SBCI R31,HIGH(-_E_flag)
000532 81a0      	LD   R26,Z
000533 30a1      	CPI  R26,LOW(0x1)
000534 f419      	BRNE _0x84
000535 940e 0ade 	CALL SUBOPT_0x2B
000537 f009      	BREQ _0x85
                 _0x84:
000538 c00a      	RJMP _0x83
                 _0x85:
                 ; 0000 0240         {
                 ; 0000 0241             OCR1AH=70*50>>8;
000539 e0ed      	LDI  R30,LOW(13)
00053a bdeb      	OUT  0x2B,R30
                 ; 0000 0242             OCR1AL=70*50;
00053b eaec      	LDI  R30,LOW(172)
00053c bdea      	OUT  0x2A,R30
                 ; 0000 0243             OCR3AH=30*50>>8;
00053d e0e5      	LDI  R30,LOW(5)
00053e 93e0 0087 	STS  135,R30
                 ; 0000 0244             OCR3AL=30*50;
000540 edec      	LDI  R30,LOW(220)
000541 93e0 0086 	STS  134,R30
                 ; 0000 0245         }
                 ; 0000 0246         if((E_flag[Global_Sequence]==0)&&(F_flag[Global_Sequence]==1))
                 _0x83:
000543 940e 0b07 	CALL SUBOPT_0x31
000545 940e 0ad8 	CALL SUBOPT_0x2A
000547 f431      	BRNE _0x87
000548 01f0      	MOVW R30,R0
000549 51e7      	SUBI R30,LOW(-_F_flag)
00054a 4ff9      	SBCI R31,HIGH(-_F_flag)
00054b 81a0      	LD   R26,Z
00054c 30a1      	CPI  R26,LOW(0x1)
00054d f009      	BREQ _0x88
                 _0x87:
00054e c00a      	RJMP _0x86
                 _0x88:
                 ; 0000 0247         {
                 ; 0000 0248             OCR1AH=30*50>>8;
00054f e0e5      	LDI  R30,LOW(5)
000550 bdeb      	OUT  0x2B,R30
                 ; 0000 0249             OCR1AL=30*50;
000551 edec      	LDI  R30,LOW(220)
000552 bdea      	OUT  0x2A,R30
                 ; 0000 024A             OCR3AH=70*50>>8;
000553 e0ed      	LDI  R30,LOW(13)
000554 93e0 0087 	STS  135,R30
                 ; 0000 024B             OCR3AL=70*50;
000556 eaec      	LDI  R30,LOW(172)
000557 93e0 0086 	STS  134,R30
                 ; 0000 024C         }
                 ; 0000 024D 
                 ; 0000 024E         if(Left_switch_on)  temp++;
                 _0x86:
000559 9b0b      	SBIS 0x1,3
00055a 5f0f      	SUBI R16,-1
                 ; 0000 024F         if(Right_switch_on)  temp--;
00055b 9b09      	SBIS 0x1,1
00055c 5001      	SUBI R16,1
                 ; 0000 0250         if(temp<1) temp=1;
00055d 3001      	CPI  R16,1
00055e f408      	BRSH _0x8B
00055f e001      	LDI  R16,LOW(1)
                 ; 0000 0251         if(temp>99)  temp=99;
                 _0x8B:
000560 3604      	CPI  R16,100
000561 f008      	BRLO _0x8C
000562 e603      	LDI  R16,LOW(99)
                 ; 0000 0252         // TEST by LED berfore Valve delivered...
                 ; 0000 0253         OCR1BH = temp*50 >>8;
                 _0x8C:
000563 e3e2      	LDI  R30,LOW(50)
000564 9fe0      	MUL  R30,R16
000565 01f0      	MOVW R30,R0
000566 940e 0aa0 	CALL SUBOPT_0x21
                 ; 0000 0254         OCR1BL = temp*50;
                 ; 0000 0255 
                 ; 0000 0256         delay_ms(500);
000568 efe4      	LDI  R30,LOW(500)
000569 e0f1      	LDI  R31,HIGH(500)
00056a 93fa      	ST   -Y,R31
00056b 93ea      	ST   -Y,R30
00056c 940e 0b5e 	CALL _delay_ms
                 ; 0000 0257     }
00056e cf81      	RJMP _0x7D
                 _0x7F:
                 ; 0000 0258     TERMINATE;
00056f 940e 0a97 	CALL SUBOPT_0x1F
                 ; 0000 0259     Global_Sequence=0;
000571 93e0 06ed 	STS  _Global_Sequence,R30
                 ; 0000 025A     OCR1AH=0x00;
000573 940e 0a9c 	CALL SUBOPT_0x20
                 ; 0000 025B     OCR1AL=0x00;
                 ; 0000 025C     OCR1BH=0x00;
000575 940e 0aa8 	CALL SUBOPT_0x22
                 ; 0000 025D     OCR1BL=0x00;
                 ; 0000 025E     OCR1BH=0x00;
000577 bde9      	OUT  0x29,R30
                 ; 0000 025F     OCR1BL=0x00;
000578 e0e0      	LDI  R30,LOW(0)
000579 bde8      	OUT  0x28,R30
                 ; 0000 0260     for(i=0;i<4;i++)
00057a 93e0 0501 	STS  _i,R30
00057c 93e0 0502 	STS  _i+1,R30
                 _0x8E:
00057e 91a0 0501 	LDS  R26,_i
000580 91b0 0502 	LDS  R27,_i+1
000582 9714      	SBIW R26,4
000583 f43c      	BRGE _0x8F
                 ; 0000 0261     {
                 ; 0000 0262         E_flag[i]=0;
000584 940e 0b0b 	CALL SUBOPT_0x32
000586 940e 0b10 	CALL SUBOPT_0x33
                 ; 0000 0263         F_flag[i]=0;
                 ; 0000 0264     }
000588 940e 0b16 	CALL SUBOPT_0x34
00058a cff3      	RJMP _0x8E
                 _0x8F:
                 ; 0000 0265     PORTB=0x00;
00058b e0e0      	LDI  R30,LOW(0)
00058c bbe8      	OUT  0x18,R30
                 ; 0000 0266     PORTC=0x00;
00058d bbe5      	OUT  0x15,R30
                 ; 0000 0267 }
00058e c057      	RJMP _0x2080005
                 ;
                 ;//**************************************%%%&&&&&&&&&&&&&&&&&&&&&&&%%%********************************************
                 ;//**************************************%%% About Actual Movement %%%********************************************
                 ;//**************************************%%%%%%%%%%%%%%%%%%%%%%%%%%%%%********************************************
                 ;//Measuring Grab threshold
                 ;void measure_threshold()
                 ; 0000 026E {
                 _measure_threshold:
                 ; 0000 026F     int seq = 0;//50% duty
                 ; 0000 0270     delay_ms(50);
00058f 931a      	ST   -Y,R17
000590 930a      	ST   -Y,R16
                 ;	seq -> R16,R17
                +
000591 e000     +LDI R16 , LOW ( 0 )
000592 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000593 940e 0a5f 	CALL SUBOPT_0x18
                 ; 0000 0271 
                 ; 0000 0272     while(Middle_switch_off)
                 _0x90:
000595 9b0a      	SBIS 0x1,2
000596 c04f      	RJMP _0x92
                 ; 0000 0273     {
                 ; 0000 0274         if(Left_switch_on)  seq++;
000597 990b      	SBIC 0x1,3
000598 c002      	RJMP _0x93
                +
000599 5f0f     +SUBI R16 , LOW ( - 1 )
00059a 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 0275         if(Right_switch_on)  seq--;
                 _0x93:
00059b 9909      	SBIC 0x1,1
00059c c002      	RJMP _0x94
                +
00059d 5001     +SUBI R16 , LOW ( 1 )
00059e 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
                 ; 0000 0276         if(seq>3)  seq=0;
                 _0x94:
                +
00059f 3004     +CPI R16 , LOW ( 4 )
0005a0 e0e0     +LDI R30 , HIGH ( 4 )
0005a1 071e     +CPC R17 , R30
                 	__CPWRN 16,17,4
0005a2 f014      	BRLT _0x95
                +
0005a3 e000     +LDI R16 , LOW ( 0 )
0005a4 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ; 0000 0277         if(seq==0 && Right_switch_on)  seq=3;
                 _0x95:
0005a5 2400      	CLR  R0
0005a6 1600      	CP   R0,R16
0005a7 0601      	CPC  R0,R17
0005a8 f411      	BRNE _0x97
0005a9 9b09      	SBIS 0x1,1
0005aa c001      	RJMP _0x98
                 _0x97:
0005ab c002      	RJMP _0x96
                 _0x98:
                +
0005ac e003     +LDI R16 , LOW ( 3 )
0005ad e010     +LDI R17 , HIGH ( 3 )
                 	__GETWRN 16,17,3
                 ; 0000 0278 
                 ; 0000 0279         mean_flex(seq,1);
                 _0x96:
0005ae 930a      	ST   -Y,R16
0005af e0e1      	LDI  R30,LOW(1)
0005b0 93ea      	ST   -Y,R30
0005b1 dc7b      	RCALL _mean_flex
                 ; 0000 027A         mean_pressure(seq,1);
0005b2 930a      	ST   -Y,R16
0005b3 e0e1      	LDI  R30,LOW(1)
0005b4 93ea      	ST   -Y,R30
0005b5 dbc7      	RCALL _mean_pressure
                 ; 0000 027B 
                 ; 0000 027C         lcd_clear();
0005b6 940e 09e8 	CALL SUBOPT_0xA
                 ; 0000 027D         lcd_gotoxy(0, 0);
                 ; 0000 027E         lcd_putsf("FLEX");
                +
0005b8 e0ec     +LDI R30 , LOW ( 2 * _0x0 + ( 64 ) )
0005b9 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 64 ) )
                 	__POINTW1FN _0x0,64
0005ba 940e 0ad4 	CALL SUBOPT_0x29
                 ; 0000 027F         lcd_gotoxy(5, 0);
0005bc e0e5      	LDI  R30,LOW(5)
0005bd 940e 0ae4 	CALL SUBOPT_0x2C
                 ; 0000 0280         sprintf(lcd_data, "%d %", flex_mean[seq]);
0005bf 940e 0b1e 	CALL SUBOPT_0x35
                +
0005c1 eee4     +LDI R30 , LOW ( 2 * _0x0 + ( 24 ) )
0005c2 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 24 ) )
                 	__POINTW1FN _0x0,24
0005c3 93fa      	ST   -Y,R31
0005c4 93ea      	ST   -Y,R30
0005c5 eda1      	LDI  R26,LOW(_flex_mean)
0005c6 e0b6      	LDI  R27,HIGH(_flex_mean)
0005c7 0fa0      	ADD  R26,R16
0005c8 1fb1      	ADC  R27,R17
0005c9 91ec      	LD   R30,X
0005ca 940e 0a05 	CALL SUBOPT_0xD
                 ; 0000 0281         lcd_puts(lcd_data);
                 ; 0000 0282 
                 ; 0000 0283         lcd_gotoxy(0, 1);
0005cc e0e0      	LDI  R30,LOW(0)
0005cd 940e 0acc 	CALL SUBOPT_0x27
                 ; 0000 0284         lcd_putsf("PRES");
                +
0005cf e1e1     +LDI R30 , LOW ( 2 * _0x0 + ( 69 ) )
0005d0 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 69 ) )
                 	__POINTW1FN _0x0,69
0005d1 940e 0ad4 	CALL SUBOPT_0x29
                 ; 0000 0285         lcd_gotoxy(5, 1);
0005d3 e0e5      	LDI  R30,LOW(5)
0005d4 940e 0acc 	CALL SUBOPT_0x27
                 ; 0000 0286         sprintf(lcd_data, "%d %", pressure_mean[seq]);
0005d6 940e 0b1e 	CALL SUBOPT_0x35
                +
0005d8 eee4     +LDI R30 , LOW ( 2 * _0x0 + ( 24 ) )
0005d9 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 24 ) )
                 	__POINTW1FN _0x0,24
0005da 93fa      	ST   -Y,R31
0005db 93ea      	ST   -Y,R30
0005dc efad      	LDI  R26,LOW(_pressure_mean)
0005dd e0b5      	LDI  R27,HIGH(_pressure_mean)
0005de 0fa0      	ADD  R26,R16
0005df 1fb1      	ADC  R27,R17
0005e0 91ec      	LD   R30,X
0005e1 940e 0a05 	CALL SUBOPT_0xD
                 ; 0000 0287         lcd_puts(lcd_data);
                 ; 0000 0288 
                 ; 0000 0289         delay_ms(100);
0005e3 940e 0a47 	CALL SUBOPT_0x14
                 ; 0000 028A     }
0005e5 cfaf      	RJMP _0x90
                 _0x92:
                 ; 0000 028B }
                 _0x2080005:
0005e6 9109      	LD   R16,Y+
0005e7 9119      	LD   R17,Y+
0005e8 9508      	RET
                 ;
                 ;// Moving fingers
                 ;void Move_finger(unsigned char seq, unsigned char P, unsigned char Bend)
                 ; 0000 028F {
                 ; 0000 0290   unsigned char threshold;//Actively changing by Bend
                 ; 0000 0291   unsigned char Grab=0;//if 1, no more Grab (NO FLEXTION)
                 ; 0000 0292   unsigned char E_OR_F;
                 ; 0000 0293   unsigned int OCR_in;
                 ; 0000 0294   unsigned int OCR_out;
                 ; 0000 0295   //double r=0;//r=OCR_out/OCR_in
                 ; 0000 0296   double r_in=1;//inlet speed ratio
                 ; 0000 0297   double r_out=1;//outlet speed ratio
                 ; 0000 0298   double u=0;
                 ; 0000 0299   double error=0;
                 ; 0000 029A 
                 ; 0000 029B   /***INSERT TERM OF 'threshold' IN TERMS OF 'Bend'!!!***/
                 ; 0000 029C   threshold = 70;//ÀÏ´Ü¸ð¸£´Ï±î »ó¼ö·Î µÒ
                 ;	seq -> Y+26
                 ;	P -> Y+25
                 ;	Bend -> Y+24
                 ;	threshold -> R17
                 ;	Grab -> R16
                 ;	E_OR_F -> R19
                 ;	OCR_in -> R20,R21
                 ;	OCR_out -> Y+22
                 ;	r_in -> Y+18
                 ;	r_out -> Y+14
                 ;	u -> Y+10
                 ;	error -> Y+6
                 ; 0000 029D   // Grab or not?
                 ; 0000 029E   if(P>=threshold)  Grab=1;//Over the threshold : no more grab
                 ; 0000 029F   else Grab=0;//Under the threshold : Keep moving
                 ; 0000 02A0 
                 ; 0000 02A1 
                 ; 0000 02A2   //Update angle (PID)
                 ; 0000 02A3   E_OR_F = ((E_flag[seq]?-1:1)+(F_flag[seq]?1:-1))/2;//Extension:1, Flextion:-1, Do noting:0
                 ; 0000 02A4   ang_desired = Bend+E_OR_F*delta_ang;//Ext:Bend+delta_ang, Flex:Bend-delta_ang, Stay:Bend
                 ; 0000 02A5   error = ang_desired-ang_old[seq];
                 ; 0000 02A6   error_sum[seq] += error;
                 ; 0000 02A7   u = kp*error + ki*error_sum[seq]*(Ts/1000.) + kd*(error-error_old[seq])/(Ts/1000.);//Control value for OCR1A,OCR3A
                 ; 0000 02A8   error_old[seq]=error;
                 ; 0000 02A9 
                 ; 0000 02AA   //Saturation condition...
                 ; 0000 02AB   if(u>UPPER)       u=UPPER;
                 ; 0000 02AC   else if(u<LOWER)  u=LOWER;
                 ; 0000 02AD 
                 ; 0000 02AE 
                 ; 0000 02AF   // Input update
                 ; 0000 02B0   /*±¸¹öÀü... (Input-Output ratio calcultate)
                 ; 0000 02B1   //Grab&Flextion:r=1, !Grab&Flextion:r=1.4, !Grab&E_flag:r=0.6, !Grab&stay:r=1, Grab&!F_flag:Extension(r=0.6) or stay(r=1)
                 ; 0000 02B2   r = (Grab&&F_flag[seq])?1:(((E_flag[seq]?0.2:1)+(F_flag[seq]?1.8:1))/2);
                 ; 0000 02B3 
                 ; 0000 02B4 
                 ; 0000 02B5   //without PID
                 ; 0000 02B6   OCR_in = IN_SPEED;  //Inlet
                 ; 0000 02B7   OCR_out = r*OCR_in; //Outlet
                 ; 0000 02B8 
                 ; 0000 02B9   //with PID
                 ; 0000 02BA   OCR_in = u;           //Inlet
                 ; 0000 02BB   OCR_out = r*OCR_in;   //Outlet
                 ; 0000 02BC   */
                 ; 0000 02BD 
                 ; 0000 02BE   /*½Å¹öÀü...
                 ; 0000 02BF   ±âÁØ ¼Óµµ¸¦ PID·Î ±¸ÇÑ ÈÄ
                 ; 0000 02C0   1. Grab ÆÇÁ¤ÀÌ ³ªÁö ¾ÊÀº °æ¿ì FelxtionÀÌ¸é inletÀ» ³ôÀº ºñÀ²·Î outlet¿ï ³·Àº ºñÀ²·Î ÇÒ´ç
                 ; 0000 02C1   2. Grab ÆÇÁ¤ÀÌ ³ªÁö ¾ÊÀº °æ¿ì ExtensionÀÌ¸é inletÀ» ³·Àº ºñÀ²·Î outlet¿ï ³ôÀº ºñÀ²·Î ÇÒ´ç
                 ; 0000 02C2   3. Grab ÆÇÁ¤ÀÌ ³­ °æ¿ì FlextionÀÌ¸é inlet/outlet ¸ðµÎ ±âÁØ¼Óµµ»ç¿ë
                 ; 0000 02C3   4. Grab ÆÇÁ¤ÀÌ ³­ °æ¿ì ExtensionÀÌ¸é inletÀ» ³·Àº ºñÀ²·Î outlet¿ï ³ôÀº ºñÀ²·Î ÇÒ´ç
                 ; 0000 02C4   5. ¾Æ¹«·± ÀÔ·ÂÀÌ ¾ø´Â °æ¿ì µ¿ÀûÆòÇü»óÅÂ¸¦ À¯Áö
                 ; 0000 02C5   */
                 ; 0000 02C6   //Grab&Flextion:r=1, !Grab&Flextion:r=1.4, !Grab&E_flag:r=0.6, !Grab&stay:r=1, Grab&!F_flag:Extension(r=0.6) or stay(r=1)
                 ; 0000 02C7   r_in = (Grab&&F_flag[seq])?1:(((E_flag[seq]?0.2:1)+(F_flag[seq]?1.8:1))/2);
                 ; 0000 02C8   //Grab&Flextion:r=1, !Grab&Flextion:r=0.6, !Grab&E_flag:r=1.4, !Grab&stay:r=1, Grab&!F_flag:Extension(r=1.4) or stay(r=1)
                 ; 0000 02C9   r_out = (Grab&&F_flag[seq])?1:(((E_flag[seq]?1.8:1)+(F_flag[seq]?0.2:1))/2);
                 ; 0000 02CA 
                 ; 0000 02CB   //with PID
                 ; 0000 02CC   OCR_in = r_in*u;          //Inlet
                 ; 0000 02CD   OCR_out = r_out*u;        //Outlet
                 ; 0000 02CE 
                 ; 0000 02CF   //Define action
                 ; 0000 02D0   OCR1AH = OCR_in>>8;
                 ; 0000 02D1   OCR1AL = OCR_in;
                 ; 0000 02D2   OCR3AH = OCR_out>>8;
                 ; 0000 02D3   OCR3AL = OCR_out;
                 ; 0000 02D4 }
                 ;
                 ;// About Daily mode
                 ;void RUN_daily()
                 ; 0000 02D8 {
                 ; 0000 02D9   unsigned char seq=0;
                 ; 0000 02DA   float ANG[4]={0};
                 ; 0000 02DB 
                 ; 0000 02DC   delay_ms(100);
                 ;	seq -> R17
                 ;	ANG -> Y+1
                 ; 0000 02DD   INITIATE; //Initialization, Turn interrupts on
                 ; 0000 02DE   while(Middle_switch_on)
                 ; 0000 02DF   {
                 ; 0000 02E0     order(&seq); //Control signal of each sequence
                 ; 0000 02E1     Global_Sequence = seq;
                 ; 0000 02E2 
                 ; 0000 02E3     mean_pressure(seq,1);
                 ; 0000 02E4     mean_flex(seq,1);
                 ; 0000 02E5     ANG[seq] = (flex_max[seq]-flex_mean[seq])/(flex_max[seq]-flex_min[seq])*90.;//Angle : 0~90degrees, ±Á¾îÁø °¢µµ°¡ Å¬¼ö·Ï ¼¾¼­°ªÀÌ ÀÛ¾ÆÁü
                 ; 0000 02E6 
                 ; 0000 02E7     Move_finger(seq,pressure_mean[seq], ANG[seq]);
                 ; 0000 02E8     //mean_flex(seq,1);
                 ; 0000 02E9     ang_old[seq]=ANG[seq];
                 ; 0000 02EA     delay_ms(Ts);//sequence gab,100times PWM pulse per each sequence
                 ; 0000 02EB   }
                 ; 0000 02EC   for(i=0;i<4;i++)
                 ; 0000 02ED   {
                 ; 0000 02EE     E_flag[i]=0;
                 ; 0000 02EF     F_flag[i]=0;
                 ; 0000 02F0   }
                 ; 0000 02F1   Global_Sequence=0;
                 ; 0000 02F2   OCR1AH=0x00;
                 ; 0000 02F3   OCR1AL=0x00;
                 ; 0000 02F4   OCR1BH=0x00;
                 ; 0000 02F5   OCR1BL=0x00;
                 ; 0000 02F6   OCR1BH=0x00;
                 ; 0000 02F7   OCR1BL=0x00;
                 ; 0000 02F8   PORTC=0x00;
                 ; 0000 02F9   TERMINATE; // Turn interrupts off
                 ; 0000 02FA }
                 ;/*
                 ;// About Rhabilitation
                 ;void Rehab()
                 ;{
                 ;    unsigned char seq=0;
                 ;
                 ;    delay_ms(100);
                 ;    INITIATE; //Initialization, Turn interrupts on
                 ;    while(Middle_switch_on)
                 ;    {
                 ;        order(&seq); //Control signal of each sequence
                 ;        Global_Sequence = seq;
                 ;
                 ;        mean_flex(seq,1);
                 ;        ANG[seq] = (flex_max[seq]-flex_mean[seq])/(flex_max[seq]-flex_min[seq])*90.;//Angle : 0~90degrees, ±Á¾îÁø °¢µµ°¡ Å¬¼ö·Ï ¼¾¼­°ªÀÌ ÀÛ¾ÆÁü
                 ;
                 ;        mean_flex(seq,1);
                 ;        ang_old[seq]=ANG[seq];
                 ;        delay_ms(Ts);//sequence gab,100times PWM pulse per each sequence
                 ;    }
                 ;    TERMINATE; // Turn interrupts off
                 ;    Global_Sequence=0;
                 ;}
                 ;*/
                 ;
                 ;// ********************************************* main ******************************************************************
                 ;void main(void)
                 ; 0000 0316 {
                 _main:
                 ; 0000 0317 // Declare your local variables here
                 ; 0000 0318 // menu
                 ; 0000 0319 unsigned char menu = 0;
                 ; 0000 031A unsigned char menu_Max = 9;
                 ; 0000 031B 
                 ; 0000 031C // PA1~7 : Control switch (PA0¾ÈµÊ)
                 ; 0000 031D PORTA=0x00;
                 ;	menu -> R17
                 ;	menu_Max -> R16
0005e9 e010      	LDI  R17,0
0005ea e009      	LDI  R16,9
0005eb e0e0      	LDI  R30,LOW(0)
0005ec bbeb      	OUT  0x1B,R30
                 ; 0000 031E DDRA=0x01;
0005ed e0e1      	LDI  R30,LOW(1)
0005ee bbea      	OUT  0x1A,R30
                 ; 0000 031F // PB6 : Pump
                 ; 0000 0320 PORTB=0x00;
0005ef e0e0      	LDI  R30,LOW(0)
0005f0 bbe8      	OUT  0x18,R30
                 ; 0000 0321 DDRB=0xFF;
0005f1 efef      	LDI  R30,LOW(255)
0005f2 bbe7      	OUT  0x17,R30
                 ; 0000 0322 // PC0~3 : Inlet Valve
                 ; 0000 0323 // PC4~7 : Outlet Valve
                 ; 0000 0324 PORTC=0x00;
0005f3 e0e0      	LDI  R30,LOW(0)
0005f4 bbe5      	OUT  0x15,R30
                 ; 0000 0325 DDRC=0xFF;
0005f5 efef      	LDI  R30,LOW(255)
0005f6 bbe4      	OUT  0x14,R30
                 ; 0000 0326 // PD0~7 : LCD
                 ; 0000 0327 PORTD=0x00;
0005f7 e0e0      	LDI  R30,LOW(0)
0005f8 bbe2      	OUT  0x12,R30
                 ; 0000 0328 DDRD=0xFF;
0005f9 efef      	LDI  R30,LOW(255)
0005fa bbe1      	OUT  0x11,R30
                 ; 0000 0329 // PE0 : EMERGENCY switch
                 ; 0000 032A // PE1 : Interface switch - LEFT
                 ; 0000 032B // PE2 : Interface switch - MIDDLE
                 ; 0000 032C // PE3 : Interface switch - RIGHT
                 ; 0000 032D // PE4 : Mode change switch (Toggle)
                 ; 0000 032E // * PE5 : Thumb up....
                 ; 0000 032F PORTE=0x00;
0005fb e0e0      	LDI  R30,LOW(0)
0005fc b9e3      	OUT  0x3,R30
                 ; 0000 0330 DDRE=0xC0;
0005fd ece0      	LDI  R30,LOW(192)
0005fe b9e2      	OUT  0x2,R30
                 ; 0000 0331 // PF0~3 : Pressure Sensor
                 ; 0000 0332 // PF4~7 : Flex Sensor
                 ; 0000 0333 PORTF=0x00;
0005ff e0e0      	LDI  R30,LOW(0)
000600 93e0 0062 	STS  98,R30
                 ; 0000 0334 DDRF=0x00;
000602 93e0 0061 	STS  97,R30
                 ; 0000 0335 PORTG=0x00;
000604 93e0 0065 	STS  101,R30
                 ; 0000 0336 DDRG=0x00;
000606 93e0 0064 	STS  100,R30
                 ; 0000 0337 
                 ; 0000 0338 // Compare match interrupt  : Valve on
                 ; 0000 0339 // Overflow interrupt       : Valve off
                 ; 0000 033A // Timer 1 B : PUMP pwm control by using OCR1B
                 ; 0000 033B // Timer 1   : Inlet Valve control
                 ; 0000 033C // Timer 3   : Outlet Valve on
                 ; 0000 033D 
                 ; 0000 033E // Timer/Counter 1 initialization
                 ; 0000 033F TCCR1A=0x22;//Only OC1B can make PWM signal(whenever TIM1_COMPB is LOW), Else : GPIO
000608 e2e2      	LDI  R30,LOW(34)
000609 bdef      	OUT  0x2F,R30
                 ; 0000 0340 //TCCR1A=0x02;
                 ; 0000 0341 TCCR1B=0x1C;//Timer 1 : Fast PWM mode, prescale=256, TOP=ICR1 (PWM period:80ms)
00060a e1ec      	LDI  R30,LOW(28)
00060b bdee      	OUT  0x2E,R30
                 ; 0000 0342 TCNT1H=0x00;
00060c e0e0      	LDI  R30,LOW(0)
00060d bded      	OUT  0x2D,R30
                 ; 0000 0343 TCNT1L=0x00;
00060e bdec      	OUT  0x2C,R30
                 ; 0000 0344 ICR1H=0x13;
00060f 940e 0a6a 	CALL SUBOPT_0x1A
                 ; 0000 0345 ICR1L=0x87;
                 ; 0000 0346 OCR1AH=0x00;
000611 940e 0a9c 	CALL SUBOPT_0x20
                 ; 0000 0347 OCR1AL=0x00;
                 ; 0000 0348 OCR1BH=0x00;
000613 940e 0aa8 	CALL SUBOPT_0x22
                 ; 0000 0349 OCR1BL=0x00;
                 ; 0000 034A OCR1CH=0x00;
000615 93e0 0079 	STS  121,R30
                 ; 0000 034B OCR1CL=0x00;
000617 e0e0      	LDI  R30,LOW(0)
000618 93e0 0078 	STS  120,R30
                 ; 0000 034C // Timer/Counter 3 initialization
                 ; 0000 034D TCCR3A=0x02;//All port related with Timer3 : GPIO
00061a e0e2      	LDI  R30,LOW(2)
00061b 93e0 008b 	STS  139,R30
                 ; 0000 034E TCCR3B=0x1C;//Timer 3 : Fast PWM mode, prescale=256, TOP=ICR3, f=clk/((TOP+1)*prescale)=80ms
00061d e1ec      	LDI  R30,LOW(28)
00061e 93e0 008a 	STS  138,R30
                 ; 0000 034F TCNT3H=0x00;
000620 e0e0      	LDI  R30,LOW(0)
000621 93e0 0089 	STS  137,R30
                 ; 0000 0350 TCNT3L=0x00;
000623 93e0 0088 	STS  136,R30
                 ; 0000 0351 ICR3H=0x13;
000625 e1e3      	LDI  R30,LOW(19)
000626 93e0 0081 	STS  129,R30
                 ; 0000 0352 ICR3L=0x87;
000628 e8e7      	LDI  R30,LOW(135)
000629 93e0 0080 	STS  128,R30
                 ; 0000 0353 OCR3AH=0x00;
00062b e0e0      	LDI  R30,LOW(0)
00062c 93e0 0087 	STS  135,R30
                 ; 0000 0354 OCR3AL=0x00;
00062e 93e0 0086 	STS  134,R30
                 ; 0000 0355 OCR3BH=0x00;
000630 93e0 0085 	STS  133,R30
                 ; 0000 0356 OCR3BL=0x00;
000632 93e0 0084 	STS  132,R30
                 ; 0000 0357 OCR3CH=0x00;
000634 93e0 0083 	STS  131,R30
                 ; 0000 0358 OCR3CL=0x00;
000636 93e0 0082 	STS  130,R30
                 ; 0000 0359 //Timer/counter interrupt
                 ; 0000 035A TIMSK = 0x00;
000638 bfe7      	OUT  0x37,R30
                 ; 0000 035B ETIMSK = 0x00;
000639 93e0 007d 	STS  125,R30
                 ; 0000 035C 
                 ; 0000 035D //ADC setting
                 ; 0000 035E ADMUX=0x21;
00063b e2e1      	LDI  R30,LOW(33)
00063c b9e7      	OUT  0x7,R30
                 ; 0000 035F ADCSRA=0xCF;  //ADC enable, ADC start, ADC interrupt on, prescale:128(62.5kHz)
00063d ecef      	LDI  R30,LOW(207)
00063e b9e6      	OUT  0x6,R30
                 ; 0000 0360 SFIOR=0x01;
00063f e0e1      	LDI  R30,LOW(1)
000640 bde0      	OUT  0x20,R30
                 ; 0000 0361 
                 ; 0000 0362 lcd_init(8);
000641 e0e8      	LDI  R30,LOW(8)
000642 93ea      	ST   -Y,R30
000643 940e 094a 	CALL _lcd_init
                 ; 0000 0363 // Global enable interrupts
                 ; 0000 0364 #asm("sei")
000645 9478      	sei
                 ; 0000 0365 //SREG = 0x80;
                 ; 0000 0366 while (1)
                 _0xC2:
                 ; 0000 0367       {
                 ; 0000 0368         if(Left_switch_on) menu++;
000646 9b0b      	SBIS 0x1,3
000647 5f1f      	SUBI R17,-1
                 ; 0000 0369         if(Right_switch_on) menu--;
000648 9b09      	SBIS 0x1,1
000649 5011      	SUBI R17,1
                 ; 0000 036A         if(menu > menu_Max)    menu = 0;
00064a 1701      	CP   R16,R17
00064b f408      	BRSH _0xC7
00064c e010      	LDI  R17,LOW(0)
                 ; 0000 036B         if(menu == 0)
                 _0xC7:
00064d 3010      	CPI  R17,0
00064e f411      	BRNE _0xC8
                 ; 0000 036C             if(Right_switch_on) menu = menu_Max;
00064f 9b09      	SBIS 0x1,1
000650 2f10      	MOV  R17,R16
                 ; 0000 036D 
                 ; 0000 036E         switch(menu)
                 _0xC8:
000651 940e 0a31 	CALL SUBOPT_0x11
                 ; 0000 036F         {
                 ; 0000 0370             case 0:
000653 9730      	SBIW R30,0
000654 f449      	BRNE _0xCD
                 ; 0000 0371                     lcd_clear();
000655 940e 09e8 	CALL SUBOPT_0xA
                 ; 0000 0372                     lcd_gotoxy(0, 0);
                 ; 0000 0373                     lcd_putsf("1.Pressure TEST");
                +
000657 e1e6     +LDI R30 , LOW ( 2 * _0x0 + ( 74 ) )
000658 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 74 ) )
                 	__POINTW1FN _0x0,74
000659 940e 0ad4 	CALL SUBOPT_0x29
                 ; 0000 0374                     if(Middle_switch_on) pressure_test();
00065b 9b0a      	SBIS 0x1,2
00065c db60      	RCALL _pressure_test
                 ; 0000 0375                     delay_ms(100);
00065d c07b      	RJMP _0xE5
                 ; 0000 0376                     break;
                 ; 0000 0377 
                 ; 0000 0378             case 1:
                 _0xCD:
00065e 30e1      	CPI  R30,LOW(0x1)
00065f e0a0      	LDI  R26,HIGH(0x1)
000660 07fa      	CPC  R31,R26
000661 f449      	BRNE _0xCF
                 ; 0000 0379                     lcd_clear();
000662 940e 09e8 	CALL SUBOPT_0xA
                 ; 0000 037A                     lcd_gotoxy(0, 0);
                 ; 0000 037B                     lcd_putsf("2.Pressure Tunning");
                +
000664 e2e6     +LDI R30 , LOW ( 2 * _0x0 + ( 90 ) )
000665 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 90 ) )
                 	__POINTW1FN _0x0,90
000666 940e 0ad4 	CALL SUBOPT_0x29
                 ; 0000 037C                     if(Middle_switch_on)    pressure_tuning();
000668 9b0a      	SBIS 0x1,2
000669 db75      	RCALL _pressure_tuning
                 ; 0000 037D                     delay_ms(100);
00066a c06e      	RJMP _0xE5
                 ; 0000 037E                     break;
                 ; 0000 037F 
                 ; 0000 0380             case 2:
                 _0xCF:
00066b 30e2      	CPI  R30,LOW(0x2)
00066c e0a0      	LDI  R26,HIGH(0x2)
00066d 07fa      	CPC  R31,R26
00066e f449      	BRNE _0xD1
                 ; 0000 0381                     lcd_clear();
00066f 940e 09e8 	CALL SUBOPT_0xA
                 ; 0000 0382                     lcd_gotoxy(0, 0);
                 ; 0000 0383                     lcd_putsf("3.Flex TEST");
                +
000671 e3e9     +LDI R30 , LOW ( 2 * _0x0 + ( 109 ) )
000672 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 109 ) )
                 	__POINTW1FN _0x0,109
000673 940e 0ad4 	CALL SUBOPT_0x29
                 ; 0000 0384                     if(Middle_switch_on)    flex_test();
000675 9b0a      	SBIS 0x1,2
000676 dbf8      	RCALL _flex_test
                 ; 0000 0385                     delay_ms(100);
000677 c061      	RJMP _0xE5
                 ; 0000 0386                     break;
                 ; 0000 0387             case 3:
                 _0xD1:
000678 30e3      	CPI  R30,LOW(0x3)
000679 e0a0      	LDI  R26,HIGH(0x3)
00067a 07fa      	CPC  R31,R26
00067b f449      	BRNE _0xD3
                 ; 0000 0388                     lcd_clear();
00067c 940e 09e8 	CALL SUBOPT_0xA
                 ; 0000 0389                     lcd_gotoxy(0, 0);
                 ; 0000 038A                     lcd_putsf("4.Flex Tunning");
                +
00067e e4e5     +LDI R30 , LOW ( 2 * _0x0 + ( 121 ) )
00067f e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 121 ) )
                 	__POINTW1FN _0x0,121
000680 940e 0ad4 	CALL SUBOPT_0x29
                 ; 0000 038B                     if(Middle_switch_on)    flex_tuning();
000682 9b0a      	SBIS 0x1,2
000683 dc0d      	RCALL _flex_tuning
                 ; 0000 038C                     delay_ms(100);
000684 c054      	RJMP _0xE5
                 ; 0000 038D                     break;
                 ; 0000 038E 
                 ; 0000 038F             case 4:
                 _0xD3:
000685 30e4      	CPI  R30,LOW(0x4)
000686 e0a0      	LDI  R26,HIGH(0x4)
000687 07fa      	CPC  R31,R26
000688 f449      	BRNE _0xD5
                 ; 0000 0390                     lcd_clear();
000689 940e 09e8 	CALL SUBOPT_0xA
                 ; 0000 0391                     lcd_gotoxy(0, 0);
                 ; 0000 0392                     lcd_putsf("5.PWM TEST");
                +
00068b e5e4     +LDI R30 , LOW ( 2 * _0x0 + ( 136 ) )
00068c e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 136 ) )
                 	__POINTW1FN _0x0,136
00068d 940e 0ad4 	CALL SUBOPT_0x29
                 ; 0000 0393                     if(Middle_switch_on)    check_pwm();
00068f 9b0a      	SBIS 0x1,2
000690 dc4e      	RCALL _check_pwm
                 ; 0000 0394                     delay_ms(100);
000691 c047      	RJMP _0xE5
                 ; 0000 0395                     break;
                 ; 0000 0396 
                 ; 0000 0397             case 5:
                 _0xD5:
000692 30e5      	CPI  R30,LOW(0x5)
000693 e0a0      	LDI  R26,HIGH(0x5)
000694 07fa      	CPC  R31,R26
000695 f449      	BRNE _0xD7
                 ; 0000 0398                     lcd_clear();
000696 940e 09e8 	CALL SUBOPT_0xA
                 ; 0000 0399                     lcd_gotoxy(0, 0);
                 ; 0000 039A                     lcd_putsf("6.PUMP TEST");
                +
000698 e5ef     +LDI R30 , LOW ( 2 * _0x0 + ( 147 ) )
000699 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 147 ) )
                 	__POINTW1FN _0x0,147
00069a 940e 0ad4 	CALL SUBOPT_0x29
                 ; 0000 039B                     if(Middle_switch_on)    PUMP_test();
00069c 9b0a      	SBIS 0x1,2
00069d dca9      	RCALL _PUMP_test
                 ; 0000 039C                     delay_ms(100);
00069e c03a      	RJMP _0xE5
                 ; 0000 039D                     break;
                 ; 0000 039E 
                 ; 0000 039F             case 6:
                 _0xD7:
00069f 30e6      	CPI  R30,LOW(0x6)
0006a0 e0a0      	LDI  R26,HIGH(0x6)
0006a1 07fa      	CPC  R31,R26
0006a2 f449      	BRNE _0xD9
                 ; 0000 03A0                     lcd_clear();
0006a3 940e 09e8 	CALL SUBOPT_0xA
                 ; 0000 03A1                     lcd_gotoxy(0, 0);
                 ; 0000 03A2                     lcd_putsf("7.Order TEST");
                +
0006a5 e6eb     +LDI R30 , LOW ( 2 * _0x0 + ( 159 ) )
0006a6 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 159 ) )
                 	__POINTW1FN _0x0,159
0006a7 940e 0ad4 	CALL SUBOPT_0x29
                 ; 0000 03A3                     if(Middle_switch_on)    test_order();
0006a9 9b0a      	SBIS 0x1,2
0006aa dd54      	RCALL _test_order
                 ; 0000 03A4                     delay_ms(100);
0006ab c02d      	RJMP _0xE5
                 ; 0000 03A5                     break;
                 ; 0000 03A6 
                 ; 0000 03A7             case 7:
                 _0xD9:
0006ac 30e7      	CPI  R30,LOW(0x7)
0006ad e0a0      	LDI  R26,HIGH(0x7)
0006ae 07fa      	CPC  R31,R26
0006af f449      	BRNE _0xDB
                 ; 0000 03A8                     lcd_clear();
0006b0 940e 09e8 	CALL SUBOPT_0xA
                 ; 0000 03A9                     lcd_gotoxy(0, 0);
                 ; 0000 03AA                     lcd_putsf("8.Valve Order");
                +
0006b2 e7e8     +LDI R30 , LOW ( 2 * _0x0 + ( 172 ) )
0006b3 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 172 ) )
                 	__POINTW1FN _0x0,172
0006b4 940e 0ad4 	CALL SUBOPT_0x29
                 ; 0000 03AB                     if(Middle_switch_on)    valve_order();
0006b6 9b0a      	SBIS 0x1,2
0006b7 dd85      	RCALL _valve_order
                 ; 0000 03AC                     delay_ms(100);
0006b8 c020      	RJMP _0xE5
                 ; 0000 03AD                     break;
                 ; 0000 03AE 
                 ; 0000 03AF             case 8:
                 _0xDB:
0006b9 30e8      	CPI  R30,LOW(0x8)
0006ba e0a0      	LDI  R26,HIGH(0x8)
0006bb 07fa      	CPC  R31,R26
0006bc f449      	BRNE _0xDD
                 ; 0000 03B0                     lcd_clear();
0006bd 940e 09e8 	CALL SUBOPT_0xA
                 ; 0000 03B1                     lcd_gotoxy(0, 0);
                 ; 0000 03B2                     lcd_putsf("9.Threshold?");
                +
0006bf e8e6     +LDI R30 , LOW ( 2 * _0x0 + ( 186 ) )
0006c0 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 186 ) )
                 	__POINTW1FN _0x0,186
0006c1 940e 0ad4 	CALL SUBOPT_0x29
                 ; 0000 03B3                     if(Middle_switch_on)    measure_threshold();
0006c3 9b0a      	SBIS 0x1,2
0006c4 deca      	RCALL _measure_threshold
                 ; 0000 03B4                     delay_ms(100);
0006c5 c013      	RJMP _0xE5
                 ; 0000 03B5                     break;
                 ; 0000 03B6 
                 ; 0000 03B7             case 9:
                 _0xDD:
0006c6 30e9      	CPI  R30,LOW(0x9)
0006c7 e0a0      	LDI  R26,HIGH(0x9)
0006c8 07fa      	CPC  R31,R26
0006c9 f449      	BRNE _0xE1
                 ; 0000 03B8                     lcd_clear();
0006ca 940e 09e8 	CALL SUBOPT_0xA
                 ; 0000 03B9                     lcd_gotoxy(0, 0);
                 ; 0000 03BA                     lcd_putsf("10.PUMP VALVE");
                +
0006cc e9e3     +LDI R30 , LOW ( 2 * _0x0 + ( 199 ) )
0006cd e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 199 ) )
                 	__POINTW1FN _0x0,199
0006ce 940e 0ad4 	CALL SUBOPT_0x29
                 ; 0000 03BB                     if(Middle_switch_on)    pump_valve();
0006d0 9b0a      	SBIS 0x1,2
0006d1 de16      	RCALL _pump_valve
                 ; 0000 03BC                     delay_ms(100);
0006d2 c006      	RJMP _0xE5
                 ; 0000 03BD                     break;
                 ; 0000 03BE 
                 ; 0000 03BF              default :
                 _0xE1:
                 ; 0000 03C0                     lcd_clear();
0006d3 940e 09e8 	CALL SUBOPT_0xA
                 ; 0000 03C1                     lcd_gotoxy(0, 0);
                 ; 0000 03C2                     lcd_putsf("**BREAK!**");
                +
0006d5 eae1     +LDI R30 , LOW ( 2 * _0x0 + ( 213 ) )
0006d6 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 213 ) )
                 	__POINTW1FN _0x0,213
0006d7 940e 0ad4 	CALL SUBOPT_0x29
                 ; 0000 03C3                     delay_ms(100);
                 _0xE5:
0006d9 e6e4      	LDI  R30,LOW(100)
0006da e0f0      	LDI  R31,HIGH(100)
0006db 93fa      	ST   -Y,R31
0006dc 93ea      	ST   -Y,R30
0006dd 940e 0b5e 	CALL _delay_ms
                 ; 0000 03C4                     break;
                 ; 0000 03C5 
                 ; 0000 03C6          }
                 ; 0000 03C7       }
0006df cf66      	RJMP _0xC2
                 ; 0000 03C8 
                 ; 0000 03C9 }
                 _0xE2:
0006e0 cfff      	RJMP _0xE2
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
0006e1 931a      	ST   -Y,R17
0006e2 930a      	ST   -Y,R16
0006e3 81aa      	LDD  R26,Y+2
0006e4 81bb      	LDD  R27,Y+2+1
0006e5 9612      	ADIW R26,2
0006e6 940e 0c07 	CALL __GETW1P
0006e8 9730      	SBIW R30,0
0006e9 f159      	BREQ _0x2000010
0006ea 81aa      	LDD  R26,Y+2
0006eb 81bb      	LDD  R27,Y+2+1
0006ec 9614      	ADIW R26,4
0006ed 940e 0c07 	CALL __GETW1P
0006ef 018f      	MOVW R16,R30
0006f0 9730      	SBIW R30,0
0006f1 f061      	BREQ _0x2000012
                +
0006f2 3002     +CPI R16 , LOW ( 2 )
0006f3 e0e0     +LDI R30 , HIGH ( 2 )
0006f4 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0006f5 f0f0      	BRLO _0x2000013
0006f6 01f8      	MOVW R30,R16
0006f7 9731      	SBIW R30,1
0006f8 018f      	MOVW R16,R30
                +
0006f9 81aa     +LDD R26 , Y + 2
0006fa 81bb     +LDD R27 , Y + 2 + 1
0006fb 9614     +ADIW R26 , 4
0006fc 93ed     +ST X + , R30
0006fd 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
0006fe 81aa      	LDD  R26,Y+2
0006ff 81bb      	LDD  R27,Y+2+1
000700 9612      	ADIW R26,2
000701 91ed      	LD   R30,X+
000702 91fd      	LD   R31,X+
000703 9631      	ADIW R30,1
000704 93fe      	ST   -X,R31
000705 93ee      	ST   -X,R30
000706 9731      	SBIW R30,1
000707 81ac      	LDD  R26,Y+4
000708 83a0      	STD  Z+0,R26
000709 81aa      	LDD  R26,Y+2
00070a 81bb      	LDD  R27,Y+2+1
00070b 940e 0c07 	CALL __GETW1P
00070d 23ff      	TST  R31
00070e f02a      	BRMI _0x2000014
00070f 91ed      	LD   R30,X+
000710 91fd      	LD   R31,X+
000711 9631      	ADIW R30,1
000712 93fe      	ST   -X,R31
000713 93ee      	ST   -X,R30
                 _0x2000014:
                 _0x2000013:
000714 c006      	RJMP _0x2000015
                 _0x2000010:
000715 81aa      	LDD  R26,Y+2
000716 81bb      	LDD  R27,Y+2+1
000717 efef      	LDI  R30,LOW(65535)
000718 efff      	LDI  R31,HIGH(65535)
000719 93ed      	ST   X+,R30
00071a 93fc      	ST   X,R31
                 _0x2000015:
00071b 8119      	LDD  R17,Y+1
00071c 8108      	LDD  R16,Y+0
00071d 9625      	ADIW R28,5
00071e 9508      	RET
                 __print_G100:
00071f 9726      	SBIW R28,6
000720 940e 0c23 	CALL __SAVELOCR6
000722 e010      	LDI  R17,0
000723 85ac      	LDD  R26,Y+12
000724 85bd      	LDD  R27,Y+12+1
000725 e0e0      	LDI  R30,LOW(0)
000726 e0f0      	LDI  R31,HIGH(0)
000727 93ed      	ST   X+,R30
000728 93fc      	ST   X,R31
                 _0x2000016:
000729 89ea      	LDD  R30,Y+18
00072a 89fb      	LDD  R31,Y+18+1
00072b 9631      	ADIW R30,1
00072c 8bea      	STD  Y+18,R30
00072d 8bfb      	STD  Y+18+1,R31
00072e 9731      	SBIW R30,1
00072f 91e4      	LPM  R30,Z
000730 2f2e      	MOV  R18,R30
000731 30e0      	CPI  R30,0
000732 f411      	BRNE PC+3
000733 940c 084c 	JMP _0x2000018
000735 2fe1      	MOV  R30,R17
000736 30e0      	CPI  R30,0
000737 f439      	BRNE _0x200001C
000738 3225      	CPI  R18,37
000739 f411      	BRNE _0x200001D
00073a e011      	LDI  R17,LOW(1)
00073b c002      	RJMP _0x200001E
                 _0x200001D:
00073c 940e 0b23 	CALL SUBOPT_0x36
                 _0x200001E:
00073e c10c      	RJMP _0x200001B
                 _0x200001C:
00073f 30e1      	CPI  R30,LOW(0x1)
000740 f4a9      	BRNE _0x200001F
000741 3225      	CPI  R18,37
000742 f419      	BRNE _0x2000020
000743 940e 0b23 	CALL SUBOPT_0x36
000745 c104      	RJMP _0x20000C9
                 _0x2000020:
000746 e012      	LDI  R17,LOW(2)
000747 e040      	LDI  R20,LOW(0)
000748 e000      	LDI  R16,LOW(0)
000749 322d      	CPI  R18,45
00074a f411      	BRNE _0x2000021
00074b e001      	LDI  R16,LOW(1)
00074c c0fe      	RJMP _0x200001B
                 _0x2000021:
00074d 322b      	CPI  R18,43
00074e f411      	BRNE _0x2000022
00074f e24b      	LDI  R20,LOW(43)
000750 c0fa      	RJMP _0x200001B
                 _0x2000022:
000751 3220      	CPI  R18,32
000752 f411      	BRNE _0x2000023
000753 e240      	LDI  R20,LOW(32)
000754 c0f6      	RJMP _0x200001B
                 _0x2000023:
000755 c002      	RJMP _0x2000024
                 _0x200001F:
000756 30e2      	CPI  R30,LOW(0x2)
000757 f439      	BRNE _0x2000025
                 _0x2000024:
000758 e050      	LDI  R21,LOW(0)
000759 e013      	LDI  R17,LOW(3)
00075a 3320      	CPI  R18,48
00075b f411      	BRNE _0x2000026
00075c 6800      	ORI  R16,LOW(128)
00075d c0ed      	RJMP _0x200001B
                 _0x2000026:
00075e c004      	RJMP _0x2000027
                 _0x2000025:
00075f 30e3      	CPI  R30,LOW(0x3)
000760 f011      	BREQ PC+3
000761 940c 084b 	JMP _0x200001B
                 _0x2000027:
000763 3320      	CPI  R18,48
000764 f010      	BRLO _0x200002A
000765 332a      	CPI  R18,58
000766 f008      	BRLO _0x200002B
                 _0x200002A:
000767 c007      	RJMP _0x2000029
                 _0x200002B:
000768 e0aa      	LDI  R26,LOW(10)
000769 9f5a      	MUL  R21,R26
00076a 2d50      	MOV  R21,R0
00076b 2fe2      	MOV  R30,R18
00076c 53e0      	SUBI R30,LOW(48)
00076d 0f5e      	ADD  R21,R30
00076e c0dc      	RJMP _0x200001B
                 _0x2000029:
00076f 2fe2      	MOV  R30,R18
000770 36e3      	CPI  R30,LOW(0x63)
000771 f449      	BRNE _0x200002F
000772 940e 0b2c 	CALL SUBOPT_0x37
000774 89e8      	LDD  R30,Y+16
000775 89f9      	LDD  R31,Y+16+1
000776 81a4      	LDD  R26,Z+4
000777 93aa      	ST   -Y,R26
000778 940e 0b32 	CALL SUBOPT_0x38
00077a c0cf      	RJMP _0x2000030
                 _0x200002F:
00077b 37e3      	CPI  R30,LOW(0x73)
00077c f441      	BRNE _0x2000032
00077d 940e 0b2c 	CALL SUBOPT_0x37
00077f 940e 0b3a 	CALL SUBOPT_0x39
000781 940e 097f 	CALL _strlen
000783 2f1e      	MOV  R17,R30
000784 c00a      	RJMP _0x2000033
                 _0x2000032:
000785 37e0      	CPI  R30,LOW(0x70)
000786 f461      	BRNE _0x2000035
000787 940e 0b2c 	CALL SUBOPT_0x37
000789 940e 0b3a 	CALL SUBOPT_0x39
00078b 940e 0989 	CALL _strlenf
00078d 2f1e      	MOV  R17,R30
00078e 6008      	ORI  R16,LOW(8)
                 _0x2000033:
00078f 6002      	ORI  R16,LOW(2)
000790 770f      	ANDI R16,LOW(127)
000791 e030      	LDI  R19,LOW(0)
000792 c035      	RJMP _0x2000036
                 _0x2000035:
000793 36e4      	CPI  R30,LOW(0x64)
000794 f011      	BREQ _0x2000039
000795 36e9      	CPI  R30,LOW(0x69)
000796 f411      	BRNE _0x200003A
                 _0x2000039:
000797 6004      	ORI  R16,LOW(4)
000798 c002      	RJMP _0x200003B
                 _0x200003A:
000799 37e5      	CPI  R30,LOW(0x75)
00079a f431      	BRNE _0x200003C
                 _0x200003B:
00079b e8ec      	LDI  R30,LOW(_tbl10_G100*2)
00079c e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
00079d 83ee      	STD  Y+6,R30
00079e 83ff      	STD  Y+6+1,R31
00079f e015      	LDI  R17,LOW(5)
0007a0 c00d      	RJMP _0x200003D
                 _0x200003C:
0007a1 35e8      	CPI  R30,LOW(0x58)
0007a2 f411      	BRNE _0x200003F
0007a3 6008      	ORI  R16,LOW(8)
0007a4 c004      	RJMP _0x2000040
                 _0x200003F:
0007a5 37e8      	CPI  R30,LOW(0x78)
0007a6 f011      	BREQ PC+3
0007a7 940c 084a 	JMP _0x2000071
                 _0x2000040:
0007a9 e9e6      	LDI  R30,LOW(_tbl16_G100*2)
0007aa e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
0007ab 83ee      	STD  Y+6,R30
0007ac 83ff      	STD  Y+6+1,R31
0007ad e014      	LDI  R17,LOW(4)
                 _0x200003D:
0007ae ff02      	SBRS R16,2
0007af c014      	RJMP _0x2000042
0007b0 940e 0b2c 	CALL SUBOPT_0x37
0007b2 940e 0b44 	CALL SUBOPT_0x3A
0007b4 85ab      	LDD  R26,Y+11
0007b5 23aa      	TST  R26
0007b6 f43a      	BRPL _0x2000043
0007b7 85ea      	LDD  R30,Y+10
0007b8 85fb      	LDD  R31,Y+10+1
0007b9 940e 0b6e 	CALL __ANEGW1
0007bb 87ea      	STD  Y+10,R30
0007bc 87fb      	STD  Y+10+1,R31
0007bd e24d      	LDI  R20,LOW(45)
                 _0x2000043:
0007be 3040      	CPI  R20,0
0007bf f011      	BREQ _0x2000044
0007c0 5f1f      	SUBI R17,-LOW(1)
0007c1 c001      	RJMP _0x2000045
                 _0x2000044:
0007c2 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
0007c3 c004      	RJMP _0x2000046
                 _0x2000042:
0007c4 940e 0b2c 	CALL SUBOPT_0x37
0007c6 940e 0b44 	CALL SUBOPT_0x3A
                 _0x2000046:
                 _0x2000036:
0007c8 fd00      	SBRC R16,0
0007c9 c011      	RJMP _0x2000047
                 _0x2000048:
0007ca 1715      	CP   R17,R21
0007cb f478      	BRSH _0x200004A
0007cc ff07      	SBRS R16,7
0007cd c008      	RJMP _0x200004B
0007ce ff02      	SBRS R16,2
0007cf c004      	RJMP _0x200004C
0007d0 7f0b      	ANDI R16,LOW(251)
0007d1 2f24      	MOV  R18,R20
0007d2 5011      	SUBI R17,LOW(1)
0007d3 c001      	RJMP _0x200004D
                 _0x200004C:
0007d4 e320      	LDI  R18,LOW(48)
                 _0x200004D:
0007d5 c001      	RJMP _0x200004E
                 _0x200004B:
0007d6 e220      	LDI  R18,LOW(32)
                 _0x200004E:
0007d7 940e 0b23 	CALL SUBOPT_0x36
0007d9 5051      	SUBI R21,LOW(1)
0007da cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
0007db 2f31      	MOV  R19,R17
0007dc ff01      	SBRS R16,1
0007dd c017      	RJMP _0x200004F
                 _0x2000050:
0007de 3030      	CPI  R19,0
0007df f0a1      	BREQ _0x2000052
0007e0 ff03      	SBRS R16,3
0007e1 c006      	RJMP _0x2000053
0007e2 81ee      	LDD  R30,Y+6
0007e3 81ff      	LDD  R31,Y+6+1
0007e4 9125      	LPM  R18,Z+
0007e5 83ee      	STD  Y+6,R30
0007e6 83ff      	STD  Y+6+1,R31
0007e7 c005      	RJMP _0x2000054
                 _0x2000053:
0007e8 81ae      	LDD  R26,Y+6
0007e9 81bf      	LDD  R27,Y+6+1
0007ea 912d      	LD   R18,X+
0007eb 83ae      	STD  Y+6,R26
0007ec 83bf      	STD  Y+6+1,R27
                 _0x2000054:
0007ed 940e 0b23 	CALL SUBOPT_0x36
0007ef 3050      	CPI  R21,0
0007f0 f009      	BREQ _0x2000055
0007f1 5051      	SUBI R21,LOW(1)
                 _0x2000055:
0007f2 5031      	SUBI R19,LOW(1)
0007f3 cfea      	RJMP _0x2000050
                 _0x2000052:
0007f4 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
0007f5 e320      	LDI  R18,LOW(48)
0007f6 81ee      	LDD  R30,Y+6
0007f7 81ff      	LDD  R31,Y+6+1
0007f8 940e 0c0b 	CALL __GETW1PF
0007fa 87e8      	STD  Y+8,R30
0007fb 87f9      	STD  Y+8+1,R31
0007fc 81ee      	LDD  R30,Y+6
0007fd 81ff      	LDD  R31,Y+6+1
0007fe 9632      	ADIW R30,2
0007ff 83ee      	STD  Y+6,R30
000800 83ff      	STD  Y+6+1,R31
                 _0x200005A:
000801 85e8      	LDD  R30,Y+8
000802 85f9      	LDD  R31,Y+8+1
000803 85aa      	LDD  R26,Y+10
000804 85bb      	LDD  R27,Y+10+1
000805 17ae      	CP   R26,R30
000806 07bf      	CPC  R27,R31
000807 f050      	BRLO _0x200005C
000808 5f2f      	SUBI R18,-LOW(1)
000809 85a8      	LDD  R26,Y+8
00080a 85b9      	LDD  R27,Y+8+1
00080b 85ea      	LDD  R30,Y+10
00080c 85fb      	LDD  R31,Y+10+1
00080d 1bea      	SUB  R30,R26
00080e 0bfb      	SBC  R31,R27
00080f 87ea      	STD  Y+10,R30
000810 87fb      	STD  Y+10+1,R31
000811 cfef      	RJMP _0x200005A
                 _0x200005C:
000812 332a      	CPI  R18,58
000813 f028      	BRLO _0x200005D
000814 ff03      	SBRS R16,3
000815 c002      	RJMP _0x200005E
000816 5f29      	SUBI R18,-LOW(7)
000817 c001      	RJMP _0x200005F
                 _0x200005E:
000818 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000819 fd04      	SBRC R16,4
00081a c01a      	RJMP _0x2000061
00081b 3321      	CPI  R18,49
00081c f420      	BRSH _0x2000063
00081d 85a8      	LDD  R26,Y+8
00081e 85b9      	LDD  R27,Y+8+1
00081f 9711      	SBIW R26,1
000820 f409      	BRNE _0x2000062
                 _0x2000063:
000821 c009      	RJMP _0x20000CA
                 _0x2000062:
000822 1753      	CP   R21,R19
000823 f010      	BRLO _0x2000067
000824 ff00      	SBRS R16,0
000825 c001      	RJMP _0x2000068
                 _0x2000067:
000826 c013      	RJMP _0x2000066
                 _0x2000068:
000827 e220      	LDI  R18,LOW(32)
000828 ff07      	SBRS R16,7
000829 c00b      	RJMP _0x2000069
00082a e320      	LDI  R18,LOW(48)
                 _0x20000CA:
00082b 6100      	ORI  R16,LOW(16)
00082c ff02      	SBRS R16,2
00082d c007      	RJMP _0x200006A
00082e 7f0b      	ANDI R16,LOW(251)
00082f 934a      	ST   -Y,R20
000830 940e 0b32 	CALL SUBOPT_0x38
000832 3050      	CPI  R21,0
000833 f009      	BREQ _0x200006B
000834 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
000835 940e 0b23 	CALL SUBOPT_0x36
000837 3050      	CPI  R21,0
000838 f009      	BREQ _0x200006C
000839 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
00083a 5031      	SUBI R19,LOW(1)
00083b 85a8      	LDD  R26,Y+8
00083c 85b9      	LDD  R27,Y+8+1
00083d 9712      	SBIW R26,2
00083e f008      	BRLO _0x2000059
00083f cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
000840 ff00      	SBRS R16,0
000841 c008      	RJMP _0x200006D
                 _0x200006E:
000842 3050      	CPI  R21,0
000843 f031      	BREQ _0x2000070
000844 5051      	SUBI R21,LOW(1)
000845 e2e0      	LDI  R30,LOW(32)
000846 93ea      	ST   -Y,R30
000847 940e 0b32 	CALL SUBOPT_0x38
000849 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000C9:
00084a e010      	LDI  R17,LOW(0)
                 _0x200001B:
00084b cedd      	RJMP _0x2000016
                 _0x2000018:
00084c 85ac      	LDD  R26,Y+12
00084d 85bd      	LDD  R27,Y+12+1
00084e 940e 0c07 	CALL __GETW1P
000850 940e 0c2a 	CALL __LOADLOCR6
000852 9664      	ADIW R28,20
000853 9508      	RET
                 _sprintf:
000854 92ff      	PUSH R15
000855 2ef8      	MOV  R15,R24
000856 9726      	SBIW R28,6
000857 940e 0c25 	CALL __SAVELOCR4
000859 940e 0b4c 	CALL SUBOPT_0x3B
00085b 9730      	SBIW R30,0
00085c f419      	BRNE _0x2000072
00085d efef      	LDI  R30,LOW(65535)
00085e efff      	LDI  R31,HIGH(65535)
00085f c025      	RJMP _0x2080004
                 _0x2000072:
000860 01de      	MOVW R26,R28
000861 9616      	ADIW R26,6
000862 940e 0b6a 	CALL __ADDW2R15
000864 018d      	MOVW R16,R26
000865 940e 0b4c 	CALL SUBOPT_0x3B
000867 83ee      	STD  Y+6,R30
000868 83ff      	STD  Y+6+1,R31
000869 e0e0      	LDI  R30,LOW(0)
00086a 87e8      	STD  Y+8,R30
00086b 87e9      	STD  Y+8+1,R30
00086c 01de      	MOVW R26,R28
00086d 961a      	ADIW R26,10
00086e 940e 0b6a 	CALL __ADDW2R15
000870 940e 0c07 	CALL __GETW1P
000872 93fa      	ST   -Y,R31
000873 93ea      	ST   -Y,R30
000874 931a      	ST   -Y,R17
000875 930a      	ST   -Y,R16
000876 eee1      	LDI  R30,LOW(_put_buff_G100)
000877 e0f6      	LDI  R31,HIGH(_put_buff_G100)
000878 93fa      	ST   -Y,R31
000879 93ea      	ST   -Y,R30
00087a 01fe      	MOVW R30,R28
00087b 963a      	ADIW R30,10
00087c 93fa      	ST   -Y,R31
00087d 93ea      	ST   -Y,R30
00087e dea0      	RCALL __print_G100
00087f 019f      	MOVW R18,R30
000880 81ae      	LDD  R26,Y+6
000881 81bf      	LDD  R27,Y+6+1
000882 e0e0      	LDI  R30,LOW(0)
000883 93ec      	ST   X,R30
000884 01f9      	MOVW R30,R18
                 _0x2080004:
000885 940e 0c2c 	CALL __LOADLOCR4
000887 962a      	ADIW R28,10
000888 90ff      	POP  R15
000889 9508      	RET
                     .equ __lcd_direction=__lcd_port-1
                     .equ __lcd_pin=__lcd_port-2
                     .equ __lcd_rs=0
                     .equ __lcd_rd=1
                     .equ __lcd_enable=2
                     .equ __lcd_busy_flag=7
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_delay_G101:
00088a e0ff          ldi   r31,15
                 __lcd_delay0:
00088b 95fa          dec   r31
00088c f7f1          brne  __lcd_delay0
00088d 9508      	RET
                 __lcd_ready:
00088e b3a1          in    r26,__lcd_direction
00088f 70af          andi  r26,0xf                 ;set as input
000890 bba1          out   __lcd_direction,r26
000891 9a91          sbi   __lcd_port,__lcd_rd     ;RD=1
000892 9890          cbi   __lcd_port,__lcd_rs     ;RS=0
                 __lcd_busy:
000893 dff6      	RCALL __lcd_delay_G101
000894 9a92          sbi   __lcd_port,__lcd_enable ;EN=1
000895 dff4      	RCALL __lcd_delay_G101
000896 b3a0          in    r26,__lcd_pin
000897 9892          cbi   __lcd_port,__lcd_enable ;EN=0
000898 dff1      	RCALL __lcd_delay_G101
000899 9a92          sbi   __lcd_port,__lcd_enable ;EN=1
00089a dfef      	RCALL __lcd_delay_G101
00089b 9892          cbi   __lcd_port,__lcd_enable ;EN=0
00089c fda7          sbrc  r26,__lcd_busy_flag
00089d cff5          rjmp  __lcd_busy
00089e 9508      	RET
                 __lcd_write_nibble_G101:
00089f 7fa0          andi  r26,0xf0
0008a0 2bab          or    r26,r27
0008a1 bba2          out   __lcd_port,r26          ;write
0008a2 9a92          sbi   __lcd_port,__lcd_enable ;EN=1
0008a3 940e 088a 	CALL __lcd_delay_G101
0008a5 9892          cbi   __lcd_port,__lcd_enable ;EN=0
0008a6 940e 088a 	CALL __lcd_delay_G101
0008a8 9508      	RET
                 __lcd_write_data:
0008a9 9891          cbi  __lcd_port,__lcd_rd 	  ;RD=0
0008aa b3a1          in    r26,__lcd_direction
0008ab 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output
0008ac bba1          out   __lcd_direction,r26
0008ad b3b2          in    r27,__lcd_port
0008ae 70bf          andi  r27,0xf
0008af 81a8          ld    r26,y
0008b0 dfee      	RCALL __lcd_write_nibble_G101
0008b1 81a8          ld    r26,y
0008b2 95a2          swap  r26
0008b3 dfeb      	RCALL __lcd_write_nibble_G101
0008b4 9a91          sbi   __lcd_port,__lcd_rd     ;RD=1
0008b5 940c 097d 	JMP  _0x2080001
                 __lcd_read_nibble_G101:
0008b7 9a92          sbi   __lcd_port,__lcd_enable ;EN=1
0008b8 940e 088a 	CALL __lcd_delay_G101
0008ba b3e0          in    r30,__lcd_pin           ;read
0008bb 9892          cbi   __lcd_port,__lcd_enable ;EN=0
0008bc 940e 088a 	CALL __lcd_delay_G101
0008be 7fe0          andi  r30,0xf0
0008bf 9508      	RET
                 _lcd_read_byte0_G101:
0008c0 940e 088a 	CALL __lcd_delay_G101
0008c2 dff4      	RCALL __lcd_read_nibble_G101
0008c3 2fae          mov   r26,r30
0008c4 dff2      	RCALL __lcd_read_nibble_G101
0008c5 9891          cbi   __lcd_port,__lcd_rd     ;RD=0
0008c6 95e2          swap  r30
0008c7 2bea          or    r30,r26
0008c8 9508      	RET
                 _lcd_gotoxy:
0008c9 940e 088e 	CALL __lcd_ready
0008cb 940e 0ad1 	CALL SUBOPT_0x28
0008cd 5ee0      	SUBI R30,LOW(-__base_y_G101)
0008ce 4ff8      	SBCI R31,HIGH(-__base_y_G101)
0008cf 81e0      	LD   R30,Z
0008d0 81a9      	LDD  R26,Y+1
0008d1 0fea      	ADD  R30,R26
0008d2 93ea      	ST   -Y,R30
0008d3 940e 08a9 	CALL __lcd_write_data
0008d5 81e9      	LDD  R30,Y+1
0008d6 93e0 0724 	STS  __lcd_x,R30
0008d8 81e8      	LD   R30,Y
0008d9 93e0 0725 	STS  __lcd_y,R30
                 _0x2080003:
0008db 9622      	ADIW R28,2
0008dc 9508      	RET
                 _lcd_clear:
0008dd 940e 088e 	CALL __lcd_ready
0008df e0e2      	LDI  R30,LOW(2)
0008e0 93ea      	ST   -Y,R30
0008e1 940e 08a9 	CALL __lcd_write_data
0008e3 940e 088e 	CALL __lcd_ready
0008e5 e0ec      	LDI  R30,LOW(12)
0008e6 93ea      	ST   -Y,R30
0008e7 940e 08a9 	CALL __lcd_write_data
0008e9 940e 088e 	CALL __lcd_ready
0008eb e0e1      	LDI  R30,LOW(1)
0008ec 93ea      	ST   -Y,R30
0008ed 940e 08a9 	CALL __lcd_write_data
0008ef e0e0      	LDI  R30,LOW(0)
0008f0 93e0 0725 	STS  __lcd_y,R30
0008f2 93e0 0724 	STS  __lcd_x,R30
0008f4 9508      	RET
                 _lcd_putchar:
0008f5 93ef          push r30
0008f6 93ff          push r31
0008f7 81a8          ld   r26,y
0008f8 9468          set
0008f9 30aa          cpi  r26,10
0008fa f039          breq __lcd_putchar1
0008fb 94e8          clt
0008fc 91e0 0726 	LDS  R30,__lcd_maxx
0008fe 91a0 0724 	LDS  R26,__lcd_x
000900 17ae      	CP   R26,R30
000901 f060      	BRLO _0x2020004
                 	__lcd_putchar1:
000902 91e0 0725 	LDS  R30,__lcd_y
000904 5fef      	SUBI R30,-LOW(1)
000905 93e0 0725 	STS  __lcd_y,R30
000907 e0e0      	LDI  R30,LOW(0)
000908 93ea      	ST   -Y,R30
000909 91e0 0725 	LDS  R30,__lcd_y
00090b 93ea      	ST   -Y,R30
00090c dfbc      	RCALL _lcd_gotoxy
00090d f056      	brts __lcd_putchar0
                 _0x2020004:
00090e 91e0 0724 	LDS  R30,__lcd_x
000910 5fef      	SUBI R30,-LOW(1)
000911 93e0 0724 	STS  __lcd_x,R30
000913 df7a          rcall __lcd_ready
000914 9a90          sbi  __lcd_port,__lcd_rs ;RS=1
000915 81a8          ld   r26,y
000916 93aa          st   -y,r26
000917 df91          rcall __lcd_write_data
                 __lcd_putchar0:
000918 91ff          pop  r31
000919 91ef          pop  r30
00091a 940c 097d 	JMP  _0x2080001
                 _lcd_puts:
00091c 931a      	ST   -Y,R17
                 _0x2020005:
00091d 81a9      	LDD  R26,Y+1
00091e 81ba      	LDD  R27,Y+1+1
00091f 91ed      	LD   R30,X+
000920 83a9      	STD  Y+1,R26
000921 83ba      	STD  Y+1+1,R27
000922 2f1e      	MOV  R17,R30
000923 30e0      	CPI  R30,0
000924 f019      	BREQ _0x2020007
000925 931a      	ST   -Y,R17
000926 dfce      	RCALL _lcd_putchar
000927 cff5      	RJMP _0x2020005
                 _0x2020007:
000928 c00e      	RJMP _0x2080002
                 _lcd_putsf:
000929 931a      	ST   -Y,R17
                 _0x2020008:
00092a 81e9      	LDD  R30,Y+1
00092b 81fa      	LDD  R31,Y+1+1
00092c 9631      	ADIW R30,1
00092d 83e9      	STD  Y+1,R30
00092e 83fa      	STD  Y+1+1,R31
00092f 9731      	SBIW R30,1
000930 91e4      	LPM  R30,Z
000931 2f1e      	MOV  R17,R30
000932 30e0      	CPI  R30,0
000933 f019      	BREQ _0x202000A
000934 931a      	ST   -Y,R17
000935 dfbf      	RCALL _lcd_putchar
000936 cff3      	RJMP _0x2020008
                 _0x202000A:
                 _0x2080002:
000937 8118      	LDD  R17,Y+0
000938 9623      	ADIW R28,3
000939 9508      	RET
                 __long_delay_G101:
00093a 27aa          clr   r26
00093b 27bb          clr   r27
                 __long_delay0:
00093c 9711          sbiw  r26,1         ;2 cycles
00093d f7f1          brne  __long_delay0 ;2 cycles
00093e 9508      	RET
                 __lcd_init_write_G101:
00093f 9891          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000940 b3a1          in    r26,__lcd_direction
000941 6fa7          ori   r26,0xf7                ;set as output
000942 bba1          out   __lcd_direction,r26
000943 b3b2          in    r27,__lcd_port
000944 70bf          andi  r27,0xf
000945 81a8          ld    r26,y
000946 940e 089f 	CALL __lcd_write_nibble_G101
000948 9a91          sbi   __lcd_port,__lcd_rd     ;RD=1
000949 c033      	RJMP _0x2080001
                 _lcd_init:
00094a 9892          cbi   __lcd_port,__lcd_enable ;EN=0
00094b 9890          cbi   __lcd_port,__lcd_rs     ;RS=0
00094c 81e8      	LD   R30,Y
00094d 93e0 0726 	STS  __lcd_maxx,R30
00094f 58e0      	SUBI R30,-LOW(128)
                +
000950 93e0 0722+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
000952 81e8      	LD   R30,Y
000953 54e0      	SUBI R30,-LOW(192)
                +
000954 93e0 0723+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
000956 940e 0b53 	CALL SUBOPT_0x3C
000958 940e 0b53 	CALL SUBOPT_0x3C
00095a 940e 0b53 	CALL SUBOPT_0x3C
00095c dfdd      	RCALL __long_delay_G101
00095d e2e0      	LDI  R30,LOW(32)
00095e 93ea      	ST   -Y,R30
00095f dfdf      	RCALL __lcd_init_write_G101
000960 dfd9      	RCALL __long_delay_G101
000961 e2e8      	LDI  R30,LOW(40)
000962 940e 0b59 	CALL SUBOPT_0x3D
000964 e0e4      	LDI  R30,LOW(4)
000965 940e 0b59 	CALL SUBOPT_0x3D
000967 e8e5      	LDI  R30,LOW(133)
000968 940e 0b59 	CALL SUBOPT_0x3D
00096a b3a1          in    r26,__lcd_direction
00096b 70af          andi  r26,0xf                 ;set as input
00096c bba1          out   __lcd_direction,r26
00096d 9a91          sbi   __lcd_port,__lcd_rd     ;RD=1
00096e 940e 08c0 	CALL _lcd_read_byte0_G101
000970 30e5      	CPI  R30,LOW(0x5)
000971 f011      	BREQ _0x202000B
000972 e0e0      	LDI  R30,LOW(0)
000973 c009      	RJMP _0x2080001
                 _0x202000B:
000974 940e 088e 	CALL __lcd_ready
000976 e0e6      	LDI  R30,LOW(6)
000977 93ea      	ST   -Y,R30
000978 940e 08a9 	CALL __lcd_write_data
00097a 940e 08dd 	CALL _lcd_clear
00097c e0e1      	LDI  R30,LOW(1)
                 _0x2080001:
00097d 9621      	ADIW R28,1
00097e 9508      	RET
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
00097f 91a9          ld   r26,y+
000980 91b9          ld   r27,y+
000981 27ee          clr  r30
000982 27ff          clr  r31
                 strlen0:
000983 916d          ld   r22,x+
000984 2366          tst  r22
000985 f011          breq strlen1
000986 9631          adiw r30,1
000987 cffb          rjmp strlen0
                 strlen1:
000988 9508          ret
                 _strlenf:
000989 27aa          clr  r26
00098a 27bb          clr  r27
00098b 91e9          ld   r30,y+
00098c 91f9          ld   r31,y+
                 strlenf0:
00098d 9005      	lpm  r0,z+
00098e 2000          tst  r0
00098f f011          breq strlenf1
000990 9611          adiw r26,1
000991 cffb          rjmp strlenf0
                 strlenf1:
000992 01fd          movw r30,r26
000993 9508          ret
                 
                 	.DSEG
                 _sam_num:
000500           	.BYTE 0x1
                 _i:
000501           	.BYTE 0x2
                 _lcd_data:
000503           	.BYTE 0x28
                 _mux:
00052b           	.BYTE 0x1
                 _d_flag:
00052c           	.BYTE 0x1
                 _pressure_data:
00052d           	.BYTE 0xC8
                 _pressure_sum:
0005f5           	.BYTE 0x8
                 _pressure_mean:
0005fd           	.BYTE 0x4
                 _flex_data:
000601           	.BYTE 0xC8
                 _flex_sum:
0006c9           	.BYTE 0x8
                 _flex_mean:
0006d1           	.BYTE 0x4
                 _flex_max:
0006d5           	.BYTE 0x4
                 _flex_min:
0006d9           	.BYTE 0x4
                 _pressure_max:
0006dd           	.BYTE 0x4
                 _pressure_min:
0006e1           	.BYTE 0x4
                 _E_flag:
0006e5           	.BYTE 0x4
                 _F_flag:
0006e9           	.BYTE 0x4
                 _Global_Sequence:
0006ed           	.BYTE 0x1
                 _kp:
0006ee           	.BYTE 0x4
                 _ki:
0006f2           	.BYTE 0x4
                 _kd:
0006f6           	.BYTE 0x4
                 _error_old:
0006fa           	.BYTE 0x10
                 _error_sum:
00070a           	.BYTE 0x10
                 _ang_desired:
00071a           	.BYTE 0x1
                 _ang_old:
00071b           	.BYTE 0x4
                 _delta_ang:
00071f           	.BYTE 0x1
                 __base_y_G101:
000720           	.BYTE 0x4
                 __lcd_x:
000724           	.BYTE 0x1
                 __lcd_y:
000725           	.BYTE 0x1
                 __lcd_maxx:
000726           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x0:
000994 920a      	ST   -Y,R0
000995 921a      	ST   -Y,R1
000996 93aa      	ST   -Y,R26
000997 93ea      	ST   -Y,R30
000998 b7ef      	IN   R30,SREG
000999 93ea      	ST   -Y,R30
00099a b215      	IN   R1,21
00099b 91e0 06ed 	LDS  R30,_Global_Sequence
00099d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1:
00099e 81ea      	LDD  R30,Y+2
00099f efa5      	LDI  R26,LOW(_pressure_sum)
0009a0 e0b5      	LDI  R27,HIGH(_pressure_sum)
0009a1 e0f0      	LDI  R31,0
0009a2 0fee      	LSL  R30
0009a3 1fff      	ROL  R31
0009a4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x2:
0009a5 0fea      	ADD  R30,R26
0009a6 1ffb      	ADC  R31,R27
0009a7 01cf      	MOVW R24,R30
0009a8 8160      	LD   R22,Z
0009a9 8171      	LDD  R23,Z+1
0009aa 81ea      	LDD  R30,Y+2
0009ab e3a2      	LDI  R26,LOW(50)
0009ac 9fea      	MUL  R30,R26
0009ad 01f0      	MOVW R30,R0
0009ae 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x3:
0009af 01df      	MOVW R26,R30
0009b0 27ee      	CLR  R30
0009b1 0fa1      	ADD  R26,R17
0009b2 1fbe      	ADC  R27,R30
0009b3 91ec      	LD   R30,X
0009b4 e0f0      	LDI  R31,0
0009b5 0fe6      	ADD  R30,R22
0009b6 1ff7      	ADC  R31,R23
0009b7 01dc      	MOVW R26,R24
0009b8 93ed      	ST   X+,R30
0009b9 93fc      	ST   X,R31
0009ba 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x4:
0009bb 81ea      	LDD  R30,Y+2
0009bc e0f0      	LDI  R31,0
0009bd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x5:
0009be 0fae      	ADD  R26,R30
0009bf 1fbf      	ADC  R27,R31
0009c0 940e 0c07 	CALL __GETW1P
0009c2 01df      	MOVW R26,R30
0009c3 e3e2      	LDI  R30,LOW(50)
0009c4 e0f0      	LDI  R31,HIGH(50)
0009c5 940e 0bd3 	CALL __DIVW21U
0009c7 01db      	MOVW R26,R22
0009c8 93ec      	ST   X,R30
0009c9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x6:
0009ca 0fae      	ADD  R26,R30
0009cb 1fbf      	ADC  R27,R31
0009cc e0e0      	LDI  R30,LOW(0)
0009cd e0f0      	LDI  R31,HIGH(0)
0009ce 93ed      	ST   X+,R30
0009cf 93fc      	ST   X,R31
0009d0 93e0 052c 	STS  _d_flag,R30
0009d2 81e9      	LDD  R30,Y+1
0009d3 30e0      	CPI  R30,0
0009d4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x7:
0009d5 010f      	MOVW R0,R30
0009d6 50e3      	SUBI R30,LOW(-_pressure_mean)
0009d7 4ffa      	SBCI R31,HIGH(-_pressure_mean)
0009d8 81a0      	LD   R26,Z
0009d9 01f0      	MOVW R30,R0
0009da 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x8:
0009db 81aa      	LDD  R26,Y+2
0009dc e0b0      	LDI  R27,0
0009dd 50a3      	SUBI R26,LOW(-_pressure_mean)
0009de 4fba      	SBCI R27,HIGH(-_pressure_mean)
0009df cfdb      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x9:
0009e0 931a      	ST   -Y,R17
0009e1 e010      	LDI  R17,0
0009e2 e3e2      	LDI  R30,LOW(50)
0009e3 e0f0      	LDI  R31,HIGH(50)
0009e4 93fa      	ST   -Y,R31
0009e5 93ea      	ST   -Y,R30
0009e6 940c 0b5e 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 21 TIMES, CODE SIZE REDUCTION:117 WORDS
                 SUBOPT_0xA:
0009e8 940e 08dd 	CALL _lcd_clear
0009ea e0e0      	LDI  R30,LOW(0)
0009eb 93ea      	ST   -Y,R30
0009ec 93ea      	ST   -Y,R30
0009ed 940c 08c9 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
                +
0009ef ecec     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0009f0 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0009f1 93fa      	ST   -Y,R31
0009f2 93ea      	ST   -Y,R30
0009f3 940c 0929 	JMP  _lcd_putsf
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:36 WORDS
                 SUBOPT_0xC:
0009f5 e0e0      	LDI  R30,LOW(0)
0009f6 93ea      	ST   -Y,R30
0009f7 e0e1      	LDI  R30,LOW(1)
0009f8 93ea      	ST   -Y,R30
0009f9 940e 08c9 	CALL _lcd_gotoxy
0009fb e0e3      	LDI  R30,LOW(_lcd_data)
0009fc e0f5      	LDI  R31,HIGH(_lcd_data)
0009fd 93fa      	ST   -Y,R31
0009fe 93ea      	ST   -Y,R30
                +
0009ff ede4     +LDI R30 , LOW ( 2 * _0x0 + ( 8 ) )
000a00 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 8 ) )
                 	__POINTW1FN _0x0,8
000a01 93fa      	ST   -Y,R31
000a02 93ea      	ST   -Y,R30
000a03 2fe1      	MOV  R30,R17
000a04 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 18 TIMES, CODE SIZE REDUCTION:218 WORDS
                 SUBOPT_0xD:
000a05 27ff      	CLR  R31
000a06 2766      	CLR  R22
000a07 2777      	CLR  R23
000a08 940e 0c1e 	CALL __PUTPARD1
000a0a e084      	LDI  R24,4
000a0b 940e 0854 	CALL _sprintf
000a0d 9628      	ADIW R28,8
000a0e e0e3      	LDI  R30,LOW(_lcd_data)
000a0f e0f5      	LDI  R31,HIGH(_lcd_data)
000a10 93fa      	ST   -Y,R31
000a11 93ea      	ST   -Y,R30
000a12 940c 091c 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:45 WORDS
                 SUBOPT_0xE:
000a14 e0e4      	LDI  R30,LOW(4)
000a15 93ea      	ST   -Y,R30
000a16 e0e1      	LDI  R30,LOW(1)
000a17 93ea      	ST   -Y,R30
000a18 940e 08c9 	CALL _lcd_gotoxy
000a1a e0e3      	LDI  R30,LOW(_lcd_data)
000a1b e0f5      	LDI  R31,HIGH(_lcd_data)
000a1c 93fa      	ST   -Y,R31
000a1d 93ea      	ST   -Y,R30
                +
000a1e ede4     +LDI R30 , LOW ( 2 * _0x0 + ( 8 ) )
000a1f e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 8 ) )
                 	__POINTW1FN _0x0,8
000a20 93fa      	ST   -Y,R31
000a21 93ea      	ST   -Y,R30
000a22 2fe1      	MOV  R30,R17
000a23 e0f0      	LDI  R31,0
000a24 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
000a25 ece8      	LDI  R30,LOW(200)
000a26 e0f0      	LDI  R31,HIGH(200)
000a27 93fa      	ST   -Y,R31
000a28 93ea      	ST   -Y,R30
000a29 940c 0b5e 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
                +
000a2b ede7     +LDI R30 , LOW ( 2 * _0x0 + ( 11 ) )
000a2c e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 11 ) )
                 	__POINTW1FN _0x0,11
000a2d 93fa      	ST   -Y,R31
000a2e 93ea      	ST   -Y,R30
000a2f 940c 0929 	JMP  _lcd_putsf
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 15 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x11:
000a31 2fe1      	MOV  R30,R17
000a32 e0f0      	LDI  R31,0
000a33 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x12:
000a34 2fa1      	MOV  R26,R17
000a35 e0b0      	LDI  R27,0
000a36 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x13:
000a37 e0e7      	LDI  R30,LOW(7)
000a38 93ea      	ST   -Y,R30
000a39 e0e0      	LDI  R30,LOW(0)
000a3a 93ea      	ST   -Y,R30
000a3b 940e 08c9 	CALL _lcd_gotoxy
000a3d e0e3      	LDI  R30,LOW(_lcd_data)
000a3e e0f5      	LDI  R31,HIGH(_lcd_data)
000a3f 93fa      	ST   -Y,R31
000a40 93ea      	ST   -Y,R30
                +
000a41 ede4     +LDI R30 , LOW ( 2 * _0x0 + ( 8 ) )
000a42 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 8 ) )
                 	__POINTW1FN _0x0,8
000a43 93fa      	ST   -Y,R31
000a44 93ea      	ST   -Y,R30
000a45 2fe1      	MOV  R30,R17
000a46 cfbe      	RJMP SUBOPT_0xD
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x14:
000a47 e6e4      	LDI  R30,LOW(100)
000a48 e0f0      	LDI  R31,HIGH(100)
000a49 93fa      	ST   -Y,R31
000a4a 93ea      	ST   -Y,R30
000a4b 940c 0b5e 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x15:
000a4d 81ea      	LDD  R30,Y+2
000a4e eca9      	LDI  R26,LOW(_flex_sum)
000a4f e0b6      	LDI  R27,HIGH(_flex_sum)
000a50 e0f0      	LDI  R31,0
000a51 0fee      	LSL  R30
000a52 1fff      	ROL  R31
000a53 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x16:
000a54 010f      	MOVW R0,R30
000a55 52ef      	SUBI R30,LOW(-_flex_mean)
000a56 4ff9      	SBCI R31,HIGH(-_flex_mean)
000a57 81a0      	LD   R26,Z
000a58 01f0      	MOVW R30,R0
000a59 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x17:
000a5a 81aa      	LDD  R26,Y+2
000a5b e0b0      	LDI  R27,0
000a5c 52af      	SUBI R26,LOW(-_flex_mean)
000a5d 4fb9      	SBCI R27,HIGH(-_flex_mean)
000a5e cf5c      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x18:
000a5f e3e2      	LDI  R30,LOW(50)
000a60 e0f0      	LDI  R31,HIGH(50)
000a61 93fa      	ST   -Y,R31
000a62 93ea      	ST   -Y,R30
000a63 940c 0b5e 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x19:
000a65 e1e4      	LDI  R30,LOW(20)
000a66 bfe7      	OUT  0x37,R30
000a67 93e0 007d 	STS  125,R30
000a69 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1A:
000a6a e1e3      	LDI  R30,LOW(19)
000a6b bde7      	OUT  0x27,R30
000a6c e8e7      	LDI  R30,LOW(135)
000a6d bde6      	OUT  0x26,R30
000a6e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1B:
000a6f 940e 0c0f 	CALL __GETD1S0
000a71 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1C:
000a72 940e 0c19 	CALL __PUTD1S0
000a74 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x1D:
                +
000a75 edef     +LDI R30 , LOW ( 2 * _0x0 + ( 19 ) )
000a76 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 19 ) )
                 	__POINTW1FN _0x0,19
000a77 93fa      	ST   -Y,R31
000a78 93ea      	ST   -Y,R30
000a79 940e 0929 	CALL _lcd_putsf
000a7b e0e0      	LDI  R30,LOW(0)
000a7c 93ea      	ST   -Y,R30
000a7d e0e1      	LDI  R30,LOW(1)
000a7e 93ea      	ST   -Y,R30
000a7f 940e 08c9 	CALL _lcd_gotoxy
000a81 e0e3      	LDI  R30,LOW(_lcd_data)
000a82 e0f5      	LDI  R31,HIGH(_lcd_data)
000a83 93fa      	ST   -Y,R31
000a84 93ea      	ST   -Y,R30
                +
000a85 eee4     +LDI R30 , LOW ( 2 * _0x0 + ( 24 ) )
000a86 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 24 ) )
                 	__POINTW1FN _0x0,24
000a87 93fa      	ST   -Y,R31
000a88 93ea      	ST   -Y,R30
000a89 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1E:
000a8a 940e 0c1e 	CALL __PUTPARD1
000a8c e084      	LDI  R24,4
000a8d 940e 0854 	CALL _sprintf
000a8f 9628      	ADIW R28,8
000a90 e0e3      	LDI  R30,LOW(_lcd_data)
000a91 e0f5      	LDI  R31,HIGH(_lcd_data)
000a92 93fa      	ST   -Y,R31
000a93 93ea      	ST   -Y,R30
000a94 940e 091c 	CALL _lcd_puts
000a96 cfb0      	RJMP SUBOPT_0x14
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1F:
000a97 e0e0      	LDI  R30,LOW(0)
000a98 bfe7      	OUT  0x37,R30
000a99 93e0 007d 	STS  125,R30
000a9b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x20:
000a9c e0e0      	LDI  R30,LOW(0)
000a9d bdeb      	OUT  0x2B,R30
000a9e bdea      	OUT  0x2A,R30
000a9f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x21:
000aa0 940e 0b97 	CALL __ASRW8
000aa2 bde9      	OUT  0x29,R30
000aa3 e3a2      	LDI  R26,LOW(50)
000aa4 020a      	MULS R16,R26
000aa5 01f0      	MOVW R30,R0
000aa6 bde8      	OUT  0x28,R30
000aa7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x22:
000aa8 e0e0      	LDI  R30,LOW(0)
000aa9 bde9      	OUT  0x29,R30
000aaa bde8      	OUT  0x28,R30
000aab 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x23:
000aac 2fe1      	MOV  R30,R17
000aad e0a1      	LDI  R26,LOW(1)
000aae e0b0      	LDI  R27,HIGH(1)
000aaf 940e 0b82 	CALL __LSLW12
000ab1 2fa0      	MOV  R26,R16
000ab2 e0b0      	LDI  R27,0
000ab3 23ea      	AND  R30,R26
000ab4 23fb      	AND  R31,R27
000ab5 9730      	SBIW R30,0
000ab6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x24:
000ab7 51e7      	SUBI R30,LOW(-_F_flag)
000ab8 4ff9      	SBCI R31,HIGH(-_F_flag)
000ab9 e0a0      	LDI  R26,LOW(0)
000aba 83a0      	STD  Z+0,R26
000abb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x25:
000abc 2fe1      	MOV  R30,R17
000abd e1a0      	LDI  R26,LOW(16)
000abe e0b0      	LDI  R27,HIGH(16)
000abf 940e 0b82 	CALL __LSLW12
000ac1 2fa0      	MOV  R26,R16
000ac2 e0b0      	LDI  R27,0
000ac3 23ea      	AND  R30,R26
000ac4 23fb      	AND  R31,R27
000ac5 9730      	SBIW R30,0
000ac6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x26:
000ac7 51eb      	SUBI R30,LOW(-_E_flag)
000ac8 4ff9      	SBCI R31,HIGH(-_E_flag)
000ac9 e0a0      	LDI  R26,LOW(0)
000aca 83a0      	STD  Z+0,R26
000acb cf65      	RJMP SUBOPT_0x11
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x27:
000acc 93ea      	ST   -Y,R30
000acd e0e1      	LDI  R30,LOW(1)
000ace 93ea      	ST   -Y,R30
000acf 940c 08c9 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x28:
000ad1 81e8      	LD   R30,Y
000ad2 e0f0      	LDI  R31,0
000ad3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 22 TIMES, CODE SIZE REDUCTION:39 WORDS
                 SUBOPT_0x29:
000ad4 93fa      	ST   -Y,R31
000ad5 93ea      	ST   -Y,R30
000ad6 940c 0929 	JMP  _lcd_putsf
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2A:
000ad8 010f      	MOVW R0,R30
000ad9 51eb      	SUBI R30,LOW(-_E_flag)
000ada 4ff9      	SBCI R31,HIGH(-_E_flag)
000adb 81a0      	LD   R26,Z
000adc 30a0      	CPI  R26,LOW(0x0)
000add 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2B:
000ade 01f0      	MOVW R30,R0
000adf 51e7      	SUBI R30,LOW(-_F_flag)
000ae0 4ff9      	SBCI R31,HIGH(-_F_flag)
000ae1 81a0      	LD   R26,Z
000ae2 30a0      	CPI  R26,LOW(0x0)
000ae3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x2C:
000ae4 93ea      	ST   -Y,R30
000ae5 e0e0      	LDI  R30,LOW(0)
000ae6 93ea      	ST   -Y,R30
000ae7 940c 08c9 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:29 WORDS
                 SUBOPT_0x2D:
000ae9 e0e3      	LDI  R30,LOW(_lcd_data)
000aea e0f5      	LDI  R31,HIGH(_lcd_data)
000aeb 93fa      	ST   -Y,R31
000aec 93ea      	ST   -Y,R30
                +
000aed ede4     +LDI R30 , LOW ( 2 * _0x0 + ( 8 ) )
000aee e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 8 ) )
                 	__POINTW1FN _0x0,8
000aef 93fa      	ST   -Y,R31
000af0 93ea      	ST   -Y,R30
000af1 91e0 06ed 	LDS  R30,_Global_Sequence
000af3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2E:
000af4 e0e0      	LDI  R30,LOW(0)
000af5 93ea      	ST   -Y,R30
000af6 91e0 06ed 	LDS  R30,_Global_Sequence
000af8 93ea      	ST   -Y,R30
000af9 940e 03d7 	CALL _disp
000afb e0e5      	LDI  R30,LOW(5)
000afc cfcf      	RJMP SUBOPT_0x27
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2F:
000afd e0f0      	LDI  R31,0
000afe 51eb      	SUBI R30,LOW(-_E_flag)
000aff 4ff9      	SBCI R31,HIGH(-_E_flag)
000b00 81e0      	LD   R30,Z
000b01 cf03      	RJMP SUBOPT_0xD
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x30:
000b02 e0f0      	LDI  R31,0
000b03 51e7      	SUBI R30,LOW(-_F_flag)
000b04 4ff9      	SBCI R31,HIGH(-_F_flag)
000b05 81e0      	LD   R30,Z
000b06 cefe      	RJMP SUBOPT_0xD
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x31:
000b07 91e0 06ed 	LDS  R30,_Global_Sequence
000b09 e0f0      	LDI  R31,0
000b0a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x32:
000b0b 91e0 0501 	LDS  R30,_i
000b0d 91f0 0502 	LDS  R31,_i+1
000b0f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x33:
000b10 51eb      	SUBI R30,LOW(-_E_flag)
000b11 4ff9      	SBCI R31,HIGH(-_E_flag)
000b12 e0a0      	LDI  R26,LOW(0)
000b13 83a0      	STD  Z+0,R26
000b14 dff6      	RCALL SUBOPT_0x32
000b15 cfa1      	RJMP SUBOPT_0x24
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x34:
000b16 e0a1      	LDI  R26,LOW(_i)
000b17 e0b5      	LDI  R27,HIGH(_i)
000b18 91ed      	LD   R30,X+
000b19 91fd      	LD   R31,X+
000b1a 9631      	ADIW R30,1
000b1b 93fe      	ST   -X,R31
000b1c 93ee      	ST   -X,R30
000b1d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x35:
000b1e e0e3      	LDI  R30,LOW(_lcd_data)
000b1f e0f5      	LDI  R31,HIGH(_lcd_data)
000b20 93fa      	ST   -Y,R31
000b21 93ea      	ST   -Y,R30
000b22 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x36:
000b23 932a      	ST   -Y,R18
000b24 85ed      	LDD  R30,Y+13
000b25 85fe      	LDD  R31,Y+13+1
000b26 93fa      	ST   -Y,R31
000b27 93ea      	ST   -Y,R30
000b28 89e9      	LDD  R30,Y+17
000b29 89fa      	LDD  R31,Y+17+1
000b2a 9509      	ICALL
000b2b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x37:
000b2c 89e8      	LDD  R30,Y+16
000b2d 89f9      	LDD  R31,Y+16+1
000b2e 9734      	SBIW R30,4
000b2f 8be8      	STD  Y+16,R30
000b30 8bf9      	STD  Y+16+1,R31
000b31 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x38:
000b32 85ed      	LDD  R30,Y+13
000b33 85fe      	LDD  R31,Y+13+1
000b34 93fa      	ST   -Y,R31
000b35 93ea      	ST   -Y,R30
000b36 89e9      	LDD  R30,Y+17
000b37 89fa      	LDD  R31,Y+17+1
000b38 9509      	ICALL
000b39 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x39:
000b3a 89a8      	LDD  R26,Y+16
000b3b 89b9      	LDD  R27,Y+16+1
000b3c 9614      	ADIW R26,4
000b3d 940e 0c07 	CALL __GETW1P
000b3f 83ee      	STD  Y+6,R30
000b40 83ff      	STD  Y+6+1,R31
000b41 93fa      	ST   -Y,R31
000b42 93ea      	ST   -Y,R30
000b43 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3A:
000b44 89a8      	LDD  R26,Y+16
000b45 89b9      	LDD  R27,Y+16+1
000b46 9614      	ADIW R26,4
000b47 940e 0c07 	CALL __GETW1P
000b49 87ea      	STD  Y+10,R30
000b4a 87fb      	STD  Y+10+1,R31
000b4b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3B:
000b4c 01de      	MOVW R26,R28
000b4d 961c      	ADIW R26,12
000b4e 940e 0b6a 	CALL __ADDW2R15
000b50 940e 0c07 	CALL __GETW1P
000b52 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3C:
000b53 940e 093a 	CALL __long_delay_G101
000b55 e3e0      	LDI  R30,LOW(48)
000b56 93ea      	ST   -Y,R30
000b57 940c 093f 	JMP  __lcd_init_write_G101
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3D:
000b59 93ea      	ST   -Y,R30
000b5a 940e 08a9 	CALL __lcd_write_data
000b5c 940c 093a 	JMP  __long_delay_G101
                 
                 
                 	.CSEG
                 _delay_ms:
000b5e 91e9      	ld   r30,y+
000b5f 91f9      	ld   r31,y+
000b60 9630      	adiw r30,0
000b61 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000b62 ea80     +LDI R24 , LOW ( 0xFA0 )
000b63 e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
000b64 9701     +SBIW R24 , 1
000b65 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
000b66 95a8      	wdr
000b67 9731      	sbiw r30,1
000b68 f7c9      	brne __delay_ms0
                 __delay_ms1:
000b69 9508      	ret
                 
                 __ADDW2R15:
000b6a 2400      	CLR  R0
000b6b 0daf      	ADD  R26,R15
000b6c 1db0      	ADC  R27,R0
000b6d 9508      	RET
                 
                 __ANEGW1:
000b6e 95f1      	NEG  R31
000b6f 95e1      	NEG  R30
000b70 40f0      	SBCI R31,0
000b71 9508      	RET
                 
                 __ANEGD1:
000b72 95f0      	COM  R31
000b73 9560      	COM  R22
000b74 9570      	COM  R23
000b75 95e1      	NEG  R30
000b76 4fff      	SBCI R31,-1
000b77 4f6f      	SBCI R22,-1
000b78 4f7f      	SBCI R23,-1
000b79 9508      	RET
                 
                 __LSLB12:
000b7a 23ee      	TST  R30
000b7b 2e0e      	MOV  R0,R30
000b7c 2fea      	MOV  R30,R26
000b7d f019      	BREQ __LSLB12R
                 __LSLB12L:
000b7e 0fee      	LSL  R30
000b7f 940a      	DEC  R0
000b80 f7e9      	BRNE __LSLB12L
                 __LSLB12R:
000b81 9508      	RET
                 
                 __LSLW12:
000b82 23ee      	TST  R30
000b83 2e0e      	MOV  R0,R30
000b84 01fd      	MOVW R30,R26
000b85 f021      	BREQ __LSLW12R
                 __LSLW12L:
000b86 0fee      	LSL  R30
000b87 1fff      	ROL  R31
000b88 940a      	DEC  R0
000b89 f7e1      	BRNE __LSLW12L
                 __LSLW12R:
000b8a 9508      	RET
                 
                 __ASRD12:
000b8b 23ee      	TST  R30
000b8c 2e0e      	MOV  R0,R30
000b8d 01fd      	MOVW R30,R26
000b8e 01bc      	MOVW R22,R24
000b8f f031      	BREQ __ASRD12R
                 __ASRD12L:
000b90 9575      	ASR  R23
000b91 9567      	ROR  R22
000b92 95f7      	ROR  R31
000b93 95e7      	ROR  R30
000b94 940a      	DEC  R0
000b95 f7d1      	BRNE __ASRD12L
                 __ASRD12R:
000b96 9508      	RET
                 
                 __ASRW8:
000b97 2fef      	MOV  R30,R31
000b98 27ff      	CLR  R31
000b99 fde7      	SBRC R30,7
000b9a efff      	SER  R31
000b9b 9508      	RET
                 
                 __CWD1:
000b9c 2f6f      	MOV  R22,R31
000b9d 0f66      	ADD  R22,R22
000b9e 0b66      	SBC  R22,R22
000b9f 2f76      	MOV  R23,R22
000ba0 9508      	RET
                 
                 __MULW12U:
000ba1 9ffa      	MUL  R31,R26
000ba2 2df0      	MOV  R31,R0
000ba3 9feb      	MUL  R30,R27
000ba4 0df0      	ADD  R31,R0
000ba5 9fea      	MUL  R30,R26
000ba6 2de0      	MOV  R30,R0
000ba7 0df1      	ADD  R31,R1
000ba8 9508      	RET
                 
                 __MULD12U:
000ba9 9f7a      	MUL  R23,R26
000baa 2d70      	MOV  R23,R0
000bab 9f6b      	MUL  R22,R27
000bac 0d70      	ADD  R23,R0
000bad 9ff8      	MUL  R31,R24
000bae 0d70      	ADD  R23,R0
000baf 9fe9      	MUL  R30,R25
000bb0 0d70      	ADD  R23,R0
000bb1 9f6a      	MUL  R22,R26
000bb2 2d60      	MOV  R22,R0
000bb3 0d71      	ADD  R23,R1
000bb4 9ffb      	MUL  R31,R27
000bb5 0d60      	ADD  R22,R0
000bb6 1d71      	ADC  R23,R1
000bb7 9fe8      	MUL  R30,R24
000bb8 0d60      	ADD  R22,R0
000bb9 1d71      	ADC  R23,R1
000bba 2788      	CLR  R24
000bbb 9ffa      	MUL  R31,R26
000bbc 2df0      	MOV  R31,R0
000bbd 0d61      	ADD  R22,R1
000bbe 1f78      	ADC  R23,R24
000bbf 9feb      	MUL  R30,R27
000bc0 0df0      	ADD  R31,R0
000bc1 1d61      	ADC  R22,R1
000bc2 1f78      	ADC  R23,R24
000bc3 9fea      	MUL  R30,R26
000bc4 2de0      	MOV  R30,R0
000bc5 0df1      	ADD  R31,R1
000bc6 1f68      	ADC  R22,R24
000bc7 1f78      	ADC  R23,R24
000bc8 9508      	RET
                 
                 __MULW12:
000bc9 d01c      	RCALL __CHKSIGNW
000bca dfd6      	RCALL __MULW12U
000bcb f40e      	BRTC __MULW121
000bcc dfa1      	RCALL __ANEGW1
                 __MULW121:
000bcd 9508      	RET
                 
                 __MULD12:
000bce d025      	RCALL __CHKSIGND
000bcf dfd9      	RCALL __MULD12U
000bd0 f40e      	BRTC __MULD121
000bd1 dfa0      	RCALL __ANEGD1
                 __MULD121:
000bd2 9508      	RET
                 
                 __DIVW21U:
000bd3 2400      	CLR  R0
000bd4 2411      	CLR  R1
000bd5 e190      	LDI  R25,16
                 __DIVW21U1:
000bd6 0faa      	LSL  R26
000bd7 1fbb      	ROL  R27
000bd8 1c00      	ROL  R0
000bd9 1c11      	ROL  R1
000bda 1a0e      	SUB  R0,R30
000bdb 0a1f      	SBC  R1,R31
000bdc f418      	BRCC __DIVW21U2
000bdd 0e0e      	ADD  R0,R30
000bde 1e1f      	ADC  R1,R31
000bdf c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000be0 60a1      	SBR  R26,1
                 __DIVW21U3:
000be1 959a      	DEC  R25
000be2 f799      	BRNE __DIVW21U1
000be3 01fd      	MOVW R30,R26
000be4 01d0      	MOVW R26,R0
000be5 9508      	RET
                 
                 __CHKSIGNW:
000be6 94e8      	CLT
000be7 fff7      	SBRS R31,7
000be8 c002      	RJMP __CHKSW1
000be9 df84      	RCALL __ANEGW1
000bea 9468      	SET
                 __CHKSW1:
000beb ffb7      	SBRS R27,7
000bec c006      	RJMP __CHKSW2
000bed 95a0      	COM  R26
000bee 95b0      	COM  R27
000bef 9611      	ADIW R26,1
000bf0 f800      	BLD  R0,0
000bf1 9403      	INC  R0
000bf2 fa00      	BST  R0,0
                 __CHKSW2:
000bf3 9508      	RET
                 
                 __CHKSIGND:
000bf4 94e8      	CLT
000bf5 ff77      	SBRS R23,7
000bf6 c002      	RJMP __CHKSD1
000bf7 df7a      	RCALL __ANEGD1
000bf8 9468      	SET
                 __CHKSD1:
000bf9 ff97      	SBRS R25,7
000bfa c00b      	RJMP __CHKSD2
000bfb 2400      	CLR  R0
000bfc 95a0      	COM  R26
000bfd 95b0      	COM  R27
000bfe 9580      	COM  R24
000bff 9590      	COM  R25
000c00 9611      	ADIW R26,1
000c01 1d80      	ADC  R24,R0
000c02 1d90      	ADC  R25,R0
000c03 f800      	BLD  R0,0
000c04 9403      	INC  R0
000c05 fa00      	BST  R0,0
                 __CHKSD2:
000c06 9508      	RET
                 
                 __GETW1P:
000c07 91ed      	LD   R30,X+
000c08 91fc      	LD   R31,X
000c09 9711      	SBIW R26,1
000c0a 9508      	RET
                 
                 __GETW1PF:
000c0b 9005      	LPM  R0,Z+
000c0c 91f4      	LPM  R31,Z
000c0d 2de0      	MOV  R30,R0
000c0e 9508      	RET
                 
                 __GETD1S0:
000c0f 81e8      	LD   R30,Y
000c10 81f9      	LDD  R31,Y+1
000c11 816a      	LDD  R22,Y+2
000c12 817b      	LDD  R23,Y+3
000c13 9508      	RET
                 
                 __GETD2S0:
000c14 81a8      	LD   R26,Y
000c15 81b9      	LDD  R27,Y+1
000c16 818a      	LDD  R24,Y+2
000c17 819b      	LDD  R25,Y+3
000c18 9508      	RET
                 
                 __PUTD1S0:
000c19 83e8      	ST   Y,R30
000c1a 83f9      	STD  Y+1,R31
000c1b 836a      	STD  Y+2,R22
000c1c 837b      	STD  Y+3,R23
000c1d 9508      	RET
                 
                 __PUTPARD1:
000c1e 937a      	ST   -Y,R23
000c1f 936a      	ST   -Y,R22
000c20 93fa      	ST   -Y,R31
000c21 93ea      	ST   -Y,R30
000c22 9508      	RET
                 
                 __SAVELOCR6:
000c23 935a      	ST   -Y,R21
                 __SAVELOCR5:
000c24 934a      	ST   -Y,R20
                 __SAVELOCR4:
000c25 933a      	ST   -Y,R19
                 __SAVELOCR3:
000c26 932a      	ST   -Y,R18
                 __SAVELOCR2:
000c27 931a      	ST   -Y,R17
000c28 930a      	ST   -Y,R16
000c29 9508      	RET
                 
                 __LOADLOCR6:
000c2a 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000c2b 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000c2c 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000c2d 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000c2e 8119      	LDD  R17,Y+1
000c2f 8108      	LD   R16,Y
000c30 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  66 r1 :  18 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  90 r17: 113 r18:  29 r19:   8 r20:   9 r21:  17 r22:  37 r23:  27 
r24:  30 r25:  13 r26: 220 r27:  80 r28:  18 r29:   1 r30: 769 r31: 262 
x  :  46 y  : 340 z  :  57 
Registers used: 22 out of 35 (62.9%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  19 add   :  24 
adiw  :  31 and   :   4 andi  :  15 asr   :   1 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  38 
brge  :   4 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  16 
brlt  :   3 brmi  :   1 brne  :  51 brpl  :   1 brsh  :  14 brtc  :   2 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   2 call  : 319 
cbi   :  10 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  19 cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :   9 
cp    :  14 cpc   :  21 cpi   :  73 cpse  :   0 dec   :   6 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 
ijmp  :   0 in    :  18 inc   :   2 jmp   :  55 ld    :  86 ldd   : 101 
ldi   : 383 lds   :  29 lpm   :  16 lsl   :   5 lsr   :   0 mov   :  39 
movw  :  46 mul   :  17 muls  :   2 mulsu :   0 neg   :   3 nop   :   0 
or    :   3 ori   :  17 out   :  70 pop   :   6 push  :   6 rcall :  49 
ret   :  83 reti  :   3 rjmp  : 149 rol   :   6 ror   :   3 sbc   :   3 
sbci  :  65 sbi   :  10 sbic  :  12 sbis  :  47 sbiw  :  27 sbr   :   1 
sbrc  :   4 sbrs  :  14 sec   :   0 seh   :   0 sei   :   1 sen   :   0 
ser   :   1 ses   :   0 set   :   3 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    : 199 std   :  44 sts   :  60 sub   :   2 subi  :  93 
swap  :   2 tst   :   7 wdr   :   1 
Instructions used: 75 out of 117 (64.1%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001862   5920    322   6242  131072   4.8%
[.dseg] 0x000100 0x000727      0    551    551    4351  12.7%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 1 warnings
