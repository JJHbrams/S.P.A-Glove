
AVRASM ver. 2.1.30  C:\Users\MrJohd\Desktop\Task\Á¹¾÷ÀÛÇ°\AVR_code\SPAglove\List\SPAglove.asm Fri May 11 14:13:53 2018

                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega128
                 ;Program type             : Application
                 ;Clock frequency          : 16.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1024 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: Yes
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : Off
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 00a2 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 00d5 	JMP  _timer1_compa_isr
00001a 940c 0000 	JMP  0x00
00001c 940c 00d8 	JMP  _timer1_ovf_isr
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 00df 	JMP  _adc_isr
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 00dd 	JMP  _timer3_compa_isr
000038 940c 0000 	JMP  0x00
00003a 940c 00de 	JMP  _timer3_ovf_isr
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
00004f ffff      	.DB  0xFF,0xFF
                 _0x4:
000050 ffff
000051 ffff      	.DB  0xFF,0xFF,0xFF,0xFF
                 _0x5:
000052 ffff
000053 ffff      	.DB  0xFF,0xFF,0xFF,0xFF
                 _0x0:
000054 6554
000055 7473
000056 6e69
000057 0067      	.DB  0x54,0x65,0x73,0x74,0x69,0x6E,0x67,0x0
000058 6425
000059 5400
00005a 6e75
00005b 696e      	.DB  0x25,0x64,0x0,0x54,0x75,0x6E,0x6E,0x69
00005c 676e
00005d 5400
00005e 5345
00005f 0054      	.DB  0x6E,0x67,0x0,0x54,0x45,0x53,0x54,0x0
000060 2e31
000061 7250
000062 7365
000063 7573      	.DB  0x31,0x2E,0x50,0x72,0x65,0x73,0x73,0x75
000064 6572
000065 5420
000066 5345
000067 0054      	.DB  0x72,0x65,0x20,0x54,0x45,0x53,0x54,0x0
000068 2e32
000069 7250
00006a 7365
00006b 7573      	.DB  0x32,0x2E,0x50,0x72,0x65,0x73,0x73,0x75
00006c 6572
00006d 5420
00006e 6e75
00006f 696e      	.DB  0x72,0x65,0x20,0x54,0x75,0x6E,0x6E,0x69
000070 676e
000071 3300
000072 462e
000073 656c      	.DB  0x6E,0x67,0x0,0x33,0x2E,0x46,0x6C,0x65
000074 2078
000075 4554
000076 5453
000077 3400      	.DB  0x78,0x20,0x54,0x45,0x53,0x54,0x0,0x34
000078 462e
000079 656c
00007a 2078
00007b 7554      	.DB  0x2E,0x46,0x6C,0x65,0x78,0x20,0x54,0x75
00007c 6e6e
00007d 6e69
00007e 0067
00007f 2e35      	.DB  0x6E,0x6E,0x69,0x6E,0x67,0x0,0x35,0x2E
000080 5750
000081 204d
000082 4554
000083 5453      	.DB  0x50,0x57,0x4D,0x20,0x54,0x45,0x53,0x54
000084 3600
000085 502e
000086 4d55
000087 2050      	.DB  0x0,0x36,0x2E,0x50,0x55,0x4D,0x50,0x20
000088 4554
000089 5453
00008a 3700
00008b 4f2e      	.DB  0x54,0x45,0x53,0x54,0x0,0x37,0x2E,0x4F
00008c 6472
00008d 7265
00008e 5420
00008f 5345      	.DB  0x72,0x64,0x65,0x72,0x20,0x54,0x45,0x53
000090 0054
000091 2a2a
000092 5242
000093 4145      	.DB  0x54,0x0,0x2A,0x2A,0x42,0x52,0x45,0x41
000094 214b
000095 2a2a
C:\Users\MrJohd\Desktop\Task\Á¹¾÷ÀÛÇ°\AVR_code\SPAglove\List\SPAglove.asm(1132): warning: .cseg .db misalignment - padding zero byte
000096 0000      	.DB  0x4B,0x21,0x2A,0x2A,0x0
                 _0x2020003:
000097 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000098 0004      	.DW  0x04
000099 0605      	.DW  _pressure_min
00009a 00a0      	.DW  _0x4*2
                 
00009b 0004      	.DW  0x04
00009c 06e1      	.DW  _flex_min
00009d 00a4      	.DW  _0x5*2
                 
00009e 0002      	.DW  0x02
00009f 06e5      	.DW  __base_y_G101
0000a0 012e      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
0000a1 0000      	.DW  0
                 
                 __RESET:
0000a2 94f8      	CLI
0000a3 27ee      	CLR  R30
0000a4 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000a5 e0f1      	LDI  R31,1
0000a6 bff5      	OUT  MCUCR,R31
0000a7 bfe5      	OUT  MCUCR,R30
0000a8 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
0000aa e1f8      	LDI  R31,0x18
0000ab bdf1      	OUT  WDTCR,R31
0000ac bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
0000ad e08d      	LDI  R24,(14-2)+1
0000ae e0a2      	LDI  R26,2
0000af 27bb      	CLR  R27
                 __CLEAR_REG:
0000b0 93ed      	ST   X+,R30
0000b1 958a      	DEC  R24
0000b2 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000b3 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000b4 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000b5 e0a0      	LDI  R26,LOW(__SRAM_START)
0000b6 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
0000b7 93ed      	ST   X+,R30
0000b8 9701      	SBIW R24,1
0000b9 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000ba e3e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000bb e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000bc 9185      	LPM  R24,Z+
0000bd 9195      	LPM  R25,Z+
0000be 9700      	SBIW R24,0
0000bf f061      	BREQ __GLOBAL_INI_END
0000c0 91a5      	LPM  R26,Z+
0000c1 91b5      	LPM  R27,Z+
0000c2 9005      	LPM  R0,Z+
0000c3 9015      	LPM  R1,Z+
0000c4 01bf      	MOVW R22,R30
0000c5 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000c6 9005      	LPM  R0,Z+
0000c7 920d      	ST   X+,R0
0000c8 9701      	SBIW R24,1
0000c9 f7e1      	BRNE __GLOBAL_INI_LOOP
0000ca 01fb      	MOVW R30,R22
0000cb cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
0000cc bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000cd efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000ce bfed      	OUT  SPL,R30
0000cf e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000d0 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000d1 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000d2 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000d3 940c 02db 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;/*****************************************************
                 ;This program was produced by the JJH, KYY and Johnadan
                 ;CodeWizardAVR V2.05.0 Professional
                 ;Automatic Program Generator
                 ;ï¿½ Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project : 2018 ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ç° 12ï¿½ï¿½ - S.P.A glove
                 ;Version : 0.0.0
                 ;Date    : 2018-05-03
                 ;Author  : JJH
                 ;Company : Chungnam National University
                 ;Comments: Holy Fucking Shit...
                 ;
                 ;
                 ;Chip type               : Atmega128
                 ;AVR Core Clock frequency: 16.000000 MHz
                 ;*****************************************************/
                 ;
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;
                 ;// Alphanumeric LCD Module functions
                 ;#include <lcd.h>
                 ;#asm
                  .equ __lcd_port = 0x12 //PORTD 8
                 ; 0000 001C #endasm
                 ;// About ADC
                 ;#define ADC_VREF_TYPE 0x60
                 ;#define NUM_SAMP  50
                 ;//About Switch
                 ;#define Left_switch_on    (!PINE.1)
                 ;#define Middle_switch_on  (!PINE.2)
                 ;#define Right_switch_on   (!PINE.3)
                 ;#define Left_switch_off   (PINE.1)
                 ;#define Middle_switch_off (PINE.2)
                 ;#define Right_switch_off  (PINE.3)
                 ;//About order
                 ;#define Up_thumb    (!PINA.0)
                 ;#define Down_thumb  (!PINA.1)
                 ;#define Up_index    (!PINA.2)
                 ;#define Down_index  (!PINA.3)
                 ;#define Up_middle   (!PINA.4)
                 ;#define Down_middle (!PINA.5)
                 ;#define Up_rest     (!PINA.6)
                 ;#define Down_rest   (!PINA.7)
                 ;//About In/Out ratio
                 ;#define FLEXTION   OCR1A=150, OCR3AH=50>>8, OCR3AL=50  //ë§ì´ ë¤ì´ì¤ê³  ì ê²ëê°
                 ;#define EXTENSION  OCR1A=50, OCR3AH=150>>8, OCR3AL=150  //ì ê² ë¤ì´ì¤ê³  ë§ì´ ëê°
                 ;//*****************************************************************************************************************
                 ;// ****** Declare your global variables here  ******
                 ;unsigned char sam_num = 0; // counting variable for ADC interrupt
                 ;int i,j,k;
                 ;//*****************************************************************************************************************
                 ;// LCD
                 ;unsigned char lcd_data[40];
                 ;//*****************************************************************************************************************
                 ;// ADC
                 ;//unsigned char adc_data[4][100] = {0}; //adc ï¿½ï¿½ IR/ï¿½Ð·Â¼ï¿½ï¿½ï¿½/cdsï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
                 ;unsigned char mux = 0;
                 ;//unsigned char NUM_SAMP = 50;
                 ;unsigned char d_flag = 0;
                 ;
                 ;// * PSD
                 ;unsigned char dist_data[2][NUM_SAMP] = {0}; //adcï¿½ï¿½È¯ ï¿½ï¿½ï¿½ï¿½ PSDï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½Ç´ï¿½ ï¿½è¿­
                 ;unsigned int dist_sum[2]={0};
                 ;unsigned char dist_mean[2]={0};
                 ;unsigned char dist_max[2] = {0, 0}; //tuningï¿½ï¿½ï¿½ï¿½ ï¿½Ö´ë°ª ï¿½ï¿½ ï¿½Ö¼Ò°ï¿½ï¿½ï¿½ ï¿½Ö±ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½è¿­
                 ;unsigned char dist_min[2] = {255, 255};
                 
                 	.DSEG
                 ;
                 ;// * Pressure
                 ;unsigned char pressure_data[4][NUM_SAMP] = {0}; //adc ï¿½ï¿½ ï¿½Ð·Â¼ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
                 ;unsigned int pressure_sum[4] = {0};
                 ;unsigned char pressure_mean[4] = {0};
                 ;unsigned char pressure_max[4] = {0, 0, 0, 0}; //tuningï¿½ï¿½ï¿½ï¿½ ï¿½Ö´ë°ª ï¿½ï¿½ ï¿½Ö¼Ò°ï¿½ï¿½ï¿½ ï¿½Ö±ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½è¿­
                 ;unsigned char pressure_min[4] = {255, 255, 255, 255};
                 ;
                 ;// * Flex
                 ;unsigned char flex_data[4][NUM_SAMP] = {0}; //adc ï¿½ï¿½ ï¿½Ð·Â¼ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
                 ;unsigned int flex_sum[4] = {0};
                 ;unsigned char flex_mean[4] = {0};
                 ;unsigned char flex_max[4] = {0, 0, 0, 0}; //tuningï¿½ï¿½ï¿½ï¿½ ï¿½Ö´ë°ª ï¿½ï¿½ ï¿½Ö¼Ò°ï¿½ï¿½ï¿½ ï¿½Ö±ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½è¿­
                 ;unsigned char flex_min[4] = {255, 255, 255, 255};
                 ;//*****************************************************************************************************************
                 ;// Timer1 output compare A interrupt service routine
                 ;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
                 ; 0000 0058 {
                 
                 	.CSEG
                 _timer1_compa_isr:
0000d5 93ea      	ST   -Y,R30
                 ; 0000 0059     PORTC=0x01; //PC0ë¥¼ ì¸í°ë½í¸ê±¸ë¦° ìê°ì Highë¡
0000d6 e0e1      	LDI  R30,LOW(1)
0000d7 c002      	RJMP _0x69
                 ; 0000 005A }
                 ;// Timer1 overflow A interrupt service routine
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 005D {
                 _timer1_ovf_isr:
0000d8 93ea      	ST   -Y,R30
                 ; 0000 005E     PORTC=0x00; //PC0ë¥¼ ì¸í°ë½í¸ê±¸ë¦° ìê°ì Lowë¡
0000d9 e0e0      	LDI  R30,LOW(0)
                 _0x69:
0000da bbe5      	OUT  0x15,R30
                 ; 0000 005F }
0000db 91e9      	LD   R30,Y+
0000dc 9518      	RETI
                 ;// Timer3 overflow B interrupt service routine
                 ;interrupt [TIM3_COMPB] void timer3_compa_isr(void)
                 ; 0000 0062 {
                 _timer3_compa_isr:
                 ; 0000 0063     ;
                 ; 0000 0064 }
0000dd 9518      	RETI
                 ;// Timer1 output compare A interrupt service routine
                 ;interrupt [TIM3_OVF] void timer3_ovf_isr(void)
                 ; 0000 0067 {
                 _timer3_ovf_isr:
                 ; 0000 0068     ;
                 ; 0000 0069 }
0000de 9518      	RETI
                 ;// ********************************* ADC interrupt service routine ************************************************
                 ;interrupt [ADC_INT] void adc_isr(void)
                 ; 0000 006C {
                 _adc_isr:
0000df 920a      	ST   -Y,R0
0000e0 921a      	ST   -Y,R1
0000e1 93aa      	ST   -Y,R26
0000e2 93ba      	ST   -Y,R27
0000e3 93ea      	ST   -Y,R30
0000e4 93fa      	ST   -Y,R31
0000e5 b7ef      	IN   R30,SREG
0000e6 93ea      	ST   -Y,R30
                 ; 0000 006D     // Read the AD conversion result
                 ; 0000 006E     //for (h = 0; h<=6; h++);
                 ; 0000 006F     //ADCï¿½ï¿½ï¿½ï¿½ highï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
                 ; 0000 0070     if(mux>4)           flex_data[mux-4][sam_num] = ADCH;   // 4, 5, 6, 7
0000e7 91a0 052b 	LDS  R26,_mux
0000e9 30a5      	CPI  R26,LOW(0x5)
0000ea f058      	BRLO _0x6
0000eb 91e0 052b 	LDS  R30,_mux
0000ed e0f0      	LDI  R31,0
0000ee 9734      	SBIW R30,4
0000ef e3a2      	LDI  R26,LOW(50)
0000f0 e0b0      	LDI  R27,HIGH(50)
0000f1 940e 07c8 	CALL __MULW12U
0000f3 5fe7      	SUBI R30,LOW(-_flex_data)
0000f4 4ff9      	SBCI R31,HIGH(-_flex_data)
0000f5 c007      	RJMP _0x67
                 ; 0000 0071     else                pressure_data[mux][sam_num] = ADCH;     // 0, 1, 2, 3
                 _0x6:
0000f6 91e0 052b 	LDS  R30,_mux
0000f8 e3a2      	LDI  R26,LOW(50)
0000f9 9fea      	MUL  R30,R26
0000fa 01f0      	MOVW R30,R0
0000fb 5de3      	SUBI R30,LOW(-_pressure_data)
0000fc 4ffa      	SBCI R31,HIGH(-_pressure_data)
                 _0x67:
0000fd 01df      	MOVW R26,R30
0000fe 91e0 0500 	LDS  R30,_sam_num
000100 e0f0      	LDI  R31,0
000101 0fae      	ADD  R26,R30
000102 1fbf      	ADC  R27,R31
000103 b1e5      	IN   R30,0x5
000104 93ec      	ST   X,R30
                 ; 0000 0072     //ADC sampling
                 ; 0000 0073     if(sam_num == NUM_SAMP)
000105 91a0 0500 	LDS  R26,_sam_num
000107 33a2      	CPI  R26,LOW(0x32)
000108 f459      	BRNE _0x8
                 ; 0000 0074     {
                 ; 0000 0075         mux++;
000109 91e0 052b 	LDS  R30,_mux
00010b 5fef      	SUBI R30,-LOW(1)
00010c 93e0 052b 	STS  _mux,R30
                 ; 0000 0076         sam_num=0;
00010e e0e0      	LDI  R30,LOW(0)
00010f 93e0 0500 	STS  _sam_num,R30
                 ; 0000 0077         d_flag=1;
000111 e0e1      	LDI  R30,LOW(1)
000112 93e0 052c 	STS  _d_flag,R30
                 ; 0000 0078     }
                 ; 0000 0079 
                 ; 0000 007A     mux &= 0x07;  //mux : 0~7
                 _0x8:
000114 91e0 052b 	LDS  R30,_mux
000116 70e7      	ANDI R30,LOW(0x7)
000117 93e0 052b 	STS  _mux,R30
                 ; 0000 007B     ADMUX = mux | 0x60;
000119 66e0      	ORI  R30,LOW(0x60)
00011a b9e7      	OUT  0x7,R30
                 ; 0000 007C     ADCSRA |= 0x40;
00011b 9a36      	SBI  0x6,6
                 ; 0000 007D     sam_num++;
00011c 91e0 0500 	LDS  R30,_sam_num
00011e 5fef      	SUBI R30,-LOW(1)
00011f 93e0 0500 	STS  _sam_num,R30
                 ; 0000 007E }
000121 91e9      	LD   R30,Y+
000122 bfef      	OUT  SREG,R30
000123 91f9      	LD   R31,Y+
000124 91e9      	LD   R30,Y+
000125 91b9      	LD   R27,Y+
000126 91a9      	LD   R26,Y+
000127 9019      	LD   R1,Y+
000128 9009      	LD   R0,Y+
000129 9518      	RETI
                 ;
                 ;// ******************************** About Pressure Sensor *******************************************************
                 ;void mean_pressure(void)
                 ; 0000 0082 {
                 _mean_pressure:
                 ; 0000 0083     unsigned char num = 0; // counting variable for function
                 ; 0000 0084     while(!d_flag);
00012a 931a      	ST   -Y,R17
                 ;	num -> R17
00012b e010      	LDI  R17,0
                 _0x9:
00012c 91e0 052c 	LDS  R30,_d_flag
00012e 30e0      	CPI  R30,0
00012f f3e1      	BREQ _0x9
                 ; 0000 0085     for(i=0;i<4;i++)
000130 e0e0      	LDI  R30,LOW(0)
000131 93e0 0501 	STS  _i,R30
000133 93e0 0502 	STS  _i+1,R30
                 _0xD:
000135 940e 0663 	CALL SUBOPT_0x0
000137 9714      	SBIW R26,4
000138 f54c      	BRGE _0xE
                 ; 0000 0086     {
                 ; 0000 0087         for(num = 0; num < NUM_SAMP; num++)
000139 e010      	LDI  R17,LOW(0)
                 _0x10:
00013a 3312      	CPI  R17,50
00013b f4a0      	BRSH _0x11
                 ; 0000 0088             pressure_sum[i] += pressure_data[i][num];
00013c 940e 0668 	CALL SUBOPT_0x1
00013e 940e 066d 	CALL SUBOPT_0x2
000140 0fea      	ADD  R30,R26
000141 1ffb      	ADC  R31,R27
000142 93ff      	PUSH R31
000143 93ef      	PUSH R30
000144 940e 0672 	CALL SUBOPT_0x3
000146 5de3      	SUBI R30,LOW(-_pressure_data)
000147 4ffa      	SBCI R31,HIGH(-_pressure_data)
000148 940e 0679 	CALL SUBOPT_0x4
00014a 91af      	POP  R26
00014b 91bf      	POP  R27
00014c 93ed      	ST   X+,R30
00014d 93fc      	ST   X,R31
00014e 5f1f      	SUBI R17,-1
00014f cfea      	RJMP _0x10
                 _0x11:
                 ; 0000 0089 pressure_mean[i] = pressure_sum[i]/50;
000150 940e 0668 	CALL SUBOPT_0x1
000152 50e3      	SUBI R30,LOW(-_pressure_mean)
000153 4ffa      	SBCI R31,HIGH(-_pressure_mean)
000154 01bf      	MOVW R22,R30
000155 940e 0668 	CALL SUBOPT_0x1
000157 940e 066d 	CALL SUBOPT_0x2
000159 940e 0682 	CALL SUBOPT_0x5
                 ; 0000 008A         pressure_sum[i] = 0;
00015b 940e 066d 	CALL SUBOPT_0x2
00015d 940e 068e 	CALL SUBOPT_0x6
                 ; 0000 008B     }
00015f 940e 0695 	CALL SUBOPT_0x7
000161 cfd3      	RJMP _0xD
                 _0xE:
                 ; 0000 008C     d_flag=0;
000162 e0e0      	LDI  R30,LOW(0)
000163 93e0 052c 	STS  _d_flag,R30
                 ; 0000 008D }
000165 c0fd      	RJMP _0x2080005
                 ;//Pressure test
                 ;void pressure_test(void)
                 ; 0000 0090 {
                 _pressure_test:
                 ; 0000 0091     unsigned char num = 0;
                 ; 0000 0092     delay_ms(300);
000166 940e 069d 	CALL SUBOPT_0x8
                 ;	num -> R17
                 ; 0000 0093 
                 ; 0000 0094     while(Middle_switch_off)
                 _0x12:
000168 9b0a      	SBIS 0x1,2
000169 c019      	RJMP _0x14
                 ; 0000 0095     {
                 ; 0000 0096         mean_pressure();
00016a 940e 06a5 	CALL SUBOPT_0x9
                 ; 0000 0097 
                 ; 0000 0098         lcd_clear();
                 ; 0000 0099         lcd_gotoxy(0, 0);
                 ; 0000 009A         lcd_putsf("Testing");
00016c 940e 06ae 	CALL SUBOPT_0xA
                 ; 0000 009B 
                 ; 0000 009C         if(Left_switch_on)  num++;
00016e 9b09      	SBIS 0x1,1
00016f 5f1f      	SUBI R17,-1
                 ; 0000 009D         if(Right_switch_on) num--;
000170 9b0b      	SBIS 0x1,3
000171 5011      	SUBI R17,1
                 ; 0000 009E         if(num>3) num=3;
000172 3014      	CPI  R17,4
000173 f008      	BRLO _0x17
000174 e013      	LDI  R17,LOW(3)
                 ; 0000 009F 
                 ; 0000 00A0         lcd_gotoxy(0, 1);
                 _0x17:
000175 940e 06b4 	CALL SUBOPT_0xB
                 ; 0000 00A1         sprintf(lcd_data, "%d", num);
000177 940e 06c4 	CALL SUBOPT_0xC
                 ; 0000 00A2         lcd_puts(lcd_data);
                 ; 0000 00A3         lcd_gotoxy(4, 1);
000179 940e 06d3 	CALL SUBOPT_0xD
                 ; 0000 00A4         sprintf(lcd_data, "%d", pressure_mean[num]);
00017b 50e3      	SUBI R30,LOW(-_pressure_mean)
00017c 4ffa      	SBCI R31,HIGH(-_pressure_mean)
00017d 81e0      	LD   R30,Z
00017e 940e 06c4 	CALL SUBOPT_0xC
                 ; 0000 00A5         lcd_puts(lcd_data);
                 ; 0000 00A6 
                 ; 0000 00A7         delay_ms(200);
000180 940e 06e4 	CALL SUBOPT_0xE
                 ; 0000 00A8     }
000182 cfe5      	RJMP _0x12
                 _0x14:
                 ; 0000 00A9 }
000183 c0df      	RJMP _0x2080005
                 ;
                 ;// Pressure tuning
                 ;void pressure_tuning(void)
                 ; 0000 00AD {
                 _pressure_tuning:
                 ; 0000 00AE     unsigned char num = 0;
                 ; 0000 00AF     delay_ms(500);
000184 940e 06ea 	CALL SUBOPT_0xF
                 ;	num -> R17
                 ; 0000 00B0 
                 ; 0000 00B1     while(Middle_switch_off)
                 _0x18:
000186 9b0a      	SBIS 0x1,2
000187 c03f      	RJMP _0x1A
                 ; 0000 00B2     {
                 ; 0000 00B3         mean_pressure();
000188 940e 06a5 	CALL SUBOPT_0x9
                 ; 0000 00B4 
                 ; 0000 00B5         lcd_clear();
                 ; 0000 00B6         lcd_gotoxy(0, 0);
                 ; 0000 00B7         lcd_putsf("Tunning");
00018a 940e 06f2 	CALL SUBOPT_0x10
                 ; 0000 00B8 
                 ; 0000 00B9         if(Left_switch_on)  num++;
00018c 9b09      	SBIS 0x1,1
00018d 5f1f      	SUBI R17,-1
                 ; 0000 00BA         if(Right_switch_on) num--;
00018e 9b0b      	SBIS 0x1,3
00018f 5011      	SUBI R17,1
                 ; 0000 00BB         if(num>3) num=3;
000190 3014      	CPI  R17,4
000191 f008      	BRLO _0x1D
000192 e013      	LDI  R17,LOW(3)
                 ; 0000 00BC 
                 ; 0000 00BD         if(pressure_mean[num]>pressure_max[num])  pressure_max[num]=pressure_mean[num];
                 _0x1D:
000193 940e 06f8 	CALL SUBOPT_0x11
000195 010f      	MOVW R0,R30
000196 50e3      	SUBI R30,LOW(-_pressure_mean)
000197 4ffa      	SBCI R31,HIGH(-_pressure_mean)
000198 940e 06fb 	CALL SUBOPT_0x12
00019a f440      	BRSH _0x1E
00019b 940e 0702 	CALL SUBOPT_0x13
00019d 5faf      	SUBI R26,LOW(-_pressure_max)
00019e 4fb9      	SBCI R27,HIGH(-_pressure_max)
00019f 940e 06f8 	CALL SUBOPT_0x11
0001a1 940e 0705 	CALL SUBOPT_0x14
                 ; 0000 00BE         if(pressure_mean[num]<pressure_min[num])  pressure_min[num]=pressure_mean[num];
                 _0x1E:
0001a3 940e 06f8 	CALL SUBOPT_0x11
0001a5 010f      	MOVW R0,R30
0001a6 50e3      	SUBI R30,LOW(-_pressure_mean)
0001a7 4ffa      	SBCI R31,HIGH(-_pressure_mean)
0001a8 940e 070a 	CALL SUBOPT_0x15
0001aa f440      	BRSH _0x1F
0001ab 940e 0702 	CALL SUBOPT_0x13
0001ad 5fab      	SUBI R26,LOW(-_pressure_min)
0001ae 4fb9      	SBCI R27,HIGH(-_pressure_min)
0001af 940e 06f8 	CALL SUBOPT_0x11
0001b1 940e 0705 	CALL SUBOPT_0x14
                 ; 0000 00BF 
                 ; 0000 00C0         lcd_gotoxy(0, 7);
                 _0x1F:
0001b3 940e 0711 	CALL SUBOPT_0x16
                 ; 0000 00C1         sprintf(lcd_data, "%d", num);
                 ; 0000 00C2         lcd_puts(lcd_data);
                 ; 0000 00C3         lcd_gotoxy(0, 1);
0001b5 940e 06b4 	CALL SUBOPT_0xB
                 ; 0000 00C4         sprintf(lcd_data, "%d", pressure_min[num]);
0001b7 e0f0      	LDI  R31,0
0001b8 5feb      	SUBI R30,LOW(-_pressure_min)
0001b9 4ff9      	SBCI R31,HIGH(-_pressure_min)
0001ba 81e0      	LD   R30,Z
0001bb 940e 06c4 	CALL SUBOPT_0xC
                 ; 0000 00C5         lcd_puts(lcd_data);
                 ; 0000 00C6         lcd_gotoxy(4, 1);
0001bd 940e 06d3 	CALL SUBOPT_0xD
                 ; 0000 00C7         sprintf(lcd_data, "%d", pressure_max[num]);
0001bf 5fef      	SUBI R30,LOW(-_pressure_max)
0001c0 4ff9      	SBCI R31,HIGH(-_pressure_max)
0001c1 81e0      	LD   R30,Z
0001c2 940e 06c4 	CALL SUBOPT_0xC
                 ; 0000 00C8         lcd_puts(lcd_data);
                 ; 0000 00C9 
                 ; 0000 00CA         delay_ms(100);
0001c4 940e 0721 	CALL SUBOPT_0x17
                 ; 0000 00CB     }
0001c6 cfbf      	RJMP _0x18
                 _0x1A:
                 ; 0000 00CC }
0001c7 c09b      	RJMP _0x2080005
                 ;
                 ;// ******************************** About Flex Sensor *******************************************************
                 ;void mean_flex(void)
                 ; 0000 00D0 {
                 _mean_flex:
                 ; 0000 00D1     unsigned char num = 0; // counting variable for function
                 ; 0000 00D2     while(!d_flag);
0001c8 931a      	ST   -Y,R17
                 ;	num -> R17
0001c9 e010      	LDI  R17,0
                 _0x20:
0001ca 91e0 052c 	LDS  R30,_d_flag
0001cc 30e0      	CPI  R30,0
0001cd f3e1      	BREQ _0x20
                 ; 0000 00D3     for(i=0;i<4;i++)
0001ce e0e0      	LDI  R30,LOW(0)
0001cf 93e0 0501 	STS  _i,R30
0001d1 93e0 0502 	STS  _i+1,R30
                 _0x24:
0001d3 940e 0663 	CALL SUBOPT_0x0
0001d5 9714      	SBIW R26,4
0001d6 f53c      	BRGE _0x25
                 ; 0000 00D4     {
                 ; 0000 00D5         for(num = 0; num < NUM_SAMP; num++)
0001d7 e010      	LDI  R17,LOW(0)
                 _0x27:
0001d8 3312      	CPI  R17,50
0001d9 f490      	BRSH _0x28
                 ; 0000 00D6             flex_sum[i] += flex_data[i][num];
0001da 940e 0727 	CALL SUBOPT_0x18
0001dc 0fea      	ADD  R30,R26
0001dd 1ffb      	ADC  R31,R27
0001de 93ff      	PUSH R31
0001df 93ef      	PUSH R30
0001e0 940e 0672 	CALL SUBOPT_0x3
0001e2 5fe7      	SUBI R30,LOW(-_flex_data)
0001e3 4ff9      	SBCI R31,HIGH(-_flex_data)
0001e4 940e 0679 	CALL SUBOPT_0x4
0001e6 91af      	POP  R26
0001e7 91bf      	POP  R27
0001e8 93ed      	ST   X+,R30
0001e9 93fc      	ST   X,R31
0001ea 5f1f      	SUBI R17,-1
0001eb cfec      	RJMP _0x27
                 _0x28:
                 ; 0000 00D7 flex_mean[i] = flex_sum[i]/50;
0001ec 940e 0668 	CALL SUBOPT_0x1
0001ee 52e7      	SUBI R30,LOW(-_flex_mean)
0001ef 4ff9      	SBCI R31,HIGH(-_flex_mean)
0001f0 01bf      	MOVW R22,R30
0001f1 940e 0727 	CALL SUBOPT_0x18
0001f3 940e 0682 	CALL SUBOPT_0x5
                 ; 0000 00D8         flex_sum[i] = 0;
0001f5 eda1      	LDI  R26,LOW(_flex_sum)
0001f6 e0b6      	LDI  R27,HIGH(_flex_sum)
0001f7 0fee      	LSL  R30
0001f8 1fff      	ROL  R31
0001f9 940e 068e 	CALL SUBOPT_0x6
                 ; 0000 00D9     }
0001fb 940e 0695 	CALL SUBOPT_0x7
0001fd cfd5      	RJMP _0x24
                 _0x25:
                 ; 0000 00DA     d_flag=0;
0001fe e0e0      	LDI  R30,LOW(0)
0001ff 93e0 052c 	STS  _d_flag,R30
                 ; 0000 00DB }
000201 c061      	RJMP _0x2080005
                 ;//Pressure test
                 ;void flex_test(void)
                 ; 0000 00DE {
                 _flex_test:
                 ; 0000 00DF     unsigned char num = 0;
                 ; 0000 00E0     delay_ms(300);
000202 940e 069d 	CALL SUBOPT_0x8
                 ;	num -> R17
                 ; 0000 00E1 
                 ; 0000 00E2     while(Middle_switch_off)
                 _0x29:
000204 9b0a      	SBIS 0x1,2
000205 c019      	RJMP _0x2B
                 ; 0000 00E3     {
                 ; 0000 00E4         mean_flex();
000206 940e 072d 	CALL SUBOPT_0x19
                 ; 0000 00E5 
                 ; 0000 00E6         lcd_clear();
                 ; 0000 00E7         lcd_gotoxy(0, 0);
                 ; 0000 00E8         lcd_putsf("Testing");
000208 940e 06ae 	CALL SUBOPT_0xA
                 ; 0000 00E9 
                 ; 0000 00EA         if(Left_switch_on)  num++;
00020a 9b09      	SBIS 0x1,1
00020b 5f1f      	SUBI R17,-1
                 ; 0000 00EB         if(Right_switch_on) num--;
00020c 9b0b      	SBIS 0x1,3
00020d 5011      	SUBI R17,1
                 ; 0000 00EC         if(num>3) num=3;
00020e 3014      	CPI  R17,4
00020f f008      	BRLO _0x2E
000210 e013      	LDI  R17,LOW(3)
                 ; 0000 00ED 
                 ; 0000 00EE         lcd_gotoxy(0, 1);
                 _0x2E:
000211 940e 06b4 	CALL SUBOPT_0xB
                 ; 0000 00EF         sprintf(lcd_data, "%d", num);
000213 940e 06c4 	CALL SUBOPT_0xC
                 ; 0000 00F0         lcd_puts(lcd_data);
                 ; 0000 00F1         lcd_gotoxy(4, 1);
000215 940e 06d3 	CALL SUBOPT_0xD
                 ; 0000 00F2         sprintf(lcd_data, "%d", flex_mean[num]);
000217 52e7      	SUBI R30,LOW(-_flex_mean)
000218 4ff9      	SBCI R31,HIGH(-_flex_mean)
000219 81e0      	LD   R30,Z
00021a 940e 06c4 	CALL SUBOPT_0xC
                 ; 0000 00F3         lcd_puts(lcd_data);
                 ; 0000 00F4 
                 ; 0000 00F5         delay_ms(200);
00021c 940e 06e4 	CALL SUBOPT_0xE
                 ; 0000 00F6     }
00021e cfe5      	RJMP _0x29
                 _0x2B:
                 ; 0000 00F7 }
00021f c043      	RJMP _0x2080005
                 ;
                 ;// flex tuning
                 ;void flex_tuning(void)
                 ; 0000 00FB {
                 _flex_tuning:
                 ; 0000 00FC     unsigned char num = 0;
                 ; 0000 00FD     delay_ms(500);
000220 940e 06ea 	CALL SUBOPT_0xF
                 ;	num -> R17
                 ; 0000 00FE 
                 ; 0000 00FF     while(Middle_switch_off)
                 _0x2F:
000222 9b0a      	SBIS 0x1,2
000223 c03f      	RJMP _0x31
                 ; 0000 0100     {
                 ; 0000 0101         mean_flex();
000224 940e 072d 	CALL SUBOPT_0x19
                 ; 0000 0102 
                 ; 0000 0103         lcd_clear();
                 ; 0000 0104         lcd_gotoxy(0, 0);
                 ; 0000 0105         lcd_putsf("Tunning");
000226 940e 06f2 	CALL SUBOPT_0x10
                 ; 0000 0106 
                 ; 0000 0107         if(Left_switch_on)  num++;
000228 9b09      	SBIS 0x1,1
000229 5f1f      	SUBI R17,-1
                 ; 0000 0108         if(Right_switch_on) num--;
00022a 9b0b      	SBIS 0x1,3
00022b 5011      	SUBI R17,1
                 ; 0000 0109         if(num>3) num=3;
00022c 3014      	CPI  R17,4
00022d f008      	BRLO _0x34
00022e e013      	LDI  R17,LOW(3)
                 ; 0000 010A 
                 ; 0000 010B         if(flex_mean[num]>pressure_max[num])  flex_max[num]=pressure_mean[num];
                 _0x34:
00022f 940e 06f8 	CALL SUBOPT_0x11
000231 010f      	MOVW R0,R30
000232 52e7      	SUBI R30,LOW(-_flex_mean)
000233 4ff9      	SBCI R31,HIGH(-_flex_mean)
000234 940e 06fb 	CALL SUBOPT_0x12
000236 f440      	BRSH _0x35
000237 940e 0702 	CALL SUBOPT_0x13
000239 52a3      	SUBI R26,LOW(-_flex_max)
00023a 4fb9      	SBCI R27,HIGH(-_flex_max)
00023b 940e 06f8 	CALL SUBOPT_0x11
00023d 940e 0705 	CALL SUBOPT_0x14
                 ; 0000 010C         if(flex_mean[num]<pressure_min[num])  flex_min[num]=pressure_mean[num];
                 _0x35:
00023f 940e 06f8 	CALL SUBOPT_0x11
000241 010f      	MOVW R0,R30
000242 52e7      	SUBI R30,LOW(-_flex_mean)
000243 4ff9      	SBCI R31,HIGH(-_flex_mean)
000244 940e 070a 	CALL SUBOPT_0x15
000246 f440      	BRSH _0x36
000247 940e 0702 	CALL SUBOPT_0x13
000249 51af      	SUBI R26,LOW(-_flex_min)
00024a 4fb9      	SBCI R27,HIGH(-_flex_min)
00024b 940e 06f8 	CALL SUBOPT_0x11
00024d 940e 0705 	CALL SUBOPT_0x14
                 ; 0000 010D 
                 ; 0000 010E         lcd_gotoxy(0, 7);
                 _0x36:
00024f 940e 0711 	CALL SUBOPT_0x16
                 ; 0000 010F         sprintf(lcd_data, "%d", num);
                 ; 0000 0110         lcd_puts(lcd_data);
                 ; 0000 0111         lcd_gotoxy(0, 1);
000251 940e 06b4 	CALL SUBOPT_0xB
                 ; 0000 0112         sprintf(lcd_data, "%d", flex_min[num]);
000253 e0f0      	LDI  R31,0
000254 51ef      	SUBI R30,LOW(-_flex_min)
000255 4ff9      	SBCI R31,HIGH(-_flex_min)
000256 81e0      	LD   R30,Z
000257 940e 06c4 	CALL SUBOPT_0xC
                 ; 0000 0113         lcd_puts(lcd_data);
                 ; 0000 0114         lcd_gotoxy(4, 1);
000259 940e 06d3 	CALL SUBOPT_0xD
                 ; 0000 0115         sprintf(lcd_data, "%d", flex_max[num]);
00025b 52e3      	SUBI R30,LOW(-_flex_max)
00025c 4ff9      	SBCI R31,HIGH(-_flex_max)
00025d 81e0      	LD   R30,Z
00025e 940e 06c4 	CALL SUBOPT_0xC
                 ; 0000 0116         lcd_puts(lcd_data);
                 ; 0000 0117 
                 ; 0000 0118         delay_ms(100);
000260 940e 0721 	CALL SUBOPT_0x17
                 ; 0000 0119     }
000262 cfbf      	RJMP _0x2F
                 _0x31:
                 ; 0000 011A }
                 _0x2080005:
000263 9119      	LD   R17,Y+
000264 9508      	RET
                 ;
                 ;// ******************************** About PWM control *******************************************************
                 ;void check_pwm(void)
                 ; 0000 011E {
                 _check_pwm:
                 ; 0000 011F     unsigned int temp = 350;//PWM interrupt control
                 ; 0000 0120     delay_ms(100);
000265 940e 0736 	CALL SUBOPT_0x1A
                 ;	temp -> R16,R17
                 ; 0000 0121 
                 ; 0000 0122     while(Middle_switch_off)
                 _0x37:
000267 9b0a      	SBIS 0x1,2
000268 c01b      	RJMP _0x39
                 ; 0000 0123     {
                 ; 0000 0124         if(Left_switch_on)  temp+=10;
000269 9909      	SBIC 0x1,1
00026a c002      	RJMP _0x3A
                +
00026b 5f06     +SUBI R16 , LOW ( - 10 )
00026c 4f1f     +SBCI R17 , HIGH ( - 10 )
                 	__ADDWRN 16,17,10
                 ; 0000 0125         if(Right_switch_on)  temp-=10;
                 _0x3A:
00026d 990b      	SBIC 0x1,3
00026e c002      	RJMP _0x3B
                +
00026f 500a     +SUBI R16 , LOW ( 10 )
000270 4010     +SBCI R17 , HIGH ( 10 )
                 	__SUBWRN 16,17,10
                 ; 0000 0126         if(temp<=0) temp=0;
                 _0x3B:
000271 2e00      	MOV  R0,R16
000272 2a01      	OR   R0,R17
000273 f411      	BRNE _0x3C
                +
000274 e000     +LDI R16 , LOW ( 0 )
000275 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ; 0000 0127         if(temp>=ICR1)  temp=ICR1;
                 _0x3C:
000276 b5e6      	IN   R30,0x26
000277 b5f7      	IN   R31,0x26+1
000278 170e      	CP   R16,R30
000279 071f      	CPC  R17,R31
00027a f010      	BRLO _0x3D
                +
00027b b506     +IN R16 , 38
00027c b517     +IN R17 , 38 + 1
                 	__INWR 16,17,38
                 ; 0000 0128         // ìë ë¸ì´ë ë°¸ë¸ ì¤ê¸°ì ê¹ì§ LEDë¡ íì¤í¸
                 ; 0000 0129         OCR1AH = temp>>8;
                 _0x3D:
00027d 2fe1      	MOV  R30,R17
00027e 70f0      	ANDI R31,HIGH(0x0)
00027f bdeb      	OUT  0x2B,R30
                 ; 0000 012A         OCR1AL = temp;
000280 bd0a      	OUT  0x2A,R16
                 ; 0000 012B         lcd_clear();
000281 940e 073b 	CALL SUBOPT_0x1B
                 ; 0000 012C         lcd_gotoxy(0, 0);
                 ; 0000 012D         lcd_putsf("TEST");
                 ; 0000 012E         lcd_gotoxy(0, 1);
                 ; 0000 012F         sprintf(lcd_data, "%d", temp);
                 ; 0000 0130         lcd_puts(lcd_data);
                 ; 0000 0131 
                 ; 0000 0132         delay_ms(100);
                 ; 0000 0133     }
000283 cfe3      	RJMP _0x37
                 _0x39:
                 ; 0000 0134 }
000284 c01f      	RJMP _0x2080004
                 ;
                 ;// ******************************** About PWM control *******************************************************
                 ;void PUMP_test()
                 ; 0000 0138 {
                 _PUMP_test:
                 ; 0000 0139     unsigned int temp = 350;//PWM interrupt control
                 ; 0000 013A     delay_ms(100);
000285 940e 0736 	CALL SUBOPT_0x1A
                 ;	temp -> R16,R17
                 ; 0000 013B 
                 ; 0000 013C     while(Middle_switch_off)
                 _0x3E:
000287 9b0a      	SBIS 0x1,2
000288 c01b      	RJMP _0x40
                 ; 0000 013D     {
                 ; 0000 013E         if(Left_switch_on)  temp+=10;
000289 9909      	SBIC 0x1,1
00028a c002      	RJMP _0x41
                +
00028b 5f06     +SUBI R16 , LOW ( - 10 )
00028c 4f1f     +SBCI R17 , HIGH ( - 10 )
                 	__ADDWRN 16,17,10
                 ; 0000 013F         if(Right_switch_on)  temp-=10;
                 _0x41:
00028d 990b      	SBIC 0x1,3
00028e c002      	RJMP _0x42
                +
00028f 500a     +SUBI R16 , LOW ( 10 )
000290 4010     +SBCI R17 , HIGH ( 10 )
                 	__SUBWRN 16,17,10
                 ; 0000 0140         if(temp<=0) temp=0;
                 _0x42:
000291 2e00      	MOV  R0,R16
000292 2a01      	OR   R0,R17
000293 f411      	BRNE _0x43
                +
000294 e000     +LDI R16 , LOW ( 0 )
000295 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ; 0000 0141         if(temp>=ICR1)  temp=ICR1;
                 _0x43:
000296 b5e6      	IN   R30,0x26
000297 b5f7      	IN   R31,0x26+1
000298 170e      	CP   R16,R30
000299 071f      	CPC  R17,R31
00029a f010      	BRLO _0x44
                +
00029b b506     +IN R16 , 38
00029c b517     +IN R17 , 38 + 1
                 	__INWR 16,17,38
                 ; 0000 0142 
                 ; 0000 0143         OCR1BH = temp>>8;
                 _0x44:
00029d 2fe1      	MOV  R30,R17
00029e 70f0      	ANDI R31,HIGH(0x0)
00029f bde9      	OUT  0x29,R30
                 ; 0000 0144         OCR1BL = temp;
0002a0 bd08      	OUT  0x28,R16
                 ; 0000 0145         lcd_clear();
0002a1 940e 073b 	CALL SUBOPT_0x1B
                 ; 0000 0146         lcd_gotoxy(0, 0);
                 ; 0000 0147         lcd_putsf("TEST");
                 ; 0000 0148         lcd_gotoxy(0, 1);
                 ; 0000 0149         sprintf(lcd_data, "%d", temp);
                 ; 0000 014A         lcd_puts(lcd_data);
                 ; 0000 014B 
                 ; 0000 014C         delay_ms(100);
                 ; 0000 014D     }
0002a3 cfe3      	RJMP _0x3E
                 _0x40:
                 ; 0000 014E }
                 _0x2080004:
0002a4 9109      	LD   R16,Y+
0002a5 9119      	LD   R17,Y+
0002a6 9508      	RET
                 ;
                 ;// ******************************** About Order *******************************************************
                 ;unsigned char order(unsigned char sequence)
                 ; 0000 0152 {
                 _order:
                 ; 0000 0153     if(Up_thumb||Up_index||Up_middle||Up_rest)    EXTENSION;
                 ;	sequence -> Y+0
0002a7 9bc8      	SBIS 0x19,0
0002a8 c006      	RJMP _0x46
0002a9 9bca      	SBIS 0x19,2
0002aa c004      	RJMP _0x46
0002ab 9bcc      	SBIS 0x19,4
0002ac c002      	RJMP _0x46
0002ad 99ce      	SBIC 0x19,6
0002ae c00a      	RJMP _0x45
                 _0x46:
0002af e3e2      	LDI  R30,LOW(50)
0002b0 e0f0      	LDI  R31,HIGH(50)
0002b1 bdfb      	OUT  0x2A+1,R31
0002b2 bdea      	OUT  0x2A,R30
0002b3 e0e0      	LDI  R30,LOW(0)
0002b4 93e0 0087 	STS  135,R30
0002b6 e9e6      	LDI  R30,LOW(150)
0002b7 93e0 0086 	STS  134,R30
                 ; 0000 0154     if(Down_thumb||Down_index||Down_middle||Down_rest)  FLEXTION;
                 _0x45:
0002b9 9bc9      	SBIS 0x19,1
0002ba c006      	RJMP _0x49
0002bb 9bcb      	SBIS 0x19,3
0002bc c004      	RJMP _0x49
0002bd 9bcd      	SBIS 0x19,5
0002be c002      	RJMP _0x49
0002bf 99cf      	SBIC 0x19,7
0002c0 c00a      	RJMP _0x48
                 _0x49:
0002c1 e9e6      	LDI  R30,LOW(150)
0002c2 e0f0      	LDI  R31,HIGH(150)
0002c3 bdfb      	OUT  0x2A+1,R31
0002c4 bdea      	OUT  0x2A,R30
0002c5 e0e0      	LDI  R30,LOW(0)
0002c6 93e0 0087 	STS  135,R30
0002c8 e3e2      	LDI  R30,LOW(50)
0002c9 93e0 0086 	STS  134,R30
                 ; 0000 0155     // sequence 0 : Thumb   PC0, PC4 on, PORTC = 0x11
                 ; 0000 0156     // sequence 1 : Index   PC1, PC5 on, PORTC = 0x22
                 ; 0000 0157     // sequence 2 : Middle  PC2, PC6 on, PORTC = 0x44
                 ; 0000 0158     // sequence 3 : Rest    PC3, PC7 on, PORTC = 0x88
                 ; 0000 0159     PORTC = 0x11<<sequence;
                 _0x48:
0002cb 81e8      	LD   R30,Y
0002cc e1a1      	LDI  R26,LOW(17)
0002cd 940e 07c0 	CALL __LSLB12
0002cf bbe5      	OUT  0x15,R30
                 ; 0000 015A     sequence++;
0002d0 81e8      	LD   R30,Y
0002d1 5fef      	SUBI R30,-LOW(1)
0002d2 83e8      	ST   Y,R30
                 ; 0000 015B     if(sequence>3)  sequence=0;
0002d3 81a8      	LD   R26,Y
0002d4 30a4      	CPI  R26,LOW(0x4)
0002d5 f010      	BRLO _0x4B
0002d6 e0e0      	LDI  R30,LOW(0)
0002d7 83e8      	ST   Y,R30
                 ; 0000 015C     return sequence;
                 _0x4B:
0002d8 81e8      	LD   R30,Y
0002d9 940c 064c 	JMP  _0x2080001
                 ; 0000 015D }
                 ;// ********************************************* main ******************************************************************
                 ;void main(void)
                 ; 0000 0160 {
                 _main:
                 ; 0000 0161 // Declare your local variables here
                 ; 0000 0162 // menu
                 ; 0000 0163 unsigned char menu = 0;
                 ; 0000 0164 unsigned char menu_Max = 6;
                 ; 0000 0165 unsigned char sequence=0;
                 ; 0000 0166 
                 ; 0000 0167 PORTA=0xFE;
                 ;	menu -> R17
                 ;	menu_Max -> R16
                 ;	sequence -> R19
0002db e010      	LDI  R17,0
0002dc e006      	LDI  R16,6
0002dd e030      	LDI  R19,0
0002de efee      	LDI  R30,LOW(254)
0002df bbeb      	OUT  0x1B,R30
                 ; 0000 0168 DDRA=0xFF;
0002e0 efef      	LDI  R30,LOW(255)
0002e1 bbea      	OUT  0x1A,R30
                 ; 0000 0169 PORTB=0x00;
0002e2 e0e0      	LDI  R30,LOW(0)
0002e3 bbe8      	OUT  0x18,R30
                 ; 0000 016A DDRB=0xFF;
0002e4 efef      	LDI  R30,LOW(255)
0002e5 bbe7      	OUT  0x17,R30
                 ; 0000 016B PORTC=0x00;
0002e6 e0e0      	LDI  R30,LOW(0)
0002e7 bbe5      	OUT  0x15,R30
                 ; 0000 016C DDRC=0xFF;
0002e8 efef      	LDI  R30,LOW(255)
0002e9 bbe4      	OUT  0x14,R30
                 ; 0000 016D PORTD=0x00;
0002ea e0e0      	LDI  R30,LOW(0)
0002eb bbe2      	OUT  0x12,R30
                 ; 0000 016E DDRD=0xFF;
0002ec efef      	LDI  R30,LOW(255)
0002ed bbe1      	OUT  0x11,R30
                 ; 0000 016F PORTE=0x00;
0002ee e0e0      	LDI  R30,LOW(0)
0002ef b9e3      	OUT  0x3,R30
                 ; 0000 0170 DDRE=0x8F;
0002f0 e8ef      	LDI  R30,LOW(143)
0002f1 b9e2      	OUT  0x2,R30
                 ; 0000 0171 PORTF=0x00;
0002f2 e0e0      	LDI  R30,LOW(0)
0002f3 93e0 0062 	STS  98,R30
                 ; 0000 0172 DDRF=0x00;
0002f5 93e0 0061 	STS  97,R30
                 ; 0000 0173 PORTG=0x00;
0002f7 93e0 0065 	STS  101,R30
                 ; 0000 0174 DDRG=0x00;
0002f9 93e0 0064 	STS  100,R30
                 ; 0000 0175 
                 ; 0000 0176 // Compare match interrupt  : Valve on
                 ; 0000 0177 // Overflow interrupt       : Valve off
                 ; 0000 0178 // Timer 1 B : PUMP pwm control by using OCR1B
                 ; 0000 0179 // Timer 1   : Inlet Valve control
                 ; 0000 017A // Timer 3   : Outlet Valve on
                 ; 0000 017B 
                 ; 0000 017C // Timer/Counter 1 initialization
                 ; 0000 017D TCCR1A=0x22;//Timer 1 ê³¼ ê´ë ¨ë ìì¶ë ¥ í ì¤ OC1Bë§ PWMì¶ë ¥(TIM1_COMPAtìì Low) ëë¨¸ì§ë GPIOë¡ ì¬ì©
0002fb e2e2      	LDI  R30,LOW(34)
0002fc bdef      	OUT  0x2F,R30
                 ; 0000 017E TCCR1B=0x18;//Timer 1 : Fast PWM mode, ë¶ì£¼ë¹=1, TOP=ICR1
0002fd e1e8      	LDI  R30,LOW(24)
0002fe bdee      	OUT  0x2E,R30
                 ; 0000 017F TCNT1H=0x00;
0002ff e0e0      	LDI  R30,LOW(0)
000300 bded      	OUT  0x2D,R30
                 ; 0000 0180 TCNT1L=0x00;
000301 bdec      	OUT  0x2C,R30
                 ; 0000 0181 ICR1H=0x13;
000302 e1e3      	LDI  R30,LOW(19)
000303 bde7      	OUT  0x27,R30
                 ; 0000 0182 ICR1L=0x87;
000304 e8e7      	LDI  R30,LOW(135)
000305 bde6      	OUT  0x26,R30
                 ; 0000 0183 OCR1AH=0x00;
000306 e0e0      	LDI  R30,LOW(0)
000307 bdeb      	OUT  0x2B,R30
                 ; 0000 0184 OCR1AL=0x00;
000308 bdea      	OUT  0x2A,R30
                 ; 0000 0185 OCR1BH=0x00;
000309 bde9      	OUT  0x29,R30
                 ; 0000 0186 OCR1BL=0x00;
00030a bde8      	OUT  0x28,R30
                 ; 0000 0187 OCR1CH=0x00;
00030b 93e0 0079 	STS  121,R30
                 ; 0000 0188 OCR1CL=0x00;
00030d 93e0 0078 	STS  120,R30
                 ; 0000 0189 // Timer/Counter 3 initialization
                 ; 0000 018A TCCR3A=0x02;//Timer 3 ê³¼ ê´ë ¨ë ìì¶ë ¥ íì GPIOë¡ ì¬ì©
00030f e0e2      	LDI  R30,LOW(2)
000310 93e0 008b 	STS  139,R30
                 ; 0000 018B TCCR3B=0x18;//Timer 3 : Fast PWM mode, ë¶ì£¼ë¹=1, TOP=ICR3
000312 e1e8      	LDI  R30,LOW(24)
000313 93e0 008a 	STS  138,R30
                 ; 0000 018C TCNT3H=0x00;
000315 e0e0      	LDI  R30,LOW(0)
000316 93e0 0089 	STS  137,R30
                 ; 0000 018D TCNT3L=0x00;
000318 93e0 0088 	STS  136,R30
                 ; 0000 018E ICR3H=0x00;
00031a 93e0 0081 	STS  129,R30
                 ; 0000 018F ICR3L=0x00;
00031c 93e0 0080 	STS  128,R30
                 ; 0000 0190 OCR3AH=0x00;
00031e 93e0 0087 	STS  135,R30
                 ; 0000 0191 OCR3AL=0x00;
000320 93e0 0086 	STS  134,R30
                 ; 0000 0192 OCR3BH=0x00;
000322 93e0 0085 	STS  133,R30
                 ; 0000 0193 OCR3BL=0x00;
000324 93e0 0084 	STS  132,R30
                 ; 0000 0194 OCR3CH=0x00;
000326 93e0 0083 	STS  131,R30
                 ; 0000 0195 OCR3CL=0x00;
000328 93e0 0082 	STS  130,R30
                 ; 0000 0196 
                 ; 0000 0197 //Activate timer interrupts
                 ; 0000 0198 TIMSK = 0x14; //TIM1_COMPA interrupt on, TIM1_OVF interrupt on (Inlet Valve control)
00032a e1e4      	LDI  R30,LOW(20)
00032b bfe7      	OUT  0x37,R30
                 ; 0000 0199 ETIMSK = 0x14;//TIM3_COMPA interrupt on, TIM3_OVF interrupt on (Outlet Valve control)
00032c 93e0 007d 	STS  125,R30
                 ; 0000 019A 
                 ; 0000 019B //ADC setting
                 ; 0000 019C ADMUX=0x21;
00032e e2e1      	LDI  R30,LOW(33)
00032f b9e7      	OUT  0x7,R30
                 ; 0000 019D ADCSRA=0xCF;  //ADC enable, ADC start, ADC interrupt on, ë¶ì£¼ë¹128(62.5kHz)
000330 ecef      	LDI  R30,LOW(207)
000331 b9e6      	OUT  0x6,R30
                 ; 0000 019E SFIOR=0x01;
000332 e0e1      	LDI  R30,LOW(1)
000333 bde0      	OUT  0x20,R30
                 ; 0000 019F 
                 ; 0000 01A0 lcd_init(8);
000334 e0e8      	LDI  R30,LOW(8)
000335 93ea      	ST   -Y,R30
000336 940e 0619 	CALL _lcd_init
                 ; 0000 01A1 // Global enable interrupts
                 ; 0000 01A2 #asm("sei")
000338 9478      	sei
                 ; 0000 01A3 //SREG = 0x80;
                 ; 0000 01A4 while (1)
                 _0x4C:
                 ; 0000 01A5       {
                 ; 0000 01A6         if(Left_switch_on) menu++;
000339 9b09      	SBIS 0x1,1
00033a 5f1f      	SUBI R17,-1
                 ; 0000 01A7         if(Right_switch_on) menu--;
00033b 9b0b      	SBIS 0x1,3
00033c 5011      	SUBI R17,1
                 ; 0000 01A8         if(menu > menu_Max)    menu = 0;
00033d 1701      	CP   R16,R17
00033e f408      	BRSH _0x51
00033f e010      	LDI  R17,LOW(0)
                 ; 0000 01A9         if(menu == 0)
                 _0x51:
000340 3010      	CPI  R17,0
000341 f411      	BRNE _0x52
                 ; 0000 01AA             if(Right_switch_on) menu = menu_Max;
000342 9b0b      	SBIS 0x1,3
000343 2f10      	MOV  R17,R16
                 ; 0000 01AB 
                 ; 0000 01AC         switch(menu)
                 _0x52:
000344 940e 06f8 	CALL SUBOPT_0x11
                 ; 0000 01AD         {
                 ; 0000 01AE             // Sensor TEST
                 ; 0000 01AF             case 0:
000346 9730      	SBIW R30,0
000347 f449      	BRNE _0x57
                 ; 0000 01B0                     lcd_clear();
000348 940e 0766 	CALL SUBOPT_0x1C
                 ; 0000 01B1                     lcd_gotoxy(0, 0);
                 ; 0000 01B2                     lcd_putsf("1.Pressure TEST");
                +
00034a ece0     +LDI R30 , LOW ( 2 * _0x0 + ( 24 ) )
00034b e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 24 ) )
                 	__POINTW1FN _0x0,24
00034c 940e 076d 	CALL SUBOPT_0x1D
                 ; 0000 01B3                     if(Middle_switch_on) pressure_test();
00034e 9b0a      	SBIS 0x1,2
00034f de16      	RCALL _pressure_test
                 ; 0000 01B4                     delay_ms(300);
000350 c057      	RJMP _0x68
                 ; 0000 01B5                     break;
                 ; 0000 01B6 
                 ; 0000 01B7             case 1:
                 _0x57:
000351 30e1      	CPI  R30,LOW(0x1)
000352 e0a0      	LDI  R26,HIGH(0x1)
000353 07fa      	CPC  R31,R26
000354 f449      	BRNE _0x59
                 ; 0000 01B8                     lcd_clear();
000355 940e 0766 	CALL SUBOPT_0x1C
                 ; 0000 01B9                     lcd_gotoxy(0, 0);
                 ; 0000 01BA                     lcd_putsf("2.Pressure Tunning");
                +
000357 ede0     +LDI R30 , LOW ( 2 * _0x0 + ( 40 ) )
000358 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 40 ) )
                 	__POINTW1FN _0x0,40
000359 940e 076d 	CALL SUBOPT_0x1D
                 ; 0000 01BB                     if(Middle_switch_on)    pressure_tuning();
00035b 9b0a      	SBIS 0x1,2
00035c de27      	RCALL _pressure_tuning
                 ; 0000 01BC                     delay_ms(300);
00035d c04a      	RJMP _0x68
                 ; 0000 01BD                     break;
                 ; 0000 01BE 
                 ; 0000 01BF             case 2:
                 _0x59:
00035e 30e2      	CPI  R30,LOW(0x2)
00035f e0a0      	LDI  R26,HIGH(0x2)
000360 07fa      	CPC  R31,R26
000361 f449      	BRNE _0x5B
                 ; 0000 01C0                     lcd_clear();
000362 940e 0766 	CALL SUBOPT_0x1C
                 ; 0000 01C1                     lcd_gotoxy(0, 0);
                 ; 0000 01C2                     lcd_putsf("3.Flex TEST");
                +
000364 eee3     +LDI R30 , LOW ( 2 * _0x0 + ( 59 ) )
000365 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 59 ) )
                 	__POINTW1FN _0x0,59
000366 940e 076d 	CALL SUBOPT_0x1D
                 ; 0000 01C3                     if(Middle_switch_on)    flex_test();
000368 9b0a      	SBIS 0x1,2
000369 de98      	RCALL _flex_test
                 ; 0000 01C4                     delay_ms(300);
00036a c03d      	RJMP _0x68
                 ; 0000 01C5                     break;
                 ; 0000 01C6             case 3:
                 _0x5B:
00036b 30e3      	CPI  R30,LOW(0x3)
00036c e0a0      	LDI  R26,HIGH(0x3)
00036d 07fa      	CPC  R31,R26
00036e f449      	BRNE _0x5D
                 ; 0000 01C7                     lcd_clear();
00036f 940e 0766 	CALL SUBOPT_0x1C
                 ; 0000 01C8                     lcd_gotoxy(0, 0);
                 ; 0000 01C9                     lcd_putsf("4.Flex Tunning");
                +
000371 eeef     +LDI R30 , LOW ( 2 * _0x0 + ( 71 ) )
000372 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 71 ) )
                 	__POINTW1FN _0x0,71
000373 940e 076d 	CALL SUBOPT_0x1D
                 ; 0000 01CA                     if(Middle_switch_on)    flex_tuning();
000375 9b0a      	SBIS 0x1,2
000376 dea9      	RCALL _flex_tuning
                 ; 0000 01CB                     delay_ms(300);
000377 c030      	RJMP _0x68
                 ; 0000 01CC                     break;
                 ; 0000 01CD 
                 ; 0000 01CE             case 4:
                 _0x5D:
000378 30e4      	CPI  R30,LOW(0x4)
000379 e0a0      	LDI  R26,HIGH(0x4)
00037a 07fa      	CPC  R31,R26
00037b f449      	BRNE _0x5F
                 ; 0000 01CF                     lcd_clear();
00037c 940e 0766 	CALL SUBOPT_0x1C
                 ; 0000 01D0                     lcd_gotoxy(0, 0);
                 ; 0000 01D1                     lcd_putsf("5.PWM TEST");
                +
00037e efee     +LDI R30 , LOW ( 2 * _0x0 + ( 86 ) )
00037f e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 86 ) )
                 	__POINTW1FN _0x0,86
000380 940e 076d 	CALL SUBOPT_0x1D
                 ; 0000 01D2                     if(Middle_switch_on)    check_pwm();
000382 9b0a      	SBIS 0x1,2
000383 dee1      	RCALL _check_pwm
                 ; 0000 01D3                     delay_ms(300);
000384 c023      	RJMP _0x68
                 ; 0000 01D4                     break;
                 ; 0000 01D5 
                 ; 0000 01D6             case 5:
                 _0x5F:
000385 30e5      	CPI  R30,LOW(0x5)
000386 e0a0      	LDI  R26,HIGH(0x5)
000387 07fa      	CPC  R31,R26
000388 f449      	BRNE _0x61
                 ; 0000 01D7                     lcd_clear();
000389 940e 0766 	CALL SUBOPT_0x1C
                 ; 0000 01D8                     lcd_gotoxy(0, 0);
                 ; 0000 01D9                     lcd_putsf("6.PUMP TEST");
                +
00038b e0e9     +LDI R30 , LOW ( 2 * _0x0 + ( 97 ) )
00038c e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 97 ) )
                 	__POINTW1FN _0x0,97
00038d 940e 076d 	CALL SUBOPT_0x1D
                 ; 0000 01DA                     if(Middle_switch_on)    PUMP_test();
00038f 9b0a      	SBIS 0x1,2
000390 def4      	RCALL _PUMP_test
                 ; 0000 01DB                     delay_ms(300);
000391 c016      	RJMP _0x68
                 ; 0000 01DC                     break;
                 ; 0000 01DD 
                 ; 0000 01DE             case 6:
                 _0x61:
000392 30e6      	CPI  R30,LOW(0x6)
000393 e0a0      	LDI  R26,HIGH(0x6)
000394 07fa      	CPC  R31,R26
000395 f461      	BRNE _0x65
                 ; 0000 01DF                     lcd_clear();
000396 940e 0766 	CALL SUBOPT_0x1C
                 ; 0000 01E0                     lcd_gotoxy(0, 0);
                 ; 0000 01E1                     lcd_putsf("7.Order TEST");
                +
000398 e1e5     +LDI R30 , LOW ( 2 * _0x0 + ( 109 ) )
000399 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 109 ) )
                 	__POINTW1FN _0x0,109
00039a 940e 076d 	CALL SUBOPT_0x1D
                 ; 0000 01E2                     if(Middle_switch_on)    sequence=order(sequence);
00039c 990a      	SBIC 0x1,2
00039d c003      	RJMP _0x64
00039e 933a      	ST   -Y,R19
00039f df07      	RCALL _order
0003a0 2f3e      	MOV  R19,R30
                 ; 0000 01E3                     delay_ms(300);
                 _0x64:
0003a1 c006      	RJMP _0x68
                 ; 0000 01E4                     break;
                 ; 0000 01E5 
                 ; 0000 01E6              default :
                 _0x65:
                 ; 0000 01E7                     lcd_clear();
0003a2 940e 0766 	CALL SUBOPT_0x1C
                 ; 0000 01E8                     lcd_gotoxy(0, 0);
                 ; 0000 01E9                     lcd_putsf("**BREAK!**");
                +
0003a4 e2e2     +LDI R30 , LOW ( 2 * _0x0 + ( 122 ) )
0003a5 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 122 ) )
                 	__POINTW1FN _0x0,122
0003a6 940e 076d 	CALL SUBOPT_0x1D
                 ; 0000 01EA                     delay_ms(300);
                 _0x68:
0003a8 e2ec      	LDI  R30,LOW(300)
0003a9 e0f1      	LDI  R31,HIGH(300)
0003aa 93fa      	ST   -Y,R31
0003ab 93ea      	ST   -Y,R30
0003ac 940e 07ac 	CALL _delay_ms
                 ; 0000 01EB                     break;
                 ; 0000 01EC 
                 ; 0000 01ED          }
                 ; 0000 01EE       }
0003ae cf8a      	RJMP _0x4C
                 ; 0000 01EF 
                 ; 0000 01F0 }
                 _0x66:
0003af cfff      	RJMP _0x66
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
0003b0 931a      	ST   -Y,R17
0003b1 930a      	ST   -Y,R16
0003b2 81aa      	LDD  R26,Y+2
0003b3 81bb      	LDD  R27,Y+2+1
0003b4 9612      	ADIW R26,2
0003b5 940e 07e9 	CALL __GETW1P
0003b7 9730      	SBIW R30,0
0003b8 f159      	BREQ _0x2000010
0003b9 81aa      	LDD  R26,Y+2
0003ba 81bb      	LDD  R27,Y+2+1
0003bb 9614      	ADIW R26,4
0003bc 940e 07e9 	CALL __GETW1P
0003be 018f      	MOVW R16,R30
0003bf 9730      	SBIW R30,0
0003c0 f061      	BREQ _0x2000012
                +
0003c1 3002     +CPI R16 , LOW ( 2 )
0003c2 e0e0     +LDI R30 , HIGH ( 2 )
0003c3 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0003c4 f0f0      	BRLO _0x2000013
0003c5 01f8      	MOVW R30,R16
0003c6 9731      	SBIW R30,1
0003c7 018f      	MOVW R16,R30
                +
0003c8 81aa     +LDD R26 , Y + 2
0003c9 81bb     +LDD R27 , Y + 2 + 1
0003ca 9614     +ADIW R26 , 4
0003cb 93ed     +ST X + , R30
0003cc 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
0003cd 81aa      	LDD  R26,Y+2
0003ce 81bb      	LDD  R27,Y+2+1
0003cf 9612      	ADIW R26,2
0003d0 91ed      	LD   R30,X+
0003d1 91fd      	LD   R31,X+
0003d2 9631      	ADIW R30,1
0003d3 93fe      	ST   -X,R31
0003d4 93ee      	ST   -X,R30
0003d5 9731      	SBIW R30,1
0003d6 81ac      	LDD  R26,Y+4
0003d7 83a0      	STD  Z+0,R26
0003d8 81aa      	LDD  R26,Y+2
0003d9 81bb      	LDD  R27,Y+2+1
0003da 940e 07e9 	CALL __GETW1P
0003dc 23ff      	TST  R31
0003dd f02a      	BRMI _0x2000014
0003de 91ed      	LD   R30,X+
0003df 91fd      	LD   R31,X+
0003e0 9631      	ADIW R30,1
0003e1 93fe      	ST   -X,R31
0003e2 93ee      	ST   -X,R30
                 _0x2000014:
                 _0x2000013:
0003e3 c006      	RJMP _0x2000015
                 _0x2000010:
0003e4 81aa      	LDD  R26,Y+2
0003e5 81bb      	LDD  R27,Y+2+1
0003e6 efef      	LDI  R30,LOW(65535)
0003e7 efff      	LDI  R31,HIGH(65535)
0003e8 93ed      	ST   X+,R30
0003e9 93fc      	ST   X,R31
                 _0x2000015:
0003ea 8119      	LDD  R17,Y+1
0003eb 8108      	LDD  R16,Y+0
0003ec 9625      	ADIW R28,5
0003ed 9508      	RET
                 __print_G100:
0003ee 9726      	SBIW R28,6
0003ef 940e 07f6 	CALL __SAVELOCR6
0003f1 e010      	LDI  R17,0
0003f2 85ac      	LDD  R26,Y+12
0003f3 85bd      	LDD  R27,Y+12+1
0003f4 e0e0      	LDI  R30,LOW(0)
0003f5 e0f0      	LDI  R31,HIGH(0)
0003f6 93ed      	ST   X+,R30
0003f7 93fc      	ST   X,R31
                 _0x2000016:
0003f8 89ea      	LDD  R30,Y+18
0003f9 89fb      	LDD  R31,Y+18+1
0003fa 9631      	ADIW R30,1
0003fb 8bea      	STD  Y+18,R30
0003fc 8bfb      	STD  Y+18+1,R31
0003fd 9731      	SBIW R30,1
0003fe 91e4      	LPM  R30,Z
0003ff 2f2e      	MOV  R18,R30
000400 30e0      	CPI  R30,0
000401 f411      	BRNE PC+3
000402 940c 051b 	JMP _0x2000018
000404 2fe1      	MOV  R30,R17
000405 30e0      	CPI  R30,0
000406 f439      	BRNE _0x200001C
000407 3225      	CPI  R18,37
000408 f411      	BRNE _0x200001D
000409 e011      	LDI  R17,LOW(1)
00040a c002      	RJMP _0x200001E
                 _0x200001D:
00040b 940e 0771 	CALL SUBOPT_0x1E
                 _0x200001E:
00040d c10c      	RJMP _0x200001B
                 _0x200001C:
00040e 30e1      	CPI  R30,LOW(0x1)
00040f f4a9      	BRNE _0x200001F
000410 3225      	CPI  R18,37
000411 f419      	BRNE _0x2000020
000412 940e 0771 	CALL SUBOPT_0x1E
000414 c104      	RJMP _0x20000C9
                 _0x2000020:
000415 e012      	LDI  R17,LOW(2)
000416 e040      	LDI  R20,LOW(0)
000417 e000      	LDI  R16,LOW(0)
000418 322d      	CPI  R18,45
000419 f411      	BRNE _0x2000021
00041a e001      	LDI  R16,LOW(1)
00041b c0fe      	RJMP _0x200001B
                 _0x2000021:
00041c 322b      	CPI  R18,43
00041d f411      	BRNE _0x2000022
00041e e24b      	LDI  R20,LOW(43)
00041f c0fa      	RJMP _0x200001B
                 _0x2000022:
000420 3220      	CPI  R18,32
000421 f411      	BRNE _0x2000023
000422 e240      	LDI  R20,LOW(32)
000423 c0f6      	RJMP _0x200001B
                 _0x2000023:
000424 c002      	RJMP _0x2000024
                 _0x200001F:
000425 30e2      	CPI  R30,LOW(0x2)
000426 f439      	BRNE _0x2000025
                 _0x2000024:
000427 e050      	LDI  R21,LOW(0)
000428 e013      	LDI  R17,LOW(3)
000429 3320      	CPI  R18,48
00042a f411      	BRNE _0x2000026
00042b 6800      	ORI  R16,LOW(128)
00042c c0ed      	RJMP _0x200001B
                 _0x2000026:
00042d c004      	RJMP _0x2000027
                 _0x2000025:
00042e 30e3      	CPI  R30,LOW(0x3)
00042f f011      	BREQ PC+3
000430 940c 051a 	JMP _0x200001B
                 _0x2000027:
000432 3320      	CPI  R18,48
000433 f010      	BRLO _0x200002A
000434 332a      	CPI  R18,58
000435 f008      	BRLO _0x200002B
                 _0x200002A:
000436 c007      	RJMP _0x2000029
                 _0x200002B:
000437 e0aa      	LDI  R26,LOW(10)
000438 9f5a      	MUL  R21,R26
000439 2d50      	MOV  R21,R0
00043a 2fe2      	MOV  R30,R18
00043b 53e0      	SUBI R30,LOW(48)
00043c 0f5e      	ADD  R21,R30
00043d c0dc      	RJMP _0x200001B
                 _0x2000029:
00043e 2fe2      	MOV  R30,R18
00043f 36e3      	CPI  R30,LOW(0x63)
000440 f449      	BRNE _0x200002F
000441 940e 077a 	CALL SUBOPT_0x1F
000443 89e8      	LDD  R30,Y+16
000444 89f9      	LDD  R31,Y+16+1
000445 81a4      	LDD  R26,Z+4
000446 93aa      	ST   -Y,R26
000447 940e 0780 	CALL SUBOPT_0x20
000449 c0cf      	RJMP _0x2000030
                 _0x200002F:
00044a 37e3      	CPI  R30,LOW(0x73)
00044b f441      	BRNE _0x2000032
00044c 940e 077a 	CALL SUBOPT_0x1F
00044e 940e 0788 	CALL SUBOPT_0x21
000450 940e 064e 	CALL _strlen
000452 2f1e      	MOV  R17,R30
000453 c00a      	RJMP _0x2000033
                 _0x2000032:
000454 37e0      	CPI  R30,LOW(0x70)
000455 f461      	BRNE _0x2000035
000456 940e 077a 	CALL SUBOPT_0x1F
000458 940e 0788 	CALL SUBOPT_0x21
00045a 940e 0658 	CALL _strlenf
00045c 2f1e      	MOV  R17,R30
00045d 6008      	ORI  R16,LOW(8)
                 _0x2000033:
00045e 6002      	ORI  R16,LOW(2)
00045f 770f      	ANDI R16,LOW(127)
000460 e030      	LDI  R19,LOW(0)
000461 c035      	RJMP _0x2000036
                 _0x2000035:
000462 36e4      	CPI  R30,LOW(0x64)
000463 f011      	BREQ _0x2000039
000464 36e9      	CPI  R30,LOW(0x69)
000465 f411      	BRNE _0x200003A
                 _0x2000039:
000466 6004      	ORI  R16,LOW(4)
000467 c002      	RJMP _0x200003B
                 _0x200003A:
000468 37e5      	CPI  R30,LOW(0x75)
000469 f431      	BRNE _0x200003C
                 _0x200003B:
00046a e8ec      	LDI  R30,LOW(_tbl10_G100*2)
00046b e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
00046c 83ee      	STD  Y+6,R30
00046d 83ff      	STD  Y+6+1,R31
00046e e015      	LDI  R17,LOW(5)
00046f c00d      	RJMP _0x200003D
                 _0x200003C:
000470 35e8      	CPI  R30,LOW(0x58)
000471 f411      	BRNE _0x200003F
000472 6008      	ORI  R16,LOW(8)
000473 c004      	RJMP _0x2000040
                 _0x200003F:
000474 37e8      	CPI  R30,LOW(0x78)
000475 f011      	BREQ PC+3
000476 940c 0519 	JMP _0x2000071
                 _0x2000040:
000478 e9e6      	LDI  R30,LOW(_tbl16_G100*2)
000479 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
00047a 83ee      	STD  Y+6,R30
00047b 83ff      	STD  Y+6+1,R31
00047c e014      	LDI  R17,LOW(4)
                 _0x200003D:
00047d ff02      	SBRS R16,2
00047e c014      	RJMP _0x2000042
00047f 940e 077a 	CALL SUBOPT_0x1F
000481 940e 0792 	CALL SUBOPT_0x22
000483 85ab      	LDD  R26,Y+11
000484 23aa      	TST  R26
000485 f43a      	BRPL _0x2000043
000486 85ea      	LDD  R30,Y+10
000487 85fb      	LDD  R31,Y+10+1
000488 940e 07bc 	CALL __ANEGW1
00048a 87ea      	STD  Y+10,R30
00048b 87fb      	STD  Y+10+1,R31
00048c e24d      	LDI  R20,LOW(45)
                 _0x2000043:
00048d 3040      	CPI  R20,0
00048e f011      	BREQ _0x2000044
00048f 5f1f      	SUBI R17,-LOW(1)
000490 c001      	RJMP _0x2000045
                 _0x2000044:
000491 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
000492 c004      	RJMP _0x2000046
                 _0x2000042:
000493 940e 077a 	CALL SUBOPT_0x1F
000495 940e 0792 	CALL SUBOPT_0x22
                 _0x2000046:
                 _0x2000036:
000497 fd00      	SBRC R16,0
000498 c011      	RJMP _0x2000047
                 _0x2000048:
000499 1715      	CP   R17,R21
00049a f478      	BRSH _0x200004A
00049b ff07      	SBRS R16,7
00049c c008      	RJMP _0x200004B
00049d ff02      	SBRS R16,2
00049e c004      	RJMP _0x200004C
00049f 7f0b      	ANDI R16,LOW(251)
0004a0 2f24      	MOV  R18,R20
0004a1 5011      	SUBI R17,LOW(1)
0004a2 c001      	RJMP _0x200004D
                 _0x200004C:
0004a3 e320      	LDI  R18,LOW(48)
                 _0x200004D:
0004a4 c001      	RJMP _0x200004E
                 _0x200004B:
0004a5 e220      	LDI  R18,LOW(32)
                 _0x200004E:
0004a6 940e 0771 	CALL SUBOPT_0x1E
0004a8 5051      	SUBI R21,LOW(1)
0004a9 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
0004aa 2f31      	MOV  R19,R17
0004ab ff01      	SBRS R16,1
0004ac c017      	RJMP _0x200004F
                 _0x2000050:
0004ad 3030      	CPI  R19,0
0004ae f0a1      	BREQ _0x2000052
0004af ff03      	SBRS R16,3
0004b0 c006      	RJMP _0x2000053
0004b1 81ee      	LDD  R30,Y+6
0004b2 81ff      	LDD  R31,Y+6+1
0004b3 9125      	LPM  R18,Z+
0004b4 83ee      	STD  Y+6,R30
0004b5 83ff      	STD  Y+6+1,R31
0004b6 c005      	RJMP _0x2000054
                 _0x2000053:
0004b7 81ae      	LDD  R26,Y+6
0004b8 81bf      	LDD  R27,Y+6+1
0004b9 912d      	LD   R18,X+
0004ba 83ae      	STD  Y+6,R26
0004bb 83bf      	STD  Y+6+1,R27
                 _0x2000054:
0004bc 940e 0771 	CALL SUBOPT_0x1E
0004be 3050      	CPI  R21,0
0004bf f009      	BREQ _0x2000055
0004c0 5051      	SUBI R21,LOW(1)
                 _0x2000055:
0004c1 5031      	SUBI R19,LOW(1)
0004c2 cfea      	RJMP _0x2000050
                 _0x2000052:
0004c3 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
0004c4 e320      	LDI  R18,LOW(48)
0004c5 81ee      	LDD  R30,Y+6
0004c6 81ff      	LDD  R31,Y+6+1
0004c7 940e 07ed 	CALL __GETW1PF
0004c9 87e8      	STD  Y+8,R30
0004ca 87f9      	STD  Y+8+1,R31
0004cb 81ee      	LDD  R30,Y+6
0004cc 81ff      	LDD  R31,Y+6+1
0004cd 9632      	ADIW R30,2
0004ce 83ee      	STD  Y+6,R30
0004cf 83ff      	STD  Y+6+1,R31
                 _0x200005A:
0004d0 85e8      	LDD  R30,Y+8
0004d1 85f9      	LDD  R31,Y+8+1
0004d2 85aa      	LDD  R26,Y+10
0004d3 85bb      	LDD  R27,Y+10+1
0004d4 17ae      	CP   R26,R30
0004d5 07bf      	CPC  R27,R31
0004d6 f050      	BRLO _0x200005C
0004d7 5f2f      	SUBI R18,-LOW(1)
0004d8 85a8      	LDD  R26,Y+8
0004d9 85b9      	LDD  R27,Y+8+1
0004da 85ea      	LDD  R30,Y+10
0004db 85fb      	LDD  R31,Y+10+1
0004dc 1bea      	SUB  R30,R26
0004dd 0bfb      	SBC  R31,R27
0004de 87ea      	STD  Y+10,R30
0004df 87fb      	STD  Y+10+1,R31
0004e0 cfef      	RJMP _0x200005A
                 _0x200005C:
0004e1 332a      	CPI  R18,58
0004e2 f028      	BRLO _0x200005D
0004e3 ff03      	SBRS R16,3
0004e4 c002      	RJMP _0x200005E
0004e5 5f29      	SUBI R18,-LOW(7)
0004e6 c001      	RJMP _0x200005F
                 _0x200005E:
0004e7 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
0004e8 fd04      	SBRC R16,4
0004e9 c01a      	RJMP _0x2000061
0004ea 3321      	CPI  R18,49
0004eb f420      	BRSH _0x2000063
0004ec 85a8      	LDD  R26,Y+8
0004ed 85b9      	LDD  R27,Y+8+1
0004ee 9711      	SBIW R26,1
0004ef f409      	BRNE _0x2000062
                 _0x2000063:
0004f0 c009      	RJMP _0x20000CA
                 _0x2000062:
0004f1 1753      	CP   R21,R19
0004f2 f010      	BRLO _0x2000067
0004f3 ff00      	SBRS R16,0
0004f4 c001      	RJMP _0x2000068
                 _0x2000067:
0004f5 c013      	RJMP _0x2000066
                 _0x2000068:
0004f6 e220      	LDI  R18,LOW(32)
0004f7 ff07      	SBRS R16,7
0004f8 c00b      	RJMP _0x2000069
0004f9 e320      	LDI  R18,LOW(48)
                 _0x20000CA:
0004fa 6100      	ORI  R16,LOW(16)
0004fb ff02      	SBRS R16,2
0004fc c007      	RJMP _0x200006A
0004fd 7f0b      	ANDI R16,LOW(251)
0004fe 934a      	ST   -Y,R20
0004ff 940e 0780 	CALL SUBOPT_0x20
000501 3050      	CPI  R21,0
000502 f009      	BREQ _0x200006B
000503 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
000504 940e 0771 	CALL SUBOPT_0x1E
000506 3050      	CPI  R21,0
000507 f009      	BREQ _0x200006C
000508 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
000509 5031      	SUBI R19,LOW(1)
00050a 85a8      	LDD  R26,Y+8
00050b 85b9      	LDD  R27,Y+8+1
00050c 9712      	SBIW R26,2
00050d f008      	BRLO _0x2000059
00050e cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
00050f ff00      	SBRS R16,0
000510 c008      	RJMP _0x200006D
                 _0x200006E:
000511 3050      	CPI  R21,0
000512 f031      	BREQ _0x2000070
000513 5051      	SUBI R21,LOW(1)
000514 e2e0      	LDI  R30,LOW(32)
000515 93ea      	ST   -Y,R30
000516 940e 0780 	CALL SUBOPT_0x20
000518 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000C9:
000519 e010      	LDI  R17,LOW(0)
                 _0x200001B:
00051a cedd      	RJMP _0x2000016
                 _0x2000018:
00051b 85ac      	LDD  R26,Y+12
00051c 85bd      	LDD  R27,Y+12+1
00051d 940e 07e9 	CALL __GETW1P
00051f 940e 07fd 	CALL __LOADLOCR6
000521 9664      	ADIW R28,20
000522 9508      	RET
                 _sprintf:
000523 92ff      	PUSH R15
000524 2ef8      	MOV  R15,R24
000525 9726      	SBIW R28,6
000526 940e 07f8 	CALL __SAVELOCR4
000528 940e 079a 	CALL SUBOPT_0x23
00052a 9730      	SBIW R30,0
00052b f419      	BRNE _0x2000072
00052c efef      	LDI  R30,LOW(65535)
00052d efff      	LDI  R31,HIGH(65535)
00052e c025      	RJMP _0x2080003
                 _0x2000072:
00052f 01de      	MOVW R26,R28
000530 9616      	ADIW R26,6
000531 940e 07b8 	CALL __ADDW2R15
000533 018d      	MOVW R16,R26
000534 940e 079a 	CALL SUBOPT_0x23
000536 83ee      	STD  Y+6,R30
000537 83ff      	STD  Y+6+1,R31
000538 e0e0      	LDI  R30,LOW(0)
000539 87e8      	STD  Y+8,R30
00053a 87e9      	STD  Y+8+1,R30
00053b 01de      	MOVW R26,R28
00053c 961a      	ADIW R26,10
00053d 940e 07b8 	CALL __ADDW2R15
00053f 940e 07e9 	CALL __GETW1P
000541 93fa      	ST   -Y,R31
000542 93ea      	ST   -Y,R30
000543 931a      	ST   -Y,R17
000544 930a      	ST   -Y,R16
000545 ebe0      	LDI  R30,LOW(_put_buff_G100)
000546 e0f3      	LDI  R31,HIGH(_put_buff_G100)
000547 93fa      	ST   -Y,R31
000548 93ea      	ST   -Y,R30
000549 01fe      	MOVW R30,R28
00054a 963a      	ADIW R30,10
00054b 93fa      	ST   -Y,R31
00054c 93ea      	ST   -Y,R30
00054d dea0      	RCALL __print_G100
00054e 019f      	MOVW R18,R30
00054f 81ae      	LDD  R26,Y+6
000550 81bf      	LDD  R27,Y+6+1
000551 e0e0      	LDI  R30,LOW(0)
000552 93ec      	ST   X,R30
000553 01f9      	MOVW R30,R18
                 _0x2080003:
000554 940e 07ff 	CALL __LOADLOCR4
000556 962a      	ADIW R28,10
000557 90ff      	POP  R15
000558 9508      	RET
                     .equ __lcd_direction=__lcd_port-1
                     .equ __lcd_pin=__lcd_port-2
                     .equ __lcd_rs=0
                     .equ __lcd_rd=1
                     .equ __lcd_enable=2
                     .equ __lcd_busy_flag=7
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_delay_G101:
000559 e0ff          ldi   r31,15
                 __lcd_delay0:
00055a 95fa          dec   r31
00055b f7f1          brne  __lcd_delay0
00055c 9508      	RET
                 __lcd_ready:
00055d b3a1          in    r26,__lcd_direction
00055e 70af          andi  r26,0xf                 ;set as input
00055f bba1          out   __lcd_direction,r26
000560 9a91          sbi   __lcd_port,__lcd_rd     ;RD=1
000561 9890          cbi   __lcd_port,__lcd_rs     ;RS=0
                 __lcd_busy:
000562 dff6      	RCALL __lcd_delay_G101
000563 9a92          sbi   __lcd_port,__lcd_enable ;EN=1
000564 dff4      	RCALL __lcd_delay_G101
000565 b3a0          in    r26,__lcd_pin
000566 9892          cbi   __lcd_port,__lcd_enable ;EN=0
000567 dff1      	RCALL __lcd_delay_G101
000568 9a92          sbi   __lcd_port,__lcd_enable ;EN=1
000569 dfef      	RCALL __lcd_delay_G101
00056a 9892          cbi   __lcd_port,__lcd_enable ;EN=0
00056b fda7          sbrc  r26,__lcd_busy_flag
00056c cff5          rjmp  __lcd_busy
00056d 9508      	RET
                 __lcd_write_nibble_G101:
00056e 7fa0          andi  r26,0xf0
00056f 2bab          or    r26,r27
000570 bba2          out   __lcd_port,r26          ;write
000571 9a92          sbi   __lcd_port,__lcd_enable ;EN=1
000572 940e 0559 	CALL __lcd_delay_G101
000574 9892          cbi   __lcd_port,__lcd_enable ;EN=0
000575 940e 0559 	CALL __lcd_delay_G101
000577 9508      	RET
                 __lcd_write_data:
000578 9891          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000579 b3a1          in    r26,__lcd_direction
00057a 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output
00057b bba1          out   __lcd_direction,r26
00057c b3b2          in    r27,__lcd_port
00057d 70bf          andi  r27,0xf
00057e 81a8          ld    r26,y
00057f dfee      	RCALL __lcd_write_nibble_G101
000580 81a8          ld    r26,y
000581 95a2          swap  r26
000582 dfeb      	RCALL __lcd_write_nibble_G101
000583 9a91          sbi   __lcd_port,__lcd_rd     ;RD=1
000584 940c 064c 	JMP  _0x2080001
                 __lcd_read_nibble_G101:
000586 9a92          sbi   __lcd_port,__lcd_enable ;EN=1
000587 940e 0559 	CALL __lcd_delay_G101
000589 b3e0          in    r30,__lcd_pin           ;read
00058a 9892          cbi   __lcd_port,__lcd_enable ;EN=0
00058b 940e 0559 	CALL __lcd_delay_G101
00058d 7fe0          andi  r30,0xf0
00058e 9508      	RET
                 _lcd_read_byte0_G101:
00058f 940e 0559 	CALL __lcd_delay_G101
000591 dff4      	RCALL __lcd_read_nibble_G101
000592 2fae          mov   r26,r30
000593 dff2      	RCALL __lcd_read_nibble_G101
000594 9891          cbi   __lcd_port,__lcd_rd     ;RD=0
000595 95e2          swap  r30
000596 2bea          or    r30,r26
000597 9508      	RET
                 _lcd_gotoxy:
000598 940e 055d 	CALL __lcd_ready
00059a 81e8      	LD   R30,Y
00059b e0f0      	LDI  R31,0
00059c 51eb      	SUBI R30,LOW(-__base_y_G101)
00059d 4ff9      	SBCI R31,HIGH(-__base_y_G101)
00059e 81e0      	LD   R30,Z
00059f 81a9      	LDD  R26,Y+1
0005a0 0fea      	ADD  R30,R26
0005a1 93ea      	ST   -Y,R30
0005a2 940e 0578 	CALL __lcd_write_data
0005a4 81e9      	LDD  R30,Y+1
0005a5 93e0 06e9 	STS  __lcd_x,R30
0005a7 81e8      	LD   R30,Y
0005a8 93e0 06ea 	STS  __lcd_y,R30
0005aa 9622      	ADIW R28,2
0005ab 9508      	RET
                 _lcd_clear:
0005ac 940e 055d 	CALL __lcd_ready
0005ae e0e2      	LDI  R30,LOW(2)
0005af 93ea      	ST   -Y,R30
0005b0 940e 0578 	CALL __lcd_write_data
0005b2 940e 055d 	CALL __lcd_ready
0005b4 e0ec      	LDI  R30,LOW(12)
0005b5 93ea      	ST   -Y,R30
0005b6 940e 0578 	CALL __lcd_write_data
0005b8 940e 055d 	CALL __lcd_ready
0005ba e0e1      	LDI  R30,LOW(1)
0005bb 93ea      	ST   -Y,R30
0005bc 940e 0578 	CALL __lcd_write_data
0005be e0e0      	LDI  R30,LOW(0)
0005bf 93e0 06ea 	STS  __lcd_y,R30
0005c1 93e0 06e9 	STS  __lcd_x,R30
0005c3 9508      	RET
                 _lcd_putchar:
0005c4 93ef          push r30
0005c5 93ff          push r31
0005c6 81a8          ld   r26,y
0005c7 9468          set
0005c8 30aa          cpi  r26,10
0005c9 f039          breq __lcd_putchar1
0005ca 94e8          clt
0005cb 91e0 06eb 	LDS  R30,__lcd_maxx
0005cd 91a0 06e9 	LDS  R26,__lcd_x
0005cf 17ae      	CP   R26,R30
0005d0 f060      	BRLO _0x2020004
                 	__lcd_putchar1:
0005d1 91e0 06ea 	LDS  R30,__lcd_y
0005d3 5fef      	SUBI R30,-LOW(1)
0005d4 93e0 06ea 	STS  __lcd_y,R30
0005d6 e0e0      	LDI  R30,LOW(0)
0005d7 93ea      	ST   -Y,R30
0005d8 91e0 06ea 	LDS  R30,__lcd_y
0005da 93ea      	ST   -Y,R30
0005db dfbc      	RCALL _lcd_gotoxy
0005dc f056      	brts __lcd_putchar0
                 _0x2020004:
0005dd 91e0 06e9 	LDS  R30,__lcd_x
0005df 5fef      	SUBI R30,-LOW(1)
0005e0 93e0 06e9 	STS  __lcd_x,R30
0005e2 df7a          rcall __lcd_ready
0005e3 9a90          sbi  __lcd_port,__lcd_rs ;RS=1
0005e4 81a8          ld   r26,y
0005e5 93aa          st   -y,r26
0005e6 df91          rcall __lcd_write_data
                 __lcd_putchar0:
0005e7 91ff          pop  r31
0005e8 91ef          pop  r30
0005e9 940c 064c 	JMP  _0x2080001
                 _lcd_puts:
0005eb 931a      	ST   -Y,R17
                 _0x2020005:
0005ec 81a9      	LDD  R26,Y+1
0005ed 81ba      	LDD  R27,Y+1+1
0005ee 91ed      	LD   R30,X+
0005ef 83a9      	STD  Y+1,R26
0005f0 83ba      	STD  Y+1+1,R27
0005f1 2f1e      	MOV  R17,R30
0005f2 30e0      	CPI  R30,0
0005f3 f019      	BREQ _0x2020007
0005f4 931a      	ST   -Y,R17
0005f5 dfce      	RCALL _lcd_putchar
0005f6 cff5      	RJMP _0x2020005
                 _0x2020007:
0005f7 c00e      	RJMP _0x2080002
                 _lcd_putsf:
0005f8 931a      	ST   -Y,R17
                 _0x2020008:
0005f9 81e9      	LDD  R30,Y+1
0005fa 81fa      	LDD  R31,Y+1+1
0005fb 9631      	ADIW R30,1
0005fc 83e9      	STD  Y+1,R30
0005fd 83fa      	STD  Y+1+1,R31
0005fe 9731      	SBIW R30,1
0005ff 91e4      	LPM  R30,Z
000600 2f1e      	MOV  R17,R30
000601 30e0      	CPI  R30,0
000602 f019      	BREQ _0x202000A
000603 931a      	ST   -Y,R17
000604 dfbf      	RCALL _lcd_putchar
000605 cff3      	RJMP _0x2020008
                 _0x202000A:
                 _0x2080002:
000606 8118      	LDD  R17,Y+0
000607 9623      	ADIW R28,3
000608 9508      	RET
                 __long_delay_G101:
000609 27aa          clr   r26
00060a 27bb          clr   r27
                 __long_delay0:
00060b 9711          sbiw  r26,1         ;2 cycles
00060c f7f1          brne  __long_delay0 ;2 cycles
00060d 9508      	RET
                 __lcd_init_write_G101:
00060e 9891          cbi  __lcd_port,__lcd_rd 	  ;RD=0
00060f b3a1          in    r26,__lcd_direction
000610 6fa7          ori   r26,0xf7                ;set as output
000611 bba1          out   __lcd_direction,r26
000612 b3b2          in    r27,__lcd_port
000613 70bf          andi  r27,0xf
000614 81a8          ld    r26,y
000615 940e 056e 	CALL __lcd_write_nibble_G101
000617 9a91          sbi   __lcd_port,__lcd_rd     ;RD=1
000618 c033      	RJMP _0x2080001
                 _lcd_init:
000619 9892          cbi   __lcd_port,__lcd_enable ;EN=0
00061a 9890          cbi   __lcd_port,__lcd_rs     ;RS=0
00061b 81e8      	LD   R30,Y
00061c 93e0 06eb 	STS  __lcd_maxx,R30
00061e 58e0      	SUBI R30,-LOW(128)
                +
00061f 93e0 06e7+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
000621 81e8      	LD   R30,Y
000622 54e0      	SUBI R30,-LOW(192)
                +
000623 93e0 06e8+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
000625 940e 07a1 	CALL SUBOPT_0x24
000627 940e 07a1 	CALL SUBOPT_0x24
000629 940e 07a1 	CALL SUBOPT_0x24
00062b dfdd      	RCALL __long_delay_G101
00062c e2e0      	LDI  R30,LOW(32)
00062d 93ea      	ST   -Y,R30
00062e dfdf      	RCALL __lcd_init_write_G101
00062f dfd9      	RCALL __long_delay_G101
000630 e2e8      	LDI  R30,LOW(40)
000631 940e 07a7 	CALL SUBOPT_0x25
000633 e0e4      	LDI  R30,LOW(4)
000634 940e 07a7 	CALL SUBOPT_0x25
000636 e8e5      	LDI  R30,LOW(133)
000637 940e 07a7 	CALL SUBOPT_0x25
000639 b3a1          in    r26,__lcd_direction
00063a 70af          andi  r26,0xf                 ;set as input
00063b bba1          out   __lcd_direction,r26
00063c 9a91          sbi   __lcd_port,__lcd_rd     ;RD=1
00063d 940e 058f 	CALL _lcd_read_byte0_G101
00063f 30e5      	CPI  R30,LOW(0x5)
000640 f011      	BREQ _0x202000B
000641 e0e0      	LDI  R30,LOW(0)
000642 c009      	RJMP _0x2080001
                 _0x202000B:
000643 940e 055d 	CALL __lcd_ready
000645 e0e6      	LDI  R30,LOW(6)
000646 93ea      	ST   -Y,R30
000647 940e 0578 	CALL __lcd_write_data
000649 940e 05ac 	CALL _lcd_clear
00064b e0e1      	LDI  R30,LOW(1)
                 _0x2080001:
00064c 9621      	ADIW R28,1
00064d 9508      	RET
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
00064e 91a9          ld   r26,y+
00064f 91b9          ld   r27,y+
000650 27ee          clr  r30
000651 27ff          clr  r31
                 strlen0:
000652 916d          ld   r22,x+
000653 2366          tst  r22
000654 f011          breq strlen1
000655 9631          adiw r30,1
000656 cffb          rjmp strlen0
                 strlen1:
000657 9508          ret
                 _strlenf:
000658 27aa          clr  r26
000659 27bb          clr  r27
00065a 91e9          ld   r30,y+
00065b 91f9          ld   r31,y+
                 strlenf0:
00065c 9005      	lpm  r0,z+
00065d 2000          tst  r0
00065e f011          breq strlenf1
00065f 9611          adiw r26,1
000660 cffb          rjmp strlenf0
                 strlenf1:
000661 01fd          movw r30,r26
000662 9508          ret
                 
                 	.DSEG
                 _sam_num:
000500           	.BYTE 0x1
                 _i:
000501           	.BYTE 0x2
                 _lcd_data:
000503           	.BYTE 0x28
                 _mux:
00052b           	.BYTE 0x1
                 _d_flag:
00052c           	.BYTE 0x1
                 _pressure_data:
00052d           	.BYTE 0xC8
                 _pressure_sum:
0005f5           	.BYTE 0x8
                 _pressure_mean:
0005fd           	.BYTE 0x4
                 _pressure_max:
000601           	.BYTE 0x4
                 _pressure_min:
000605           	.BYTE 0x4
                 _flex_data:
000609           	.BYTE 0xC8
                 _flex_sum:
0006d1           	.BYTE 0x8
                 _flex_mean:
0006d9           	.BYTE 0x4
                 _flex_max:
0006dd           	.BYTE 0x4
                 _flex_min:
0006e1           	.BYTE 0x4
                 __base_y_G101:
0006e5           	.BYTE 0x4
                 __lcd_x:
0006e9           	.BYTE 0x1
                 __lcd_y:
0006ea           	.BYTE 0x1
                 __lcd_maxx:
0006eb           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000663 91a0 0501 	LDS  R26,_i
000665 91b0 0502 	LDS  R27,_i+1
000667 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x1:
000668 91e0 0501 	LDS  R30,_i
00066a 91f0 0502 	LDS  R31,_i+1
00066c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
00066d efa5      	LDI  R26,LOW(_pressure_sum)
00066e e0b5      	LDI  R27,HIGH(_pressure_sum)
00066f 0fee      	LSL  R30
000670 1fff      	ROL  R31
000671 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3:
000672 8170      	LD   R23,Z
000673 8181      	LDD  R24,Z+1
000674 dfee      	RCALL SUBOPT_0x0
000675 e3e2      	LDI  R30,LOW(50)
000676 940e 07d0 	CALL __MULB1W2U
000678 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4:
000679 01df      	MOVW R26,R30
00067a 27ee      	CLR  R30
00067b 0fa1      	ADD  R26,R17
00067c 1fbe      	ADC  R27,R30
00067d 91ec      	LD   R30,X
00067e e0f0      	LDI  R31,0
00067f 0fe7      	ADD  R30,R23
000680 1ff8      	ADC  R31,R24
000681 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x5:
000682 0fae      	ADD  R26,R30
000683 1fbf      	ADC  R27,R31
000684 940e 07e9 	CALL __GETW1P
000686 01df      	MOVW R26,R30
000687 e3e2      	LDI  R30,LOW(50)
000688 e0f0      	LDI  R31,HIGH(50)
000689 940e 07d6 	CALL __DIVW21U
00068b 01db      	MOVW R26,R22
00068c 93ec      	ST   X,R30
00068d cfda      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
00068e 0fae      	ADD  R26,R30
00068f 1fbf      	ADC  R27,R31
000690 e0e0      	LDI  R30,LOW(0)
000691 e0f0      	LDI  R31,HIGH(0)
000692 93ed      	ST   X+,R30
000693 93fc      	ST   X,R31
000694 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x7:
000695 e0a1      	LDI  R26,LOW(_i)
000696 e0b5      	LDI  R27,HIGH(_i)
000697 91ed      	LD   R30,X+
000698 91fd      	LD   R31,X+
000699 9631      	ADIW R30,1
00069a 93fe      	ST   -X,R31
00069b 93ee      	ST   -X,R30
00069c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x8:
00069d 931a      	ST   -Y,R17
00069e e010      	LDI  R17,0
00069f e2ec      	LDI  R30,LOW(300)
0006a0 e0f1      	LDI  R31,HIGH(300)
0006a1 93fa      	ST   -Y,R31
0006a2 93ea      	ST   -Y,R30
0006a3 940c 07ac 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x9:
0006a5 940e 012a 	CALL _mean_pressure
0006a7 940e 05ac 	CALL _lcd_clear
0006a9 e0e0      	LDI  R30,LOW(0)
0006aa 93ea      	ST   -Y,R30
0006ab 93ea      	ST   -Y,R30
0006ac 940c 0598 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
                +
0006ae eae8     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0006af e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0006b0 93fa      	ST   -Y,R31
0006b1 93ea      	ST   -Y,R30
0006b2 940c 05f8 	JMP  _lcd_putsf
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:36 WORDS
                 SUBOPT_0xB:
0006b4 e0e0      	LDI  R30,LOW(0)
0006b5 93ea      	ST   -Y,R30
0006b6 e0e1      	LDI  R30,LOW(1)
0006b7 93ea      	ST   -Y,R30
0006b8 940e 0598 	CALL _lcd_gotoxy
0006ba e0e3      	LDI  R30,LOW(_lcd_data)
0006bb e0f5      	LDI  R31,HIGH(_lcd_data)
0006bc 93fa      	ST   -Y,R31
0006bd 93ea      	ST   -Y,R30
                +
0006be ebe0     +LDI R30 , LOW ( 2 * _0x0 + ( 8 ) )
0006bf e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 8 ) )
                 	__POINTW1FN _0x0,8
0006c0 93fa      	ST   -Y,R31
0006c1 93ea      	ST   -Y,R30
0006c2 2fe1      	MOV  R30,R17
0006c3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:114 WORDS
                 SUBOPT_0xC:
0006c4 27ff      	CLR  R31
0006c5 2766      	CLR  R22
0006c6 2777      	CLR  R23
0006c7 940e 07f1 	CALL __PUTPARD1
0006c9 e084      	LDI  R24,4
0006ca 940e 0523 	CALL _sprintf
0006cc 9628      	ADIW R28,8
0006cd e0e3      	LDI  R30,LOW(_lcd_data)
0006ce e0f5      	LDI  R31,HIGH(_lcd_data)
0006cf 93fa      	ST   -Y,R31
0006d0 93ea      	ST   -Y,R30
0006d1 940c 05eb 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:45 WORDS
                 SUBOPT_0xD:
0006d3 e0e4      	LDI  R30,LOW(4)
0006d4 93ea      	ST   -Y,R30
0006d5 e0e1      	LDI  R30,LOW(1)
0006d6 93ea      	ST   -Y,R30
0006d7 940e 0598 	CALL _lcd_gotoxy
0006d9 e0e3      	LDI  R30,LOW(_lcd_data)
0006da e0f5      	LDI  R31,HIGH(_lcd_data)
0006db 93fa      	ST   -Y,R31
0006dc 93ea      	ST   -Y,R30
                +
0006dd ebe0     +LDI R30 , LOW ( 2 * _0x0 + ( 8 ) )
0006de e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 8 ) )
                 	__POINTW1FN _0x0,8
0006df 93fa      	ST   -Y,R31
0006e0 93ea      	ST   -Y,R30
0006e1 2fe1      	MOV  R30,R17
0006e2 e0f0      	LDI  R31,0
0006e3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
0006e4 ece8      	LDI  R30,LOW(200)
0006e5 e0f0      	LDI  R31,HIGH(200)
0006e6 93fa      	ST   -Y,R31
0006e7 93ea      	ST   -Y,R30
0006e8 940c 07ac 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xF:
0006ea 931a      	ST   -Y,R17
0006eb e010      	LDI  R17,0
0006ec efe4      	LDI  R30,LOW(500)
0006ed e0f1      	LDI  R31,HIGH(500)
0006ee 93fa      	ST   -Y,R31
0006ef 93ea      	ST   -Y,R30
0006f0 940c 07ac 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
                +
0006f2 ebe3     +LDI R30 , LOW ( 2 * _0x0 + ( 11 ) )
0006f3 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 11 ) )
                 	__POINTW1FN _0x0,11
0006f4 93fa      	ST   -Y,R31
0006f5 93ea      	ST   -Y,R30
0006f6 940c 05f8 	JMP  _lcd_putsf
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x11:
0006f8 2fe1      	MOV  R30,R17
0006f9 e0f0      	LDI  R31,0
0006fa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x12:
0006fb 81a0      	LD   R26,Z
0006fc 01f0      	MOVW R30,R0
0006fd 5fef      	SUBI R30,LOW(-_pressure_max)
0006fe 4ff9      	SBCI R31,HIGH(-_pressure_max)
0006ff 81e0      	LD   R30,Z
000700 17ea      	CP   R30,R26
000701 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x13:
000702 2fa1      	MOV  R26,R17
000703 e0b0      	LDI  R27,0
000704 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x14:
000705 50e3      	SUBI R30,LOW(-_pressure_mean)
000706 4ffa      	SBCI R31,HIGH(-_pressure_mean)
000707 81e0      	LD   R30,Z
000708 93ec      	ST   X,R30
000709 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x15:
00070a 81a0      	LD   R26,Z
00070b 01f0      	MOVW R30,R0
00070c 5feb      	SUBI R30,LOW(-_pressure_min)
00070d 4ff9      	SBCI R31,HIGH(-_pressure_min)
00070e 81e0      	LD   R30,Z
00070f 17ae      	CP   R26,R30
000710 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x16:
000711 e0e0      	LDI  R30,LOW(0)
000712 93ea      	ST   -Y,R30
000713 e0e7      	LDI  R30,LOW(7)
000714 93ea      	ST   -Y,R30
000715 940e 0598 	CALL _lcd_gotoxy
000717 e0e3      	LDI  R30,LOW(_lcd_data)
000718 e0f5      	LDI  R31,HIGH(_lcd_data)
000719 93fa      	ST   -Y,R31
00071a 93ea      	ST   -Y,R30
                +
00071b ebe0     +LDI R30 , LOW ( 2 * _0x0 + ( 8 ) )
00071c e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 8 ) )
                 	__POINTW1FN _0x0,8
00071d 93fa      	ST   -Y,R31
00071e 93ea      	ST   -Y,R30
00071f 2fe1      	MOV  R30,R17
000720 cfa3      	RJMP SUBOPT_0xC
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x17:
000721 e6e4      	LDI  R30,LOW(100)
000722 e0f0      	LDI  R31,HIGH(100)
000723 93fa      	ST   -Y,R31
000724 93ea      	ST   -Y,R30
000725 940c 07ac 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x18:
000727 df40      	RCALL SUBOPT_0x1
000728 eda1      	LDI  R26,LOW(_flex_sum)
000729 e0b6      	LDI  R27,HIGH(_flex_sum)
00072a 0fee      	LSL  R30
00072b 1fff      	ROL  R31
00072c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x19:
00072d 940e 01c8 	CALL _mean_flex
00072f 940e 05ac 	CALL _lcd_clear
000731 e0e0      	LDI  R30,LOW(0)
000732 93ea      	ST   -Y,R30
000733 93ea      	ST   -Y,R30
000734 940c 0598 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1A:
000736 931a      	ST   -Y,R17
000737 930a      	ST   -Y,R16
                +
000738 e50e     +LDI R16 , LOW ( 350 )
000739 e011     +LDI R17 , HIGH ( 350 )
                 	__GETWRN 16,17,350
00073a cfe6      	RJMP SUBOPT_0x17
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:40 WORDS
                 SUBOPT_0x1B:
00073b 940e 05ac 	CALL _lcd_clear
00073d e0e0      	LDI  R30,LOW(0)
00073e 93ea      	ST   -Y,R30
00073f 93ea      	ST   -Y,R30
000740 940e 0598 	CALL _lcd_gotoxy
                +
000742 ebeb     +LDI R30 , LOW ( 2 * _0x0 + ( 19 ) )
000743 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 19 ) )
                 	__POINTW1FN _0x0,19
000744 93fa      	ST   -Y,R31
000745 93ea      	ST   -Y,R30
000746 940e 05f8 	CALL _lcd_putsf
000748 e0e0      	LDI  R30,LOW(0)
000749 93ea      	ST   -Y,R30
00074a e0e1      	LDI  R30,LOW(1)
00074b 93ea      	ST   -Y,R30
00074c 940e 0598 	CALL _lcd_gotoxy
00074e e0e3      	LDI  R30,LOW(_lcd_data)
00074f e0f5      	LDI  R31,HIGH(_lcd_data)
000750 93fa      	ST   -Y,R31
000751 93ea      	ST   -Y,R30
                +
000752 ebe0     +LDI R30 , LOW ( 2 * _0x0 + ( 8 ) )
000753 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 8 ) )
                 	__POINTW1FN _0x0,8
000754 93fa      	ST   -Y,R31
000755 93ea      	ST   -Y,R30
000756 01f8      	MOVW R30,R16
000757 2766      	CLR  R22
000758 2777      	CLR  R23
000759 940e 07f1 	CALL __PUTPARD1
00075b e084      	LDI  R24,4
00075c 940e 0523 	CALL _sprintf
00075e 9628      	ADIW R28,8
00075f e0e3      	LDI  R30,LOW(_lcd_data)
000760 e0f5      	LDI  R31,HIGH(_lcd_data)
000761 93fa      	ST   -Y,R31
000762 93ea      	ST   -Y,R30
000763 940e 05eb 	CALL _lcd_puts
000765 cfbb      	RJMP SUBOPT_0x17
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:39 WORDS
                 SUBOPT_0x1C:
000766 940e 05ac 	CALL _lcd_clear
000768 e0e0      	LDI  R30,LOW(0)
000769 93ea      	ST   -Y,R30
00076a 93ea      	ST   -Y,R30
00076b 940c 0598 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x1D:
00076d 93fa      	ST   -Y,R31
00076e 93ea      	ST   -Y,R30
00076f 940c 05f8 	JMP  _lcd_putsf
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x1E:
000771 932a      	ST   -Y,R18
000772 85ed      	LDD  R30,Y+13
000773 85fe      	LDD  R31,Y+13+1
000774 93fa      	ST   -Y,R31
000775 93ea      	ST   -Y,R30
000776 89e9      	LDD  R30,Y+17
000777 89fa      	LDD  R31,Y+17+1
000778 9509      	ICALL
000779 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1F:
00077a 89e8      	LDD  R30,Y+16
00077b 89f9      	LDD  R31,Y+16+1
00077c 9734      	SBIW R30,4
00077d 8be8      	STD  Y+16,R30
00077e 8bf9      	STD  Y+16+1,R31
00077f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x20:
000780 85ed      	LDD  R30,Y+13
000781 85fe      	LDD  R31,Y+13+1
000782 93fa      	ST   -Y,R31
000783 93ea      	ST   -Y,R30
000784 89e9      	LDD  R30,Y+17
000785 89fa      	LDD  R31,Y+17+1
000786 9509      	ICALL
000787 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x21:
000788 89a8      	LDD  R26,Y+16
000789 89b9      	LDD  R27,Y+16+1
00078a 9614      	ADIW R26,4
00078b 940e 07e9 	CALL __GETW1P
00078d 83ee      	STD  Y+6,R30
00078e 83ff      	STD  Y+6+1,R31
00078f 93fa      	ST   -Y,R31
000790 93ea      	ST   -Y,R30
000791 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x22:
000792 89a8      	LDD  R26,Y+16
000793 89b9      	LDD  R27,Y+16+1
000794 9614      	ADIW R26,4
000795 940e 07e9 	CALL __GETW1P
000797 87ea      	STD  Y+10,R30
000798 87fb      	STD  Y+10+1,R31
000799 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x23:
00079a 01de      	MOVW R26,R28
00079b 961c      	ADIW R26,12
00079c 940e 07b8 	CALL __ADDW2R15
00079e 940e 07e9 	CALL __GETW1P
0007a0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x24:
0007a1 940e 0609 	CALL __long_delay_G101
0007a3 e3e0      	LDI  R30,LOW(48)
0007a4 93ea      	ST   -Y,R30
0007a5 940c 060e 	JMP  __lcd_init_write_G101
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x25:
0007a7 93ea      	ST   -Y,R30
0007a8 940e 0578 	CALL __lcd_write_data
0007aa 940c 0609 	JMP  __long_delay_G101
                 
                 
                 	.CSEG
                 _delay_ms:
0007ac 91e9      	ld   r30,y+
0007ad 91f9      	ld   r31,y+
0007ae 9630      	adiw r30,0
0007af f039      	breq __delay_ms1
                 __delay_ms0:
                +
0007b0 ea80     +LDI R24 , LOW ( 0xFA0 )
0007b1 e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
0007b2 9701     +SBIW R24 , 1
0007b3 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
0007b4 95a8      	wdr
0007b5 9731      	sbiw r30,1
0007b6 f7c9      	brne __delay_ms0
                 __delay_ms1:
0007b7 9508      	ret
                 
                 __ADDW2R15:
0007b8 2400      	CLR  R0
0007b9 0daf      	ADD  R26,R15
0007ba 1db0      	ADC  R27,R0
0007bb 9508      	RET
                 
                 __ANEGW1:
0007bc 95f1      	NEG  R31
0007bd 95e1      	NEG  R30
0007be 40f0      	SBCI R31,0
0007bf 9508      	RET
                 
                 __LSLB12:
0007c0 23ee      	TST  R30
0007c1 2e0e      	MOV  R0,R30
0007c2 2fea      	MOV  R30,R26
0007c3 f019      	BREQ __LSLB12R
                 __LSLB12L:
0007c4 0fee      	LSL  R30
0007c5 940a      	DEC  R0
0007c6 f7e9      	BRNE __LSLB12L
                 __LSLB12R:
0007c7 9508      	RET
                 
                 __MULW12U:
0007c8 9ffa      	MUL  R31,R26
0007c9 2df0      	MOV  R31,R0
0007ca 9feb      	MUL  R30,R27
0007cb 0df0      	ADD  R31,R0
0007cc 9fea      	MUL  R30,R26
0007cd 2de0      	MOV  R30,R0
0007ce 0df1      	ADD  R31,R1
0007cf 9508      	RET
                 
                 __MULB1W2U:
0007d0 2f6e      	MOV  R22,R30
0007d1 9f6a      	MUL  R22,R26
0007d2 01f0      	MOVW R30,R0
0007d3 9f6b      	MUL  R22,R27
0007d4 0df0      	ADD  R31,R0
0007d5 9508      	RET
                 
                 __DIVW21U:
0007d6 2400      	CLR  R0
0007d7 2411      	CLR  R1
0007d8 e190      	LDI  R25,16
                 __DIVW21U1:
0007d9 0faa      	LSL  R26
0007da 1fbb      	ROL  R27
0007db 1c00      	ROL  R0
0007dc 1c11      	ROL  R1
0007dd 1a0e      	SUB  R0,R30
0007de 0a1f      	SBC  R1,R31
0007df f418      	BRCC __DIVW21U2
0007e0 0e0e      	ADD  R0,R30
0007e1 1e1f      	ADC  R1,R31
0007e2 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0007e3 60a1      	SBR  R26,1
                 __DIVW21U3:
0007e4 959a      	DEC  R25
0007e5 f799      	BRNE __DIVW21U1
0007e6 01fd      	MOVW R30,R26
0007e7 01d0      	MOVW R26,R0
0007e8 9508      	RET
                 
                 __GETW1P:
0007e9 91ed      	LD   R30,X+
0007ea 91fc      	LD   R31,X
0007eb 9711      	SBIW R26,1
0007ec 9508      	RET
                 
                 __GETW1PF:
0007ed 9005      	LPM  R0,Z+
0007ee 91f4      	LPM  R31,Z
0007ef 2de0      	MOV  R30,R0
0007f0 9508      	RET
                 
                 __PUTPARD1:
0007f1 937a      	ST   -Y,R23
0007f2 936a      	ST   -Y,R22
0007f3 93fa      	ST   -Y,R31
0007f4 93ea      	ST   -Y,R30
0007f5 9508      	RET
                 
                 __SAVELOCR6:
0007f6 935a      	ST   -Y,R21
                 __SAVELOCR5:
0007f7 934a      	ST   -Y,R20
                 __SAVELOCR4:
0007f8 933a      	ST   -Y,R19
                 __SAVELOCR3:
0007f9 932a      	ST   -Y,R18
                 __SAVELOCR2:
0007fa 931a      	ST   -Y,R17
0007fb 930a      	ST   -Y,R16
0007fc 9508      	RET
                 
                 __LOADLOCR6:
0007fd 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0007fe 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0007ff 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000800 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000801 8119      	LDD  R17,Y+1
000802 8108      	LD   R16,Y
000803 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  36 r1 :   8 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  55 r17:  88 r18:  29 r19:  11 r20:   9 r21:  17 r22:  13 r23:   5 
r24:  15 r25:   5 r26: 146 r27:  57 r28:  15 r29:   1 r30: 499 r31: 184 
x  :  37 y  : 255 z  :  29 
Registers used: 22 out of 35 (62.9%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   9 add   :  14 
adiw  :  27 and   :   0 andi  :  13 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  22 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  16 
brlt  :   0 brmi  :   1 brne  :  38 brpl  :   1 brsh  :   9 brtc  :   0 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  : 184 
cbi   :  10 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  17 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   0 
cp    :   9 cpc   :  10 cpi   :  52 cpse  :   0 dec   :   4 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 
ijmp  :   0 in    :  18 inc   :   0 jmp   :  55 ld    :  56 ldd   :  76 
ldi   : 228 lds   :  19 lpm   :  16 lsl   :   5 lsr   :   0 mov   :  30 
movw  :  31 mul   :   7 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 
or    :   4 ori   :   9 out   :  49 pop   :   7 push  :   7 rcall :  26 
ret   :  50 reti  :   4 rjmp  : 106 rol   :   6 ror   :   0 sbc   :   2 
sbci  :  29 sbi   :  10 sbic  :   7 sbis  :  29 sbiw  :  23 sbr   :   1 
sbrc  :   3 sbrs  :  10 sec   :   0 seh   :   0 sei   :   1 sen   :   0 
ser   :   0 ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    : 143 std   :  33 sts   :  44 sub   :   2 subi  :  60 
swap  :   2 tst   :   5 wdr   :   1 
Instructions used: 64 out of 117 (54.7%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001008   3920    184   4104  131072   3.1%
[.dseg] 0x000100 0x0006ec      0    492    492    4351  11.3%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 1 warnings
