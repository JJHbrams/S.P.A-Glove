;/*****************************************************
;This program was produced by the JJH, KYY and Johnadan
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;� Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : 2018 ������ǰ 12�� - S.P.A glove
;Version : 1.0.0
;Date    : 2018-05-03
;Author  : JJH
;Company : Chungnam National University
;Comments: Holy Fucking Shit...
;
;
;Chip type               : Atmega128
;AVR Core Clock frequency: 16.000000 MHz
;*****************************************************/
;
;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdio.h>
;
;// Alphanumeric LCD Module functions
;#include <lcd.h>
;#asm
;PCODE: $0000000D VOL: 0
 .equ __lcd_port = 0x12 //PORTD 8
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 001C #endasm
;// About ADC
;#define ADC_VREF_TYPE 0x60
;#define NUM_SAMP  50  //MUST be Under 255
;//About Switch
;#define Left_switch_on    (!PINE.1)
;#define Middle_switch_on  (!PINE.2)
;#define Right_switch_on   (!PINE.3)
;#define Left_switch_off   (PINE.1)
;#define Middle_switch_off (PINE.2)
;#define Right_switch_off  (PINE.3)
;//About order
;#define Up_thumb    (!PINA.0)
;#define Down_thumb  (!PINA.1)
;#define Up_index    (!PINA.2)
;#define Down_index  (!PINA.3)
;#define Up_middle   (!PINA.4)
;#define Down_middle (!PINA.5)
;#define Up_rest     (!PINA.6)
;#define Down_rest   (!PINA.7)
;
;#define NO_SIGNAL_tu (PINA.0)
;#define NO_SIGNAL_td (PINA.1)
;#define NO_SIGNAL_iu (PINA.2)
;#define NO_SIGNAL_id (PINA.3)
;#define NO_SIGNAL_mu (PINA.4)
;#define NO_SIGNAL_md (PINA.5)
;#define NO_SIGNAL_ru (PINA.6)
;#define NO_SIGNAL_rd (PINA.7)
;
;//About u saturation
;#define UPPER   100
;#define LOWER   -100
;//About RUN
;#define INITIATE  TIMSK = 0x14, ETIMSK = 0x14   //TIM1_COMPA interrupt on, TIM1_OVF interrupt on (Inlet Valve control)
;                                                //TIM3_COMPA interrupt on, TIM3_OVF interrupt on (Outlet Valve control)
;
;#define TERMINATE TIMSK = 0x00, ETIMSK = 0x00   //TIM1_COMPA interrupt off, TIM1_OVF interrupt off (Inlet Valve control)
;                                                //TIM3_COMPA interrupt off, TIM3_OVF interrupt off (Outlet Valve control)
;//*****************************************************************************************************************
;// ****** Declare your global variables here  ******
;unsigned char sam_num = 0; // counting variable for ADC interrupt
;int i,j,k;
;//*****************************************************************************************************************
;// LCD
;unsigned char lcd_data[40];
;//*****************************************************************************************************************
;// ADC
;//unsigned char adc_data[4][100] = {0}; //adc �� IR/�з¼���/cds���� ������
;unsigned char mux = 0;
;//unsigned char NUM_SAMP = 50;
;unsigned char d_flag = 0;
;
;// * PSD
;unsigned char dist_data[2][NUM_SAMP] = {0}; //adc��ȯ ���� PSD���� �����Ǵ� �迭
;unsigned int dist_sum[2]={0};
;unsigned char dist_mean[2]={0};
;unsigned char dist_max[2] = {0, 0}; //tuning���� �ִ밪 �� �ּҰ��� �ֱ� ���� �迭
;unsigned char dist_min[2] = {255, 255};

	.DSEG
;
;// * Pressure
;unsigned char pressure_data[4][NUM_SAMP] = {0}; //adc �� �з¼������� ������
;unsigned int pressure_sum[4] = {0};
;unsigned char pressure_mean[4] = {0};
;unsigned char pressure_max[4] = {0, 0, 0, 0}; //tuning���� �ִ밪 �� �ּҰ��� �ֱ� ���� �迭
;unsigned char pressure_min[4] = {255, 255, 255, 255};
;
;// * Flex
;unsigned char flex_data[4][NUM_SAMP] = {0}; //adc �� �з¼������� ������
;unsigned int flex_sum[4] = {0};
;unsigned char flex_mean[4] = {0};
;unsigned char flex_max[4] = {0, 0, 0, 0}; //tuning���� �ִ밪 �� �ּҰ��� �ֱ� ���� �迭
;unsigned char flex_min[4] = {255, 255, 255, 255};
;// Moving
;unsigned char E_flag=0; //EXTENSION : 1
;unsigned char F_flag=0; //FLEXTION : 1
;unsigned char Global_Sequence=0;
;// PID
;unsigned int in_desire;
;unsigned int out_desire;
;unsigned char kp=0.0001;
;unsigned char ki=0.0000;
;unsigned char kd=0.0000;
;float error_old=0;
;float error_sum=0;
;unsigned char ang_desired=0;
;unsigned char ang_old[4]={0};//최초각도는 0도
;unsigned char delta_ang=10;//한 시퀀스당 10도 변화(실험하면서 결정할것)
;unsigned char Ts=50; //ms단위의 제어시퀀스 간격
;//*****************************************************************************************************************
;// Timer 1 Controls INLET!!
;// Timer1 output compare A interrupt service routine
;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
; 0000 0079 {

	.CSEG
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 007A   PORTC = 0x01<<Global_Sequence;//INLET Valve on
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 007B }
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;// Timer1 overflow A interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 007E {
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 007F   PORTC=0x00;//INLET Valve off
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0080 }
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;// Timer 3 Controls OUTLET!!
;// Timer3 overflow B interrupt service routine
;interrupt [TIM3_COMPB] void timer3_compa_isr(void)
; 0000 0084 {
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0085   PORTC = 0x10<<Global_Sequence;//OUTLET Valve on
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0086 }
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;// Timer1 output compare A interrupt service routine
;interrupt [TIM3_OVF] void timer3_ovf_isr(void)
; 0000 0089 {
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 008A   PORTC=0x00;//OUTLET Valve off
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 008B }
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;// ********************************* ADC interrupt service routine ************************************************
;interrupt [ADC_INT] void adc_isr(void)
; 0000 008E {
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 008F     // Read the AD conversion result
; 0000 0090     //for (h = 0; h<=6; h++);
; 0000 0091     //ADC���� high���� ������
; 0000 0092     if(mux>4)           flex_data[mux-4][sam_num] = ADCH;   // 4, 5, 6, 7
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0093     else                pressure_data[mux][sam_num] = ADCH;     // 0, 1, 2, 3
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0094     //ADC sampling
; 0000 0095     if(sam_num == NUM_SAMP)
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0096     {
; 0000 0097         mux++;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0098         sam_num=0;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0099         d_flag=1;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 009A     }
; 0000 009B 
; 0000 009C     mux &= 0x07;  //mux : 0~7
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 009D     ADMUX = mux | 0x60;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 009E     ADCSRA |= 0x40;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 009F     sam_num++;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 00A0 }
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;
;// ******************************** About Pressure Sensor *******************************************************
;void mean_pressure(unsigned char sequence)
; 0000 00A4 {
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 00A5     unsigned char num = 0; // counting variable for function
; 0000 00A6     while(!d_flag);
;PCODE: $00000069 VOL: 0
;	sequence -> Y+1
;	num -> R17
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 00A7     for(num = 0; num < NUM_SAMP; num++)
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 00A8         pressure_sum[sequence] += pressure_data[sequence][num];
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00A9 pressure_mean[sequence] = pressure_sum[sequence]/50  ;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00AA     pressure_sum[sequence] = 0;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00AB     d_flag=0;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00AC }
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;//Pressure test
;void pressure_test(void)
; 0000 00AF {
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00B0     unsigned char num = 0;
; 0000 00B1     delay_ms(300);
;PCODE: $000000B1 VOL: 0
;	num -> R17
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00B2 
; 0000 00B3     while(Middle_switch_off)
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00B4     {
; 0000 00B5         for(i=0;i<4;i++)
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00B6           mean_pressure((unsigned char)i);
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 00B8 lcd_clear();
;PCODE: $000000D0 VOL: 0
; 0000 00B9         lcd_gotoxy(0, 0);
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00BA         lcd_putsf("Testing");
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 00BB 
; 0000 00BC         if(Left_switch_on)  num++;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 00BD         if(Right_switch_on) num--;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00BE         if(num>3) num=3;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00BF 
; 0000 00C0         lcd_gotoxy(0, 1);
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00C1         sprintf(lcd_data, "%d", num);
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 00C2         lcd_puts(lcd_data);
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 00C3         lcd_gotoxy(4, 1);
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 00C4         sprintf(lcd_data, "%d", pressure_mean[num]);
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 00C5         lcd_puts(lcd_data);
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 00C6 
; 0000 00C7         delay_ms(200);
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 00C8     }
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 00C9 }
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;
;// Pressure tuning
;void pressure_tuning(void)
; 0000 00CD {
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 00CE     unsigned char num = 0;
; 0000 00CF     delay_ms(500);
;PCODE: $00000121 VOL: 0
;	num -> R17
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 00D0 
; 0000 00D1     while(Middle_switch_off)
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 00D2     {
; 0000 00D3         for(i=0;i<4;i++)
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 00D4           mean_pressure((unsigned char)i);
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 00D6 lcd_clear();
;PCODE: $00000140 VOL: 0
; 0000 00D7         lcd_gotoxy(0, 0);
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 00D8         lcd_putsf("Tunning");
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 00D9 
; 0000 00DA         if(Left_switch_on)  num++;
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 00DB         if(Right_switch_on) num--;
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 00DC         if(num>3) num=3;
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 00DD 
; 0000 00DE         if(pressure_mean[num]>pressure_max[num])  pressure_max[num]=pressure_mean[num];
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 00DF         if(pressure_mean[num]<pressure_min[num])  pressure_min[num]=pressure_mean[num];
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 00E0 
; 0000 00E1         lcd_gotoxy(0, 7);
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 00E2         sprintf(lcd_data, "%d", num);
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 00E3         lcd_puts(lcd_data);
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 00E4         lcd_gotoxy(0, 1);
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 00E5         sprintf(lcd_data, "%d", pressure_min[num]);
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 00E6         lcd_puts(lcd_data);
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 00E7         lcd_gotoxy(4, 1);
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0000 00E8         sprintf(lcd_data, "%d", pressure_max[num]);
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0000 00E9         lcd_puts(lcd_data);
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0000 00EA 
; 0000 00EB         delay_ms(100);
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0000 00EC     }
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0000 00ED }
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;
;// ******************************** About Flex Sensor *******************************************************
;void mean_flex(unsigned char sequence)
; 0000 00F1 {
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
; 0000 00F2     unsigned char num = 0; // counting variable for function
; 0000 00F3     while(!d_flag);
;PCODE: $000001CE VOL: 0
;	sequence -> Y+1
;	num -> R17
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 00F4     for(num = 0; num < NUM_SAMP; num++)
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0000 00F5         flex_sum[sequence] += flex_data[sequence][num];
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 00F6 flex_mean[sequence] = flex_sum[sequence]/50  ;
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0000 00F7     flex_sum[sequence] = 0;
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 00F8     d_flag=0;
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
; 0000 00F9 }
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;//Pressure test
;void flex_test(void)
; 0000 00FC {
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0000 00FD     unsigned char num = 0;
; 0000 00FE     delay_ms(300);
;PCODE: $00000216 VOL: 0
;	num -> R17
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
; 0000 00FF 
; 0000 0100     while(Middle_switch_off)
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0000 0101     {
; 0000 0102         for(i=0;i<4;i++)
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0000 0103           mean_flex((unsigned char)i);
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
; 0000 0105 lcd_clear();
;PCODE: $00000235 VOL: 0
; 0000 0106         lcd_gotoxy(0, 0);
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
; 0000 0107         lcd_putsf("Testing");
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
; 0000 0108 
; 0000 0109         if(Left_switch_on)  num++;
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
; 0000 010A         if(Right_switch_on) num--;
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
; 0000 010B         if(num>3) num=3;
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
; 0000 010C 
; 0000 010D         lcd_gotoxy(0, 1);
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
; 0000 010E         sprintf(lcd_data, "%d", num);
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
; 0000 010F         lcd_puts(lcd_data);
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
; 0000 0110         lcd_gotoxy(4, 1);
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
; 0000 0111         sprintf(lcd_data, "%d", flex_mean[num]);
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
; 0000 0112         lcd_puts(lcd_data);
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
; 0000 0113 
; 0000 0114         delay_ms(200);
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
; 0000 0115     }
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
; 0000 0116 }
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;
;// flex tuning
;void flex_tuning(void)
; 0000 011A {
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
; 0000 011B     unsigned char num = 0;
; 0000 011C     delay_ms(500);
;PCODE: $00000286 VOL: 0
;	num -> R17
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
; 0000 011D 
; 0000 011E     while(Middle_switch_off)
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
; 0000 011F     {
; 0000 0120         for(i=0;i<4;i++)
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
; 0000 0121           mean_flex((unsigned char)i);
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
; 0000 0123 lcd_clear();
;PCODE: $000002A5 VOL: 0
; 0000 0124         lcd_gotoxy(0, 0);
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
; 0000 0125         lcd_putsf("Tunning");
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
; 0000 0126 
; 0000 0127         if(Left_switch_on)  num++;
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
; 0000 0128         if(Right_switch_on) num--;
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
; 0000 0129         if(num>3) num=3;
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
; 0000 012A 
; 0000 012B         if(flex_mean[num]>pressure_max[num])  flex_max[num]=pressure_mean[num];
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
; 0000 012C         if(flex_mean[num]<pressure_min[num])  flex_min[num]=pressure_mean[num];
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
; 0000 012D 
; 0000 012E         lcd_gotoxy(0, 7);
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
; 0000 012F         sprintf(lcd_data, "%d", num);
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
; 0000 0130         lcd_puts(lcd_data);
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
; 0000 0131         lcd_gotoxy(0, 1);
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
; 0000 0132         sprintf(lcd_data, "%d", flex_min[num]);
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
; 0000 0133         lcd_puts(lcd_data);
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
; 0000 0134         lcd_gotoxy(4, 1);
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
; 0000 0135         sprintf(lcd_data, "%d", flex_max[num]);
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
; 0000 0136         lcd_puts(lcd_data);
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
; 0000 0137 
; 0000 0138         delay_ms(100);
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
; 0000 0139     }
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
; 0000 013A }
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;
;// ******************************** About PWM control *******************************************************
;void check_pwm(void)
; 0000 013E {
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
; 0000 013F     unsigned int temp = 350;//PWM interrupt control
; 0000 0140     delay_ms(100);
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;	temp -> R16,R17
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
; 0000 0141 
; 0000 0142     while(Middle_switch_off)
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
; 0000 0143     {
; 0000 0144         if(Left_switch_on)  temp+=10;
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
; 0000 0145         if(Right_switch_on)  temp-=10;
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
; 0000 0146         if(temp<=0) temp=0;
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
; 0000 0147         if(temp>=ICR1)  temp=ICR1;
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
; 0000 0148         // 솔레노이드 밸브 오기전까지 LED로 테스트
; 0000 0149         OCR1AH = temp>>8;
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
; 0000 014A         OCR1AL = temp;
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
; 0000 014B         lcd_clear();
;PCODE: $0000035A VOL: 0
; 0000 014C         lcd_gotoxy(0, 0);
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
; 0000 014D         lcd_putsf("TEST");
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
; 0000 014E         lcd_gotoxy(0, 1);
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
; 0000 014F         sprintf(lcd_data, "%d", temp);
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
; 0000 0150         lcd_puts(lcd_data);
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
; 0000 0151 
; 0000 0152         delay_ms(100);
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
; 0000 0153     }
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
; 0000 0154 }
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;
;// ******************************** About PWM control *******************************************************
;void PUMP_test()
; 0000 0158 {
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
; 0000 0159     unsigned int temp = 350;//PWM interrupt control
; 0000 015A     delay_ms(100);
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
;	temp -> R16,R17
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
; 0000 015B 
; 0000 015C     while(Middle_switch_off)
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
; 0000 015D     {
; 0000 015E         if(Left_switch_on)  temp+=10;
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
; 0000 015F         if(Right_switch_on)  temp-=10;
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
; 0000 0160         if(temp<=0) temp=0;
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
; 0000 0161         if(temp>=ICR1)  temp=ICR1;
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
; 0000 0162 
; 0000 0163         OCR1BH = temp>>8;
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
; 0000 0164         OCR1BL = temp;
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
; 0000 0165         lcd_clear();
;PCODE: $000003A9 VOL: 0
; 0000 0166         lcd_gotoxy(0, 0);
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
; 0000 0167         lcd_putsf("TEST");
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
; 0000 0168         lcd_gotoxy(0, 1);
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
; 0000 0169         sprintf(lcd_data, "%d", temp);
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
; 0000 016A         lcd_puts(lcd_data);
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
; 0000 016B 
; 0000 016C         delay_ms(100);
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
; 0000 016D     }
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
; 0000 016E }
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
;
;// ******************************** About Order *******************************************************
;unsigned char order(unsigned char sequence)
; 0000 0172 {
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
; 0000 0173     if(Up_thumb||Up_index||Up_middle||Up_rest)
;	sequence -> Y+0
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
; 0000 0174     {
; 0000 0175       //EXTENSION;
; 0000 0176       E_flag=1;
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
; 0000 0177       F_flag=0;
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
; 0000 0178     }
; 0000 0179     if(Down_thumb||Down_index||Down_middle||Down_rest)
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
; 0000 017A     {
; 0000 017B       //FLEXTION;
; 0000 017C       E_flag=0;
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
; 0000 017D       F_flag=1;
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
; 0000 017E     }
; 0000 017F     if(NO_SIGNAL_tu||NO_SIGNAL_td||NO_SIGNAL_iu||NO_SIGNAL_id||NO_SIGNAL_mu||NO_SIGNAL_md||NO_SIGNAL_ru||NO_SIGNAL_rd)
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
; 0000 0180     {
; 0000 0181       E_flag=0;
;PCODE: $00000411 VOL: 0
;PCODE: $00000412 VOL: 0
; 0000 0182       F_flag=0;
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
; 0000 0183     }
; 0000 0184     // sequence 0 : Thumb   PC0, PC4 on, PORTC = 0x11
; 0000 0185     // sequence 1 : Index   PC1, PC5 on, PORTC = 0x22
; 0000 0186     // sequence 2 : Middle  PC2, PC6 on, PORTC = 0x44
; 0000 0187     // sequence 3 : Rest    PC3, PC7 on, PORTC = 0x88
; 0000 0188     //PORTC = 0x11<<sequence;
; 0000 0189     sequence++;
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
; 0000 018A     if(sequence>3)  sequence=0;
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
; 0000 018B     return sequence;
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
;PCODE: $00000421 VOL: 0
; 0000 018C }
;PCODE: $00000422 VOL: 0
;
;void test_order()
; 0000 018F {
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
; 0000 0190     unsigned char sequence=0;
; 0000 0191 
; 0000 0192     delay_ms(100);
;PCODE: $00000425 VOL: 0
;	sequence -> R17
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
; 0000 0193     while(Middle_switch_on)
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
; 0000 0194     {
; 0000 0195       sequence=order(sequence);
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
;PCODE: $00000431 VOL: 0
; 0000 0196       delay_ms(100);//시퀀스 간격
;PCODE: $00000432 VOL: 0
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
; 0000 0197     }
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
; 0000 0198 }
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
;PCODE: $00000439 VOL: 0
;
;//*********************************%%%&&&&&&&&&&&&&&&&&&&&&&&%%%***************************************
;//*********************************%%% About Actual Movement %%%***************************************
;//*********************************%%%%%%%%%%%%%%%%%%%%%%%%%%%%%***************************************
;
;// Moving fingers
;void Move_finger(unsigned char P, unsigned char Bend)
; 0000 01A0 {
;PCODE: $0000043A VOL: 0
;PCODE: $0000043B VOL: 0
; 0000 01A1   unsigned char threshold;//Bend에 따라 능동적으로 변하는 기준치
; 0000 01A2   unsigned char Grab=0;//1이면 물체를 집은것(더이상 구부리지 않음)
; 0000 01A3   unsigned char E_OR_F;
; 0000 01A4   float r=0;//r=out_desire/in_desire
; 0000 01A5   float u=0;
; 0000 01A6   float error=0;
; 0000 01A7 
; 0000 01A8   /***Bend에 대해서 기술된 threshold에 대한 식을 넣으시오!!!***/
; 0000 01A9 
; 0000 01AA   // Grab or not?
; 0000 01AB   if(P>=threshold)  Grab=1;//기준치 이상이면 더이상 구부리지X
;PCODE: $0000043C VOL: 0
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
;	P -> Y+17
;	Bend -> Y+16
;	threshold -> R17
;	Grab -> R16
;	E_OR_F -> R19
;	r -> Y+12
;	u -> Y+8
;	error -> Y+4
;PCODE: $00000442 VOL: 0
;PCODE: $00000443 VOL: 0
;PCODE: $00000444 VOL: 0
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
; 0000 01AC   else Grab=0;//기준치 이하인 경우 구부릴 수 있음
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
; 0000 01AD 
; 0000 01AE   //각도 업데이트
; 0000 01AF   E_OR_F = ((E_flag==1?-1:1)+(F_flag==1?1:-1))/2;//Extension:1, Flextion:-1, Do noting:0
;PCODE: $0000044D VOL: 0
;PCODE: $0000044E VOL: 0
;PCODE: $0000044F VOL: 0
;PCODE: $00000450 VOL: 0
;PCODE: $00000451 VOL: 0
;PCODE: $00000452 VOL: 0
;PCODE: $00000453 VOL: 0
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
;PCODE: $00000458 VOL: 0
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
;PCODE: $0000045D VOL: 0
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 0
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
; 0000 01B0   ang_desired = Bend+E_OR_F*delta_ang;
;PCODE: $00000468 VOL: 0
;PCODE: $00000469 VOL: 0
;PCODE: $0000046A VOL: 0
;PCODE: $0000046B VOL: 0
;PCODE: $0000046C VOL: 0
; 0000 01B1   error = ang_desired-ang_old;
;PCODE: $0000046D VOL: 0
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 0
;PCODE: $00000471 VOL: 0
;PCODE: $00000472 VOL: 0
; 0000 01B2   error_sum += error;
;PCODE: $00000473 VOL: 0
;PCODE: $00000474 VOL: 0
;PCODE: $00000475 VOL: 0
;PCODE: $00000476 VOL: 0
; 0000 01B3   u = kp*error + ki*error_sum*(Ts/1000.) + kd*(error-error_old)/(Ts/1000.);//얘를 사용해서 OCR1A,OCR3A를 조절
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
;PCODE: $0000047C VOL: 0
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
;PCODE: $00000485 VOL: 0
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
;PCODE: $0000048C VOL: 0
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
;PCODE: $0000049B VOL: 0
;PCODE: $0000049C VOL: 0
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
;PCODE: $000004A2 VOL: 0
; 0000 01B4 
; 0000 01B5   //Saturation condition...
; 0000 01B6   if(u>UPPER)  u=UPPER;
;PCODE: $000004A3 VOL: 0
;PCODE: $000004A4 VOL: 0
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
; 0000 01B7   else if(u<LOWER)  u=LOWER;
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
;PCODE: $000004AD VOL: 0
;PCODE: $000004AE VOL: 0
;PCODE: $000004AF VOL: 0
;PCODE: $000004B0 VOL: 0
; 0000 01B8 
; 0000 01B9   // Input update
; 0000 01BA   r = ((E_flag==1?0.2:1)+(F_flag==1?1.8:1))/2 //Extension일때 r=0.6, 암것도안할때 r=1, Flextion일때 r=1.4 (비율은 실험적으로 결정할 것)
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
; 0000 01BB   in_desire = 아몰랑 시발ㅋㅋㅋ;
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
;PCODE: $000004B7 VOL: 0
;PCODE: $000004B8 VOL: 0
;PCODE: $000004B9 VOL: 0
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
;PCODE: $000004BC VOL: 0
;PCODE: $000004BD VOL: 0
;PCODE: $000004BE VOL: 0
;PCODE: $000004BF VOL: 0
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
;PCODE: $000004C2 VOL: 0
;PCODE: $000004C3 VOL: 0
;PCODE: $000004C4 VOL: 0
;PCODE: $000004C5 VOL: 0
;PCODE: $000004C6 VOL: 0
;PCODE: $000004C7 VOL: 0
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
;PCODE: $000004CA VOL: 0
;PCODE: $000004CB VOL: 0
; 0000 01BC   out_desire = r*in_desire;
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
;PCODE: $000004CE VOL: 0
;PCODE: $000004CF VOL: 0
;PCODE: $000004D0 VOL: 0
;PCODE: $000004D1 VOL: 0
;PCODE: $000004D2 VOL: 0
;PCODE: $000004D3 VOL: 0
;PCODE: $000004D4 VOL: 0
; 0000 01BD 
; 0000 01BE   //행위 정의
; 0000 01BF   OCR1A = in_desire;
;PCODE: $000004D5 VOL: 0
;PCODE: $000004D6 VOL: 0
; 0000 01C0   if(!Grab)//계속 움직일 수 있음
;PCODE: $000004D7 VOL: 0
;PCODE: $000004D8 VOL: 0
; 0000 01C1   {
; 0000 01C2     OCR3AH = out_desire>>8;
;PCODE: $000004D9 VOL: 0
;PCODE: $000004DA VOL: 0
; 0000 01C3     OCR3AL = out_desire;
;PCODE: $000004DB VOL: 0
;PCODE: $000004DC VOL: 0
; 0000 01C4   }
; 0000 01C5 
; 0000 01C6   else//계속해서 움직일 수 없음
;PCODE: $000004DD VOL: 0
;PCODE: $000004DE VOL: 0
; 0000 01C7   {
; 0000 01C8     OCR3AH = OCR1A>>8;//동적 평형상태유지
;PCODE: $000004DF VOL: 0
;PCODE: $000004E0 VOL: 0
;PCODE: $000004E1 VOL: 0
; 0000 01C9     OCR3AL = OCR1A;//동적 평형상태유지
;PCODE: $000004E2 VOL: 0
;PCODE: $000004E3 VOL: 0
; 0000 01CA   }
;PCODE: $000004E4 VOL: 0
; 0000 01CB 
; 0000 01CC 
; 0000 01CD   /*
; 0000 01CE   if(!Grab)//물체를 집지않음
; 0000 01CF   {
; 0000 01D0     if(!E_flag||!F_flag)//아무런 동작 없음
; 0000 01D1       return;
; 0000 01D2 
; 0000 01D3     else//구부리거나 펴거나
; 0000 01D4     {
; 0000 01D5       OCR1A = in_desire;
; 0000 01D6       OCR3A = out_desire;
; 0000 01D7     }
; 0000 01D8   }
; 0000 01D9   else//물체를 집음
; 0000 01DA   {
; 0000 01DB     if(E_flag)//손가락을 펴는 상황
; 0000 01DC     {
; 0000 01DD       OCR1A = in_desire;
; 0000 01DE       OCR3A = out_desire;
; 0000 01DF     }
; 0000 01E0     else
; 0000 01E1       return;
; 0000 01E2   }
; 0000 01E3   */
; 0000 01E4 }
;PCODE: $000004E5 VOL: 0
;PCODE: $000004E6 VOL: 0
;PCODE: $000004E7 VOL: 0
;PCODE: $000004E8 VOL: 0
;
;// About Daily mode
;void RUN_daily()
; 0000 01E8 {
;PCODE: $000004E9 VOL: 0
;PCODE: $000004EA VOL: 0
; 0000 01E9   unsigned char seq=0;
; 0000 01EA   float ANG[4]={0};
; 0000 01EB 
; 0000 01EC   delay_ms(100);
;PCODE: $000004EB VOL: 0
;PCODE: $000004EC VOL: 0
;PCODE: $000004ED VOL: 0
;PCODE: $000004EE VOL: 0
;PCODE: $000004EF VOL: 0
;PCODE: $000004F0 VOL: 0
;	seq -> R17
;	ANG -> Y+1
;PCODE: $000004F1 VOL: 0
;PCODE: $000004F2 VOL: 0
;PCODE: $000004F3 VOL: 0
;PCODE: $000004F4 VOL: 0
;PCODE: $000004F5 VOL: 0
; 0000 01ED   while(Middle_switch_on)
;PCODE: $000004F6 VOL: 0
;PCODE: $000004F7 VOL: 0
;PCODE: $000004F8 VOL: 0
;PCODE: $000004F9 VOL: 0
; 0000 01EE   {
; 0000 01EF     INITIATE; //초기화, 타이머 인터럽트 켬
;PCODE: $000004FA VOL: 0
;PCODE: $000004FB VOL: 0
;PCODE: $000004FC VOL: 0
;PCODE: $000004FD VOL: 0
; 0000 01F0 
; 0000 01F1     seq = order(seq); // 시퀀스마다 입력 받아옴(검지부터 시작)
;PCODE: $000004FE VOL: 0
;PCODE: $000004FF VOL: 0
;PCODE: $00000500 VOL: 0
; 0000 01F2     Global_Sequence = seq;
;PCODE: $00000501 VOL: 0
;PCODE: $00000502 VOL: 0
; 0000 01F3     delay_ms(Ts);//시퀀스 간격
;PCODE: $00000503 VOL: 0
;PCODE: $00000504 VOL: 0
;PCODE: $00000505 VOL: 0
;PCODE: $00000506 VOL: 0
; 0000 01F4 
; 0000 01F5     mean_pressure(seq);
;PCODE: $00000507 VOL: 0
;PCODE: $00000508 VOL: 0
; 0000 01F6     mean_flex(seq);
;PCODE: $00000509 VOL: 0
;PCODE: $0000050A VOL: 0
; 0000 01F7     ANG[seq] = flex_mean[seq]/(flex_max[seq]-flex_min[seq])*90.;//허용각도0~90도
;PCODE: $0000050B VOL: 0
;PCODE: $0000050C VOL: 0
;PCODE: $0000050D VOL: 0
;PCODE: $0000050E VOL: 0
;PCODE: $0000050F VOL: 0
;PCODE: $00000510 VOL: 0
;PCODE: $00000511 VOL: 0
;PCODE: $00000512 VOL: 0
;PCODE: $00000513 VOL: 0
;PCODE: $00000514 VOL: 0
;PCODE: $00000515 VOL: 0
;PCODE: $00000516 VOL: 0
;PCODE: $00000517 VOL: 0
;PCODE: $00000518 VOL: 0
;PCODE: $00000519 VOL: 0
;PCODE: $0000051A VOL: 0
;PCODE: $0000051B VOL: 0
;PCODE: $0000051C VOL: 0
;PCODE: $0000051D VOL: 0
;PCODE: $0000051E VOL: 0
;PCODE: $0000051F VOL: 0
;PCODE: $00000520 VOL: 0
;PCODE: $00000521 VOL: 0
;PCODE: $00000522 VOL: 0
;PCODE: $00000523 VOL: 0
;PCODE: $00000524 VOL: 0
;PCODE: $00000525 VOL: 0
;PCODE: $00000526 VOL: 0
;PCODE: $00000527 VOL: 0
;PCODE: $00000528 VOL: 0
; 0000 01F8 
; 0000 01F9     Move_finger(pressure_mean[seq], ANG[seq]);
;PCODE: $00000529 VOL: 0
;PCODE: $0000052A VOL: 0
;PCODE: $0000052B VOL: 0
;PCODE: $0000052C VOL: 0
;PCODE: $0000052D VOL: 0
;PCODE: $0000052E VOL: 0
;PCODE: $0000052F VOL: 0
;PCODE: $00000530 VOL: 0
;PCODE: $00000531 VOL: 0
;PCODE: $00000532 VOL: 0
;PCODE: $00000533 VOL: 0
;PCODE: $00000534 VOL: 0
;PCODE: $00000535 VOL: 0
;PCODE: $00000536 VOL: 0
; 0000 01FA     ang_old[seq]=ANG[seq];
;PCODE: $00000537 VOL: 0
;PCODE: $00000538 VOL: 0
;PCODE: $00000539 VOL: 0
;PCODE: $0000053A VOL: 0
;PCODE: $0000053B VOL: 0
;PCODE: $0000053C VOL: 0
;PCODE: $0000053D VOL: 0
;PCODE: $0000053E VOL: 0
;PCODE: $0000053F VOL: 0
;PCODE: $00000540 VOL: 0
;PCODE: $00000541 VOL: 0
;PCODE: $00000542 VOL: 0
;PCODE: $00000543 VOL: 0
; 0000 01FB   }
;PCODE: $00000544 VOL: 0
;PCODE: $00000545 VOL: 0
; 0000 01FC 
; 0000 01FD   TERMINATE; // 타이머 인터럽트 끔
;PCODE: $00000546 VOL: 0
;PCODE: $00000547 VOL: 0
;PCODE: $00000548 VOL: 0
;PCODE: $00000549 VOL: 0
; 0000 01FE   E_flag=0;
;PCODE: $0000054A VOL: 0
;PCODE: $0000054B VOL: 0
; 0000 01FF   F_flag=0;
;PCODE: $0000054C VOL: 0
;PCODE: $0000054D VOL: 0
; 0000 0200   Global_Sequence=0;
;PCODE: $0000054E VOL: 0
;PCODE: $0000054F VOL: 0
; 0000 0201 }
;PCODE: $00000550 VOL: 0
;PCODE: $00000551 VOL: 0
;PCODE: $00000552 VOL: 0
;PCODE: $00000553 VOL: 0
;PCODE: $00000554 VOL: 0
;
;
;
;// ********************************************* main ******************************************************************
;void main(void)
; 0000 0207 {
;PCODE: $00000555 VOL: 0
; 0000 0208 // Declare your local variables here
; 0000 0209 // menu
; 0000 020A unsigned char menu = 0;
; 0000 020B unsigned char menu_Max = 6;
; 0000 020C 
; 0000 020D // PA0~7 : Control switch
; 0000 020E PORTA=0xFE;
;	menu -> R17
;	menu_Max -> R16
;PCODE: $00000556 VOL: 0
;PCODE: $00000557 VOL: 0
;PCODE: $00000558 VOL: 0
;PCODE: $00000559 VOL: 0
;PCODE: $0000055A VOL: 0
;PCODE: $0000055B VOL: 0
; 0000 020F DDRA=0xFF;
;PCODE: $0000055C VOL: 0
;PCODE: $0000055D VOL: 0
; 0000 0210 // PB6 : Pump
; 0000 0211 PORTB=0x00;
;PCODE: $0000055E VOL: 0
;PCODE: $0000055F VOL: 0
; 0000 0212 DDRB=0xFF;
;PCODE: $00000560 VOL: 0
;PCODE: $00000561 VOL: 0
; 0000 0213 // PC0~3 : Inlet Valve
; 0000 0214 // PC4~7 : Outlet Valve
; 0000 0215 PORTC=0x00;
;PCODE: $00000562 VOL: 0
;PCODE: $00000563 VOL: 0
; 0000 0216 DDRC=0xFF;
;PCODE: $00000564 VOL: 0
;PCODE: $00000565 VOL: 0
; 0000 0217 // PD0~7 : LCD
; 0000 0218 PORTD=0x00;
;PCODE: $00000566 VOL: 0
;PCODE: $00000567 VOL: 0
; 0000 0219 DDRD=0xFF;
;PCODE: $00000568 VOL: 0
;PCODE: $00000569 VOL: 0
; 0000 021A // PE0 : EMERGENCY switch
; 0000 021B // PE1 : Interface switch - LEFT
; 0000 021C // PE2 : Interface switch - MIDDLE
; 0000 021D // PE3 : Interface switch - RIGHT
; 0000 021E // PE4 : Mode change switch (Toggle)
; 0000 021F PORTE=0x00;
;PCODE: $0000056A VOL: 0
;PCODE: $0000056B VOL: 0
; 0000 0220 DDRE=0xEF;
;PCODE: $0000056C VOL: 0
;PCODE: $0000056D VOL: 0
; 0000 0221 // PF0~3 : Pressure Sensor
; 0000 0222 // PF4~7 : Flex Sensor
; 0000 0223 PORTF=0x00;
;PCODE: $0000056E VOL: 0
;PCODE: $0000056F VOL: 0
; 0000 0224 DDRF=0x00;
;PCODE: $00000570 VOL: 0
;PCODE: $00000571 VOL: 0
; 0000 0225 PORTG=0x00;
;PCODE: $00000572 VOL: 0
;PCODE: $00000573 VOL: 0
; 0000 0226 DDRG=0x00;
;PCODE: $00000574 VOL: 0
;PCODE: $00000575 VOL: 0
; 0000 0227 
; 0000 0228 // Compare match interrupt  : Valve on
; 0000 0229 // Overflow interrupt       : Valve off
; 0000 022A // Timer 1 B : PUMP pwm control by using OCR1B
; 0000 022B // Timer 1   : Inlet Valve control
; 0000 022C // Timer 3   : Outlet Valve on
; 0000 022D 
; 0000 022E // Timer/Counter 1 initialization
; 0000 022F TCCR1A=0x22;//Timer 1 과 관련된 입출력 핀 중 OC1B만 PWM출력(TIM1_COMPAt시에 Low) 나머지는 GPIO로 사용
;PCODE: $00000576 VOL: 0
;PCODE: $00000577 VOL: 0
; 0000 0230 TCCR1B=0x18;//Timer 1 : Fast PWM mode, 분주비=1, TOP=ICR1
;PCODE: $00000578 VOL: 0
;PCODE: $00000579 VOL: 0
; 0000 0231 TCNT1H=0x00;
;PCODE: $0000057A VOL: 0
;PCODE: $0000057B VOL: 0
; 0000 0232 TCNT1L=0x00;
;PCODE: $0000057C VOL: 0
;PCODE: $0000057D VOL: 0
; 0000 0233 ICR1H=0x13;
;PCODE: $0000057E VOL: 0
;PCODE: $0000057F VOL: 0
; 0000 0234 ICR1L=0x87;
;PCODE: $00000580 VOL: 0
;PCODE: $00000581 VOL: 0
; 0000 0235 OCR1AH=0x00;
;PCODE: $00000582 VOL: 0
;PCODE: $00000583 VOL: 0
; 0000 0236 OCR1AL=0x00;
;PCODE: $00000584 VOL: 0
;PCODE: $00000585 VOL: 0
; 0000 0237 OCR1BH=0x00;
;PCODE: $00000586 VOL: 0
;PCODE: $00000587 VOL: 0
; 0000 0238 OCR1BL=0x00;
;PCODE: $00000588 VOL: 0
;PCODE: $00000589 VOL: 0
; 0000 0239 OCR1CH=0x00;
;PCODE: $0000058A VOL: 0
;PCODE: $0000058B VOL: 0
; 0000 023A OCR1CL=0x00;
;PCODE: $0000058C VOL: 0
;PCODE: $0000058D VOL: 0
; 0000 023B // Timer/Counter 3 initialization
; 0000 023C TCCR3A=0x02;//Timer 3 과 관련된 입출력 핀은 GPIO로 사용
;PCODE: $0000058E VOL: 0
;PCODE: $0000058F VOL: 0
; 0000 023D TCCR3B=0x18;//Timer 3 : Fast PWM mode, 분주비=1, TOP=ICR3
;PCODE: $00000590 VOL: 0
;PCODE: $00000591 VOL: 0
; 0000 023E TCNT3H=0x00;
;PCODE: $00000592 VOL: 0
;PCODE: $00000593 VOL: 0
; 0000 023F TCNT3L=0x00;
;PCODE: $00000594 VOL: 0
;PCODE: $00000595 VOL: 0
; 0000 0240 ICR3H=0x00;
;PCODE: $00000596 VOL: 0
;PCODE: $00000597 VOL: 0
; 0000 0241 ICR3L=0x00;
;PCODE: $00000598 VOL: 0
;PCODE: $00000599 VOL: 0
; 0000 0242 OCR3AH=0x00;
;PCODE: $0000059A VOL: 0
;PCODE: $0000059B VOL: 0
; 0000 0243 OCR3AL=0x00;
;PCODE: $0000059C VOL: 0
;PCODE: $0000059D VOL: 0
; 0000 0244 OCR3BH=0x00;
;PCODE: $0000059E VOL: 0
;PCODE: $0000059F VOL: 0
; 0000 0245 OCR3BL=0x00;
;PCODE: $000005A0 VOL: 0
;PCODE: $000005A1 VOL: 0
; 0000 0246 OCR3CH=0x00;
;PCODE: $000005A2 VOL: 0
;PCODE: $000005A3 VOL: 0
; 0000 0247 OCR3CL=0x00;
;PCODE: $000005A4 VOL: 0
;PCODE: $000005A5 VOL: 0
; 0000 0248 //Timer/counter interrupt
; 0000 0249 TIMSK = 0x00;
;PCODE: $000005A6 VOL: 0
;PCODE: $000005A7 VOL: 0
; 0000 024A ETIMSK = 0x00;
;PCODE: $000005A8 VOL: 0
;PCODE: $000005A9 VOL: 0
; 0000 024B 
; 0000 024C //ADC setting
; 0000 024D ADMUX=0x21;
;PCODE: $000005AA VOL: 0
;PCODE: $000005AB VOL: 0
; 0000 024E ADCSRA=0xCF;  //ADC enable, ADC start, ADC interrupt on, 분주비128(62.5kHz)
;PCODE: $000005AC VOL: 0
;PCODE: $000005AD VOL: 0
; 0000 024F SFIOR=0x01;
;PCODE: $000005AE VOL: 0
;PCODE: $000005AF VOL: 0
; 0000 0250 
; 0000 0251 lcd_init(8);
;PCODE: $000005B0 VOL: 0
;PCODE: $000005B1 VOL: 0
;PCODE: $000005B2 VOL: 0
; 0000 0252 // Global enable interrupts
; 0000 0253 #asm("sei")
;PCODE: $000005B3 VOL: 0
	sei
;PCODE: $000005B4 VOL: 0
; 0000 0254 //SREG = 0x80;
; 0000 0255 while (1)
;PCODE: $000005B5 VOL: 0
; 0000 0256       {
; 0000 0257         if(Left_switch_on) menu++;
;PCODE: $000005B6 VOL: 0
;PCODE: $000005B7 VOL: 0
;PCODE: $000005B8 VOL: 0
;PCODE: $000005B9 VOL: 0
;PCODE: $000005BA VOL: 0
; 0000 0258         if(Right_switch_on) menu--;
;PCODE: $000005BB VOL: 0
;PCODE: $000005BC VOL: 0
;PCODE: $000005BD VOL: 0
;PCODE: $000005BE VOL: 0
;PCODE: $000005BF VOL: 0
;PCODE: $000005C0 VOL: 0
; 0000 0259         if(menu > menu_Max)    menu = 0;
;PCODE: $000005C1 VOL: 0
;PCODE: $000005C2 VOL: 0
;PCODE: $000005C3 VOL: 0
;PCODE: $000005C4 VOL: 0
;PCODE: $000005C5 VOL: 0
;PCODE: $000005C6 VOL: 0
; 0000 025A         if(menu == 0)
;PCODE: $000005C7 VOL: 0
;PCODE: $000005C8 VOL: 0
;PCODE: $000005C9 VOL: 0
; 0000 025B             if(Right_switch_on) menu = menu_Max;
;PCODE: $000005CA VOL: 0
;PCODE: $000005CB VOL: 0
;PCODE: $000005CC VOL: 0
;PCODE: $000005CD VOL: 0
;PCODE: $000005CE VOL: 0
; 0000 025C 
; 0000 025D         switch(menu)
;PCODE: $000005CF VOL: 0
;PCODE: $000005D0 VOL: 0
;PCODE: $000005D1 VOL: 0
;PCODE: $000005D2 VOL: 0
; 0000 025E         {
; 0000 025F             // Sensor TEST
; 0000 0260             case 0:
;PCODE: $000005D3 VOL: 0
;PCODE: $000005D4 VOL: 0
; 0000 0261                     lcd_clear();
;PCODE: $000005D5 VOL: 0
; 0000 0262                     lcd_gotoxy(0, 0);
;PCODE: $000005D6 VOL: 0
;PCODE: $000005D7 VOL: 0
;PCODE: $000005D8 VOL: 0
;PCODE: $000005D9 VOL: 0
;PCODE: $000005DA VOL: 0
; 0000 0263                     lcd_putsf("1.Pressure TEST");
;PCODE: $000005DB VOL: 0
;PCODE: $000005DC VOL: 0
;PCODE: $000005DD VOL: 0
;PCODE: $000005DE VOL: 0
; 0000 0264                     if(Middle_switch_on) pressure_test();
;PCODE: $000005DF VOL: 0
;PCODE: $000005E0 VOL: 0
;PCODE: $000005E1 VOL: 0
;PCODE: $000005E2 VOL: 0
; 0000 0265                     delay_ms(300);
;PCODE: $000005E3 VOL: 0
;PCODE: $000005E4 VOL: 0
;PCODE: $000005E5 VOL: 0
;PCODE: $000005E6 VOL: 0
; 0000 0266                     break;
;PCODE: $000005E7 VOL: 0
; 0000 0267 
; 0000 0268             case 1:
;PCODE: $000005E8 VOL: 0
;PCODE: $000005E9 VOL: 0
;PCODE: $000005EA VOL: 0
; 0000 0269                     lcd_clear();
;PCODE: $000005EB VOL: 0
; 0000 026A                     lcd_gotoxy(0, 0);
;PCODE: $000005EC VOL: 0
;PCODE: $000005ED VOL: 0
;PCODE: $000005EE VOL: 0
;PCODE: $000005EF VOL: 0
;PCODE: $000005F0 VOL: 0
; 0000 026B                     lcd_putsf("2.Pressure Tunning");
;PCODE: $000005F1 VOL: 0
;PCODE: $000005F2 VOL: 0
;PCODE: $000005F3 VOL: 0
;PCODE: $000005F4 VOL: 0
; 0000 026C                     if(Middle_switch_on)    pressure_tuning();
;PCODE: $000005F5 VOL: 0
;PCODE: $000005F6 VOL: 0
;PCODE: $000005F7 VOL: 0
;PCODE: $000005F8 VOL: 0
; 0000 026D                     delay_ms(300);
;PCODE: $000005F9 VOL: 0
;PCODE: $000005FA VOL: 0
;PCODE: $000005FB VOL: 0
;PCODE: $000005FC VOL: 0
; 0000 026E                     break;
;PCODE: $000005FD VOL: 0
; 0000 026F 
; 0000 0270             case 2:
;PCODE: $000005FE VOL: 0
;PCODE: $000005FF VOL: 0
;PCODE: $00000600 VOL: 0
; 0000 0271                     lcd_clear();
;PCODE: $00000601 VOL: 0
; 0000 0272                     lcd_gotoxy(0, 0);
;PCODE: $00000602 VOL: 0
;PCODE: $00000603 VOL: 0
;PCODE: $00000604 VOL: 0
;PCODE: $00000605 VOL: 0
;PCODE: $00000606 VOL: 0
; 0000 0273                     lcd_putsf("3.Flex TEST");
;PCODE: $00000607 VOL: 0
;PCODE: $00000608 VOL: 0
;PCODE: $00000609 VOL: 0
;PCODE: $0000060A VOL: 0
; 0000 0274                     if(Middle_switch_on)    flex_test();
;PCODE: $0000060B VOL: 0
;PCODE: $0000060C VOL: 0
;PCODE: $0000060D VOL: 0
;PCODE: $0000060E VOL: 0
; 0000 0275                     delay_ms(300);
;PCODE: $0000060F VOL: 0
;PCODE: $00000610 VOL: 0
;PCODE: $00000611 VOL: 0
;PCODE: $00000612 VOL: 0
; 0000 0276                     break;
;PCODE: $00000613 VOL: 0
; 0000 0277             case 3:
;PCODE: $00000614 VOL: 0
;PCODE: $00000615 VOL: 0
;PCODE: $00000616 VOL: 0
; 0000 0278                     lcd_clear();
;PCODE: $00000617 VOL: 0
; 0000 0279                     lcd_gotoxy(0, 0);
;PCODE: $00000618 VOL: 0
;PCODE: $00000619 VOL: 0
;PCODE: $0000061A VOL: 0
;PCODE: $0000061B VOL: 0
;PCODE: $0000061C VOL: 0
; 0000 027A                     lcd_putsf("4.Flex Tunning");
;PCODE: $0000061D VOL: 0
;PCODE: $0000061E VOL: 0
;PCODE: $0000061F VOL: 0
;PCODE: $00000620 VOL: 0
; 0000 027B                     if(Middle_switch_on)    flex_tuning();
;PCODE: $00000621 VOL: 0
;PCODE: $00000622 VOL: 0
;PCODE: $00000623 VOL: 0
;PCODE: $00000624 VOL: 0
; 0000 027C                     delay_ms(300);
;PCODE: $00000625 VOL: 0
;PCODE: $00000626 VOL: 0
;PCODE: $00000627 VOL: 0
;PCODE: $00000628 VOL: 0
; 0000 027D                     break;
;PCODE: $00000629 VOL: 0
; 0000 027E 
; 0000 027F             case 4:
;PCODE: $0000062A VOL: 0
;PCODE: $0000062B VOL: 0
;PCODE: $0000062C VOL: 0
; 0000 0280                     lcd_clear();
;PCODE: $0000062D VOL: 0
; 0000 0281                     lcd_gotoxy(0, 0);
;PCODE: $0000062E VOL: 0
;PCODE: $0000062F VOL: 0
;PCODE: $00000630 VOL: 0
;PCODE: $00000631 VOL: 0
;PCODE: $00000632 VOL: 0
; 0000 0282                     lcd_putsf("5.PWM TEST");
;PCODE: $00000633 VOL: 0
;PCODE: $00000634 VOL: 0
;PCODE: $00000635 VOL: 0
;PCODE: $00000636 VOL: 0
; 0000 0283                     if(Middle_switch_on)    check_pwm();
;PCODE: $00000637 VOL: 0
;PCODE: $00000638 VOL: 0
;PCODE: $00000639 VOL: 0
;PCODE: $0000063A VOL: 0
; 0000 0284                     delay_ms(300);
;PCODE: $0000063B VOL: 0
;PCODE: $0000063C VOL: 0
;PCODE: $0000063D VOL: 0
;PCODE: $0000063E VOL: 0
; 0000 0285                     break;
;PCODE: $0000063F VOL: 0
; 0000 0286 
; 0000 0287             case 5:
;PCODE: $00000640 VOL: 0
;PCODE: $00000641 VOL: 0
;PCODE: $00000642 VOL: 0
; 0000 0288                     lcd_clear();
;PCODE: $00000643 VOL: 0
; 0000 0289                     lcd_gotoxy(0, 0);
;PCODE: $00000644 VOL: 0
;PCODE: $00000645 VOL: 0
;PCODE: $00000646 VOL: 0
;PCODE: $00000647 VOL: 0
;PCODE: $00000648 VOL: 0
; 0000 028A                     lcd_putsf("6.PUMP TEST");
;PCODE: $00000649 VOL: 0
;PCODE: $0000064A VOL: 0
;PCODE: $0000064B VOL: 0
;PCODE: $0000064C VOL: 0
; 0000 028B                     if(Middle_switch_on)    PUMP_test();
;PCODE: $0000064D VOL: 0
;PCODE: $0000064E VOL: 0
;PCODE: $0000064F VOL: 0
;PCODE: $00000650 VOL: 0
; 0000 028C                     delay_ms(300);
;PCODE: $00000651 VOL: 0
;PCODE: $00000652 VOL: 0
;PCODE: $00000653 VOL: 0
;PCODE: $00000654 VOL: 0
; 0000 028D                     break;
;PCODE: $00000655 VOL: 0
; 0000 028E 
; 0000 028F             case 6:
;PCODE: $00000656 VOL: 0
;PCODE: $00000657 VOL: 0
;PCODE: $00000658 VOL: 0
; 0000 0290                     lcd_clear();
;PCODE: $00000659 VOL: 0
; 0000 0291                     lcd_gotoxy(0, 0);
;PCODE: $0000065A VOL: 0
;PCODE: $0000065B VOL: 0
;PCODE: $0000065C VOL: 0
;PCODE: $0000065D VOL: 0
;PCODE: $0000065E VOL: 0
; 0000 0292                     lcd_putsf("7.Order TEST");
;PCODE: $0000065F VOL: 0
;PCODE: $00000660 VOL: 0
;PCODE: $00000661 VOL: 0
;PCODE: $00000662 VOL: 0
; 0000 0293                     if(Middle_switch_on)    test_order();
;PCODE: $00000663 VOL: 0
;PCODE: $00000664 VOL: 0
;PCODE: $00000665 VOL: 0
;PCODE: $00000666 VOL: 0
; 0000 0294                     delay_ms(300);
;PCODE: $00000667 VOL: 0
;PCODE: $00000668 VOL: 0
;PCODE: $00000669 VOL: 0
;PCODE: $0000066A VOL: 0
; 0000 0295                     break;
;PCODE: $0000066B VOL: 0
; 0000 0296 
; 0000 0297              default :
;PCODE: $0000066C VOL: 0
; 0000 0298                     lcd_clear();
;PCODE: $0000066D VOL: 0
; 0000 0299                     lcd_gotoxy(0, 0);
;PCODE: $0000066E VOL: 0
;PCODE: $0000066F VOL: 0
;PCODE: $00000670 VOL: 0
;PCODE: $00000671 VOL: 0
;PCODE: $00000672 VOL: 0
; 0000 029A                     lcd_putsf("**BREAK!**");
;PCODE: $00000673 VOL: 0
;PCODE: $00000674 VOL: 0
;PCODE: $00000675 VOL: 0
;PCODE: $00000676 VOL: 0
; 0000 029B                     delay_ms(300);
;PCODE: $00000677 VOL: 0
;PCODE: $00000678 VOL: 0
;PCODE: $00000679 VOL: 0
; 0000 029C                     break;
;PCODE: $0000067A VOL: 0
; 0000 029D 
; 0000 029E          }
;PCODE: $0000067B VOL: 0
; 0000 029F       }
;PCODE: $0000067C VOL: 0
;PCODE: $0000067D VOL: 0
; 0000 02A0 
; 0000 02A1 }
;PCODE: $0000067E VOL: 0
;PCODE: $0000067F VOL: 0
;PCODE: $00000680 VOL: 0
